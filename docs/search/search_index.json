{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo ao projeto Nuvols Core","text":""},{"location":"#sobre","title":"Sobre","text":"<p>Esse projeto foi desenvolvimento para facilitar o desenvolvimento de sistemas Django trazendo diversas tecnologias embarcadas para expander o conceito Dont Repeat Yourself (DRY), al\u00e9m das tecnologias j\u00e1 embarcadas temos managers para automatizar a gera\u00e7\u00e3o de c\u00f3gido do projeto</p>"},{"location":"#principais-bibliotecas-embarcadas-no-projeto","title":"Principais bibliotecas embarcadas no projeto","text":"<ul> <li>Django rest framework</li> <li>PyTest</li> <li>Flake8</li> <li>Prospector</li> <li>Python Decouple</li> <li>Taskipy</li> </ul>"},{"location":"#equipe","title":"Equipe","text":""},{"location":"#coordenador","title":"Coordenador","text":""},{"location":"#guilherme-de-carvalho-carneiro","title":"Guilherme de Carvalho Carneiro","text":""},{"location":"#desenvolvedores","title":"Desenvolvedores","text":""},{"location":"#thiago-schuch","title":"Thiago Schuch","text":""},{"location":"#claysllan-ferreira","title":"Claysllan Ferreira","text":""},{"location":"#brayan-mota","title":"Brayan Mota","text":""},{"location":"#lucas-siqueira","title":"Lucas Siqueira","text":""},{"location":"#robson-ronzani","title":"Robson Ronzani","text":""},{"location":"#emanoel-mendes","title":"Emanoel Mendes","text":""},{"location":"#thales-barbosa","title":"Thales Barbosa","text":""},{"location":"#marcio-henrique-rodrigues-de-lima","title":"M\u00e1rcio Henrique Rodrigues de Lima","text":""},{"location":"#andre-praca-pinheiro","title":"Andr\u00e9 Pra\u00e7a Pinheiro","text":""},{"location":"#marco-antonio","title":"Marco Ant\u00f4nio","text":""},{"location":"#licenca","title":"Licen\u00e7a","text":"<p> The MIT License (MIT)</p> <p>Copyright \u00a9 2023</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>Nuvols - </p> <p>falecom@nuvols.com.br</p> <p></p>"},{"location":"django_rest_framework/","title":"Django Rest Framework","text":""},{"location":"django_rest_framework/#sobre","title":"Sobre","text":"<p>Framework utilizado para criar APIs seguindo o padr\u00e3o Rest.</p>"},{"location":"django_rest_framework/#settings","title":"Settings","text":"<pre><code>INSTALLED_APPS = [\n    ...\n    'rest_framework',\n    ]\n</code></pre> <p>Configurando a estrutura de pagina\u00e7\u00e3o dos responses, caso deseje alterar a quantidade de itens por p\u00e1gina, basta alterar o valor da chave PAGE_SIZE</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n    }\n</code></pre> <p>Configurando o padr\u00e3o de filtros da API</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': [\n        'django_filters.rest_framework.DjangoFilterBackend',\n        ],\n    }\n</code></pre> <p>Configurando quais formas de autentica\u00e7\u00e3o ser\u00e3o aceitas para consumir os endpoints</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        ],\n    }\n</code></pre> <p>Configurando o padr\u00e3o do parser, deixar o padr\u00e3o</p> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_rapidjson.renderers.RapidJSONRenderer',\n        ),\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_rapidjson.parsers.RapidJSONParser',\n        ),\n    }\n</code></pre>"},{"location":"django_rest_framework/#exemplo-completo-da-configuracao-padrao-do-projeto","title":"Exemplo completo da configura\u00e7\u00e3o padr\u00e3o do projeto","text":"<pre><code>REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': [\n        'django_filters.rest_framework.DjangoFilterBackend',\n        ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 50\n    }\n</code></pre>"},{"location":"django_rest_framework/#serializers","title":"Serializer(s)","text":"<p>Exemplo de serializer</p> <pre><code>class UsuarioSerializer(ModelSerializer):\n    \"\"\" Class do serializer do model Usuario para os m\u00e9todos \n    POST, PUT, PATCH, DELETE \"\"\"\n\n    class Meta:\n        model = Usuario\n        fields = '__all__'\n\n\nclass UsuarioGETSerializer(FieldsListSerializerMixin, ModelSerializer):\n    \"\"\" Class do serializer do model Usuario para o m\u00e9todo GET \"\"\"\n\n    class Meta:\n        model = Usuario\n        fields = '__all__'\n</code></pre>"},{"location":"django_rest_framework/#views-api_viewspy","title":"View(s) - api_views.py","text":"<p>O decorator @permission_classes([IsAuthenticated, ]) determina que os endpoints s\u00f3 podem ser acessados por usu\u00e1rios  que estejam autenticados.</p> <pre><code>\n\n@permission_classes([IsAuthenticated, ])\nclass UsuarioViewAPI(ModelViewSet):\n    \"\"\" Classe para gerenciar as requisi\u00e7\u00f5es da API para os m\u00e9todos \n    POST, PUT, PATCH e DELETE \"\"\"\n    queryset = Usuario.objects.select_related().all()\n    serializer_class = UsuarioSerializer\n\n\n@permission_classes([IsAuthenticated, ])\nclass UsuarioGETAPI(OptimizedQuerySetMixin, ReadOnlyModelViewSet):\n    \"\"\" Classe para gerenciar as requisi\u00e7\u00f5es da API para o m\u00e9todos GET\n\n        A lista filterset_fields deve ser configurada com os \n        campos do models que poder\u00e3o ser utilizados para realizar\n        filtros no models como por exemplo \n        nome_do_campo=valor_a_ser_filtrado\n\n        A lista search_fields deve ser configurada com os campos \n        do models que poder\u00e3o ser utilizados para realizar\n        buscas no models como por exemplo search=valor_a_ser_pesquisado\n    \"\"\"\n    queryset = Usuario.objects.select_related().all()\n    serializer_class = UsuarioGETSerializer\n    filter_backend = [filters.SearchFilter]\n    filterset_fields = []\n    search_fields = []\n\n</code></pre>"},{"location":"django_rest_framework/#url-api-api_urlspy","title":"Url API - api_urls.py","text":"<pre><code>from .api_views import UsuarioViewAPI, UsuarioGETAPI\n\nrouter = routers.DefaultRouter()\n\n# URL para a API Usuario\n# Configurando rota para o endpoint dos m\u00e9todos POST PUT PATCH DELETE\nrouter.register(r'usuario', UsuarioViewAPI, 'usuario-api')\n\n# Configurando rota para o endpoint do m\u00e9todo GET\nrouter.register(r'usuario-get', UsuarioGETAPI, 'usuario-get-api')\n\nurlpatterns = router.urls\n</code></pre>"},{"location":"django_rest_framework/#url-urlspy","title":"Url - urls.py","text":"<p>Para que as rotas sejam identificadas pela respectiva app \u00e9 necess\u00e1rio adicionar o path abaixo no arquivo urls.py da app</p> <pre><code>path('api/usuario/', include('usuario.api_urls')),\n</code></pre>"},{"location":"django_rest_framework/#links","title":"Links","text":"Pip Docs Pip Doc"},{"location":"flake8/","title":"Flake8","text":""},{"location":"flake8/#sobre","title":"Sobre","text":"<p>Biblioteca respons\u00e1vel por analisar se os c\u00f3digos do projeto est\u00e3o segundo os padr\u00f5es de qualidade de c\u00f3digo do Python, as famosas PEP`s.  </p> <p>Na raiz do projeto existe o arquivo .flake8 que deve ser utilizado para configurar o comportamento da lib. Por padr\u00e3o foi configurado que o limite de caracteres por linha \u00e9 de 120</p>"},{"location":"flake8/#executar","title":"Executar","text":"<pre><code>flake8\n</code></pre>"},{"location":"flake8/#arquivo-de-configuracao-padrao","title":"Arquivo de configura\u00e7\u00e3o padr\u00e3o","text":"<pre><code>[flake8]\nmax-line-length=120\nexclude=.venv\n</code></pre>"},{"location":"flake8/#links","title":"Links","text":"Pip Docs Pip Doc"},{"location":"managers/","title":"Managers","text":""},{"location":"managers/#sobre","title":"Sobre","text":"<p>No projeto existem dois managers para auxiliar o desenvolvimento do projeto Django, e se necess\u00e1rio auxiliar o desenvolvimento do projeto Mobile. </p> <ul> <li>O primeiro manager build tem como objetivo gerar todo o c\u00f3digo biolerplate padr\u00e3o (CRUD) da aplica\u00e7\u00e3o Django.</li> <li>O segundo manager flutter tem como objetivo gerar um projeto flutter baseado nas apps do projeto Django</li> </ul>"},{"location":"managers/#manager-build","title":"Manager Build","text":""},{"location":"managers/#parametros","title":"Par\u00e2metros","text":"<ol> <li>App [Obrigat\u00f3rio] - Nome da app que dever\u00e1 ser renderizada pelo manager </li> <li>Model [Opcional] - Nome do model que dever\u00e1 ser renderizado pelo manager.             (Caso n\u00e3o seja passada o sistema renderizar\u00e1 todos os models da App)  </li> <li> <p>templates [Opcional] - Caso seja passado apenas os arquivos de template HTML.     3.1. Para que o template de listagem renderize os campos corretamente, devem ser           setados quais atributos ser\u00e3o mostrados no par\u00e2metro fields_display do class Meta do models  </p> <p>3.2. Para os models que possuem campos relacionais do tipo ForeignKey e voc\u00ea deseje que seja criado       o modal com um formul\u00e1rio para inser\u00e7\u00e3o de dados voc\u00ea deve configurar o atributo fk_fields_modal       tamb\u00e9m no class Meta do seu models.</p> <pre><code>    Exemplo:\n\n    class Exemplo(Base):\n        ...\n        class Meta:\n            fields_display = [\"atributo_um\", \"atributo_dois\"', \"atributo_n\"]\n            fk_fields_modal = [\"foreignkey_um\", \"foreignkey_dois\", \"foreignkey_n\"]\n</code></pre> </li> <li> <p>url [Opcional] - Deve ser executado para criar as urls.</p> </li> <li>forms [Opcional] - Deve ser executado para criar os forms .</li> <li>views [Opcional] - Deve ser executado para criar as ClassBaseView`s.</li> <li>renderhtml [Opcional] - Deve ser executado para renderizar os formul\u00e1rios no templates HTML.</li> <li>format [Opcional] - Dever ser executado para formatar o c\u00f3digo utilizando a PEP 8.</li> <li>api [Opcional] - Deve ser executado para gerar todo o c\u00f3digo (CRUD) boilerplate da APIRest.</li> </ol>"},{"location":"managers/#executar","title":"Executar","text":"<pre><code>python manage.py build NomeDaApp\n</code></pre>"},{"location":"managers/#manager-flutter","title":"Manager Flutter","text":""},{"location":"managers/#observacao","title":"Observa\u00e7\u00e3o","text":"<p>Para que o projeto funcione corretamente \u00e9 necess\u00e1rio ter na sua m\u00e1quina o Dart 2.12.3 e o Flutter 2.0.5 na vers\u00e3o  m\u00ednima.  </p> <p>Para baixar as ferramentas acesse https://flutter.dev/</p> <p>Para que esse manager funcione de forma correta devem ser configurados no arquivos settings.py do projeto os seguintes valores:   1. FLUTTER_APPS = ['usuario', ]   2. API_PATH = https://dominio.com.br/core/api</p>"},{"location":"managers/#executar_1","title":"Executar","text":"<pre><code>python manage.py flutter\n</code></pre>"},{"location":"managers/#configuracao-projeto-android","title":"Configura\u00e7\u00e3o Projeto Android","text":"<p>Para que o projeto Android funcione de forma correta \u00e9 necess\u00e1rio adicionar o par\u00e2metro: multiDexEnabled true Vide exemplo abaixo</p> <p></p> <p>Os comandos abaixo devem ser utilizado caso seja criada uma nova app no projeto Django e voc\u00ea queirar gerar o correspondente no projeto Flutter</p> <p>Para gerar os arquivos flutter de uma determinada App/Model</p> <p>python manage.py flutter --model NomeDaApp nome_do_model</p> <p>Para atualizar o arquivo main.dart com todas as apps do projeto</p> <p>python manage.py flutter --main</p> <p>Como resultado desse comando ser\u00e1 criado um diret\u00f3rio de nome flutter no mesmo n\u00edvel do diret\u00f3rio raiz do projeto e dentro desse diret\u00f3rio estar\u00e1 o projeto flutter.</p>"},{"location":"prospector/","title":"Prospector","text":""},{"location":"prospector/#sobre","title":"Sobre","text":"<p>Biblioteca utilizada para manter a qualidade do c\u00f3digo.  </p> <p>Na raiz do projeto existe o arquivo <code>.prospector.yaml</code> contendo a configura\u00e7\u00e3o padr\u00e3o para valida\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"prospector/#executar","title":"Executar","text":"<pre><code>prospector\n</code></pre>"},{"location":"prospector/#arquivo-de-configuracao-padrao","title":"Arquivo de configura\u00e7\u00e3o padr\u00e3o","text":"<pre><code>strictness: medium\ntest-warnings: true\ndoc-warnings: false\n\nignore-paths:\n  - docs\n  - core\n  - mock_data.py\n\nignore-patterns:\n  - (^|/)skip(this)?(/|$)\n\npep8:\n  disable:\n    - W602\n    - W603\n  enable:\n    - W601\n  options:\n    max-line-length: 120\n\nmccabe:\n  run: false\n</code></pre>"},{"location":"prospector/#links","title":"Links","text":"Pip Docs Pip Doc"},{"location":"pytest/","title":"Pytest","text":""},{"location":"pytest/#sobre","title":"Sobre","text":"<p>Framework para realizar testes unit\u00e1rios compreendendo testes de:</p> <p>1 - models.py 2 - forms.py 3 - views.py</p> <p>Na raiz do projeto existe o arquivo <code>pytest.ini</code> contendo a configura\u00e7\u00e3o necess\u00e1rio para que o framework identifique os testes no projeto Django.</p>"},{"location":"pytest/#executar","title":"Executar","text":"<pre><code>pytest\n</code></pre>"},{"location":"pytest/#relatorio-de-cobertura-dos-testes","title":"Relat\u00f3rio de cobertura dos testes","text":"<pre><code>----------- coverage: platform win32, python 3.8.6-final-0 -----------\nName                                             Stmts   Miss  Cover\n--------------------------------------------------------------------\n__init__.py                                          0      0   100%\nusuario\\__init__.py                                  1      0   100%\nusuario\\admin.py                                     1      0   100%\nusuario\\apps.py                                      4      0   100%\nusuario\\models.py                                   43     14    67%\nusuario\\tests\\__init__.py                            0      0   100%\nusuario\\tests\\tests.py                              13      0   100%\n--------------------------------------------------------------------\nTOTAL                                               80     14    82%\n\nFAIL Required test coverage of 90% not reached. Total coverage: 82.50%\n</code></pre>"},{"location":"pytest/#gerar-a-base-dos-testes-de-uma-app-especifica","title":"Gerar a base dos testes de uma app espec\u00edfica","text":"<p>Para agilizar a cria\u00e7\u00e3o dos testes, foi criado um comando para gerar a base dos testes de uma app espec\u00edfica. Este comando ir\u00e1 gerar os arquivos <code>tests_forms.py</code>, <code>tests_models.py</code> e <code>tests_views.py</code> separando-os por pastas de cada modelo que ficar\u00e1 localizada dentro da pasta <code>tests</code> da app.</p> <pre><code>python manage.py build nome_da_app --tests\n\n</code></pre>"},{"location":"pytest/#exemplo-de-testes-contidos-na-app-usuario","title":"Exemplo de testes contidos na app usuario","text":"<p>Para facilitar a replica\u00e7\u00e3o dos testes para as apps que voc\u00ea desenvolver, foram criados os arquivos de testes <code>tests_forms.py</code>, <code>tests_models.py</code> e <code>tests_views.py</code> na app <code>usuario</code> contendo os testes para os models, forms e views.</p>"},{"location":"pytest/#exemplo-de-teste-de-model","title":"Exemplo de teste de model","text":"<pre><code>import pytest\nfrom django.core import mail\nfrom faker import Faker\nfrom model_bakery import baker\nfrom usuario.models import Usuario\n\n\nclass TestUsuarioModels:\n    \"\"\"Teste b\u00e1sicos para o model Usuario.\n    Nos campos CPF geramos um valor fict\u00edcio para teste 24935340002 \n    no site https://www.4devs.com.br/gerador_de_cpf\n    .\"\"\"\n\n    @pytest.fixture\n    def init(self, db):\n        self.faker = Faker(\"pt_BR\")\n        \"\"\"Fixture para inicializar os testes utilizando baker\"\"\"\n        self.usuario = baker.make(\n            Usuario, cpf=\"24935340002\", email=\"usuario@email.com.br\"\n        )\n        \"\"\"baker cria um objeto do model Usuario com os campos obrigat\u00f3rios. Se necessario passar algum campo opcional,\n                 basta passar como parametro no baker.make\"\"\"\n\n    def test_count_user(self, init):\n        \"\"\"Teste para verificar se o usuario se foi criado apenas um usuario\"\"\"\n        assert Usuario.objects.all().count() == 1\n\n    def test_soft_delete_user(self, init):\n        \"\"\"Teste para verificar se o usuario foi deletado\"\"\"\n        Usuario.objects.all().delete()\n        assert Usuario.objects.filter(deleted=False).count() == 0\n\n    @pytest.mark.skip\n    def test_hard_delete_user(self, init):\n        assert self.usuario.delete() is True\n\n    def test_create_user(self, init):\n        \"\"\"Teste para verificar se o usuario foi criado com sucesso\"\"\"\n        assert self.usuario.id is not None\n\n    def test_save_user_method(self, init):\n        \"\"\"Teste para verificar se o usuario foi criado com sucesso, e verifica\u00e7\u00e3o se o count de usuarios \u00e9 2\"\"\"\n        usuario = Usuario(\n            cpf=\"24935340002\",\n            nome=self.faker.name(),\n            email=self.faker.company_email(),\n        )\n        usuario.save()\n        count = Usuario.objects.all().count()\n        assert count == 2\n\n    def test_update_user(self, init):\n        \"\"\"Teste para verificar se o usuario foi atualizado com sucesso\"\"\"\n        self.usuario.nome = \"Maria\"\n        self.usuario.save()\n        usuario_email = Usuario.objects.get(nome=\"Maria\")\n        assert usuario_email.nome == \"Maria\"\n\n    def test_user_str(self, init):\n        \"\"\"Teste para verificar a passagem de parametros para o metodo __str__\"\"\"\n        assert (\n            str(self.usuario) == f\"Usuario: {self.usuario.cpf} | {self.usuario.email}\"\n        )\n\n    def test_send_email_account_created(self, init):\n        mail.send_mail(\n            \"Teste campo subject do email\",\n            \"Teste campo corpo do email\",\n            \"from@yourdjangoapp.com\",\n            [self.usuario.email],\n            fail_silently=False,\n        )\n        assert len(mail.outbox) == 1\n        assert mail.outbox[0].subject == \"Teste campo subject do email\"\n        assert mail.outbox[0].body == \"Teste campo corpo do email\"\n        assert mail.outbox[0].to[0] == self.usuario.email\n</code></pre>"},{"location":"pytest/#exemplo-de-teste-de-forms","title":"Exemplo de teste de forms","text":"<pre><code>import pytest\nfrom faker import Faker\nfrom usuario.forms import UsuarioForm\nfrom usuario.models import Usuario\n\n\nclass TestUsuarioForms:\n    \"\"\"Testes b\u00e1sicos para o form Usuario.\"\"\"\n\n\n    @pytest.fixture\n    def init(self, db):\n        self.faker = Faker(\"pt_BR\")\n        self.valid_data = {\n            \"cpf\": \"24935340002\",\n            \"nome\": self.faker.name(),\n            \"email\": self.faker.company_email(),\n            \"password\": \"123456789\",\n            \"password2\": \"123456789\",\n        }\n        self.invalid_data = {\n            \"nome\": self.faker.name(),\n            \"email\": self.faker.company_email(),\n        }\n\n    def test_usuario_create(self, init):\n        \"\"\"Teste para verificar se o form de cria\u00e7\u00e3o de usu\u00e1rio \u00e9 v\u00e1lido.\n        Passando apenas os campos necess\u00e1rios para a cria\u00e7\u00e3o de um usu\u00e1rio.\"\"\"\n        form = UsuarioForm(data=self.valid_data)\n        assert form.is_valid() is True\n\n    def test_usuario_form_invalid(self, init):\n        \"\"\"Teste para verificar se o form de cria\u00e7\u00e3o de usu\u00e1rio \u00e9 inv\u00e1lido\"\"\"\n        form = UsuarioForm(data=self.invalid_data)\n        assert form.is_valid() is False\n\n    def test_usuario_form_save(self, init):\n        \"\"\"Teste que verifica se o form de cria\u00e7\u00e3o de usu\u00e1rio salva no banco de dados\"\"\"\n        form = UsuarioForm(data=self.valid_data)\n        form.save()\n        assert Usuario.objects.all().count() == 1\n</code></pre>"},{"location":"pytest/#exemplo-de-teste-de-views","title":"Exemplo de teste de views","text":"<pre><code>import pytest\nfrom django.contrib.auth.models import Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.messages.storage.fallback import FallbackStorage\nfrom django.test import RequestFactory\nfrom django.urls import reverse\nfrom faker import Faker\nfrom model_bakery import baker\nfrom usuario.models import Usuario\nfrom usuario.views import (\n    UsuarioCreateView,\n    UsuarioDeleteView,\n    UsuarioDetailView,\n    UsuarioIndexTemplateView,\n    UsuarioListView,\n    UsuarioUpdateView,\n)\n\nclass TestUsuarioViews:\n    \"\"\"Testes b\u00e1sicos para a views Usuario.\"\"\"\n\n    @pytest.fixture\n    def init(self, db):\n        self.faker = Faker(\"pt_BR\")\n        self.user = User.objects.create_superuser(\n            username=\"teste\", email=\"teste@email.com.br\", password=\"senha_padrao_deve_ser_mudada\"\n        )\n        baker.make(\n            Usuario,\n            django_user=self.user,\n            cpf=\"24935340002\",\n            email=\"usuario@email.com.br\",\n        )\n        baker.make(Usuario, cpf=\"24935340002\", email=\"usuario2@email.com.br\")\n        self.factory = RequestFactory()\n        self.usuario = Usuario.objects.all().first()\n\n        \"\"\"\" Parametros para testar permiss\u00f5es de usu\u00e1rio\"\"\"\n        self.contenttype = ContentType.objects.get_for_model(Usuario)\n        self.django_usuario_dois = User.objects.create_user(\n            username=\"usuariodois@email.com\",\n            email=\"usuariodois@email.com\",\n            is_staff=True,\n            is_active=True,\n        )\n        self.usuario_permissao = Permission.objects.get(\n            codename=\"add_usuario\", content_type=self.contenttype\n        )\n        self.django_usuario_dois.user_permissions.add(\n            self.usuario_permissao,\n        )\n\n    def test_usuario_index(self, init):\n        \"\"\"Testa se o template index est\u00e1 sendo renderizado corretamente\"\"\"\n        url = reverse(\"usuario:usuario-index\")\n        request = self.factory.get(url)\n        request.user = self.user\n        response = UsuarioIndexTemplateView.as_view()(request)\n        assert response.status_code == 200\n\n    def test_usuario_list(self, init):\n        \"\"\"Testa se o template list est\u00e1 sendo renderizado corretamente\"\"\"\n        url = reverse(\"usuario:usuario-list\")\n        request = self.factory.get(url)\n        request.user = self.user\n        response = UsuarioListView.as_view()(request)\n        assert response.status_code == 200\n\n    def test_usuario_detail(self, init):\n        \"\"\"Testa se o template detail est\u00e1 sendo renderizado corretamente\"\"\"\n        url = reverse(\"usuario:usuario-detail\", args={self.usuario.pk})\n        request = self.factory.get(url)\n        request.user = self.user\n        response = UsuarioDetailView.as_view()(request, pk=self.usuario.pk)\n        assert response.status_code == 200\n\n    def test_usuario_create(self, init):\n        \"\"\"Testa se o template create est\u00e1 sendo renderizado corretamente com metodo get\"\"\"\n        url = reverse(\"usuario:usuario-create\")\n        request = self.factory.get(url)\n        request.user = self.user\n        response = UsuarioCreateView.as_view()(request)\n        assert response.status_code == 200\n\n    def test_usuario_usuario_create_post(self, init):\n        \"\"\"Testa se o template create est\u00e1 sendo renderizado corretamente com metodo post\"\"\"\n        data = {\n            \"cpf\": \"24935340002\",\n            \"nome\": self.faker.name(),\n            \"email\": self.faker.company_email(),\n        }\n        url = reverse(\"usuario:usuario-create\")\n        request = self.factory.post(url)\n        request.user = self.user\n        response = UsuarioCreateView.as_view()(request, data=data)\n        assert response.status_code == 200\n\n    def test_usuario_update(self, init):\n        \"\"\"Testa se o template update est\u00e1 sendo renderizado corretamente com metodo put\"\"\"\n        url = reverse(\"usuario:usuario-update\", args={self.usuario.pk})\n        request = self.factory.put(url)\n        request.user = self.user\n        response = UsuarioUpdateView.as_view()(request, pk=self.usuario.pk)\n        assert response.status_code == 200\n\n    def test_usuario_delete(self, init):\n        \"\"\"Testa a exclus\u00e3o de um usu\u00e1rio utilizando o metodo delete\"\"\"\n        usuario = self.usuario\n        url = reverse(\"usuario:usuario-delete\", args={usuario.pk})\n        request = self.factory.delete(url)\n        \"\"\"Adiciona a sess\u00e3o e a mensagem de sucesso para a requisi\u00e7\u00e3o\"\"\"\n        setattr(request, \"session\", \"session\")\n        messages = FallbackStorage(request)\n        setattr(request, \"_messages\", messages)\n        request.user = self.user\n        response = UsuarioDeleteView.as_view()(request, pk=usuario.pk)\n        assert response.status_code == 302\n\n    def test_usuario_list_queryset_superuser_status(self, init, client):\n        \"\"\"Retornar o status code 200 ao verificar itens cadastrados a partir do superuser logado\"\"\"\n        client.force_login(self.user)\n        request = self.factory.get(reverse(\"usuario:usuario-list\"))\n        request.user = self.user\n        response = UsuarioListView.as_view()(request)\n        assert response.status_code == 200\n\n    def test_usuario_list_queryset_superuser(self, init, client):\n        \"\"\"Retornar a quantidade de itens cadastrados a partir do superuser logado\"\"\"\n        client.force_login(self.user)\n        request = self.factory.get(reverse(\"usuario:usuario-list\"))\n        request.user = self.user\n        response = UsuarioListView.as_view()(request)\n        assert len(response.context_data[\"object_list\"]) == 2\n\n    \"\"\" Testes para verificar o funcionamento das permiss\u00f5es de usu\u00e1rio.\n     seguindo os parametros definidos no fixture init que est\u00e3o comentados\"\"\"\n\n    @pytest.mark.skip\n    def test_usuario_list_queryset_usuario_status(self, init, client):\n        \"\"\"Retornar o status code 200 ao verificar itens cadastrados a partir do usuario logado\"\"\"\n        client.force_login(self.django_usuario_dois)\n        request = self.factory.get(reverse(\"usuario:usuario-list\"))\n        request.user = self.django_usuario_dois\n        response = UsuarioListView.as_view()(request)\n        assert response.status_code == 200\n\n    @pytest.mark.skip\n    def test_usuario_list_queryset_usuario(self, init, client):\n        \"\"\"Retornar a quantidade de itens cadastrados a partir do usuario logado\"\"\"\n        client.force_login(self.django_usuario_dois)\n        request = self.factory.get(reverse(\"usuario:usuario-list\"))\n        request.user = self.django_usuario_dois\n        response = UsuarioListView.as_view()(request)\n        assert len(response.context_data[\"object_list\"]) == 1\n</code></pre>"},{"location":"pytest/#verificar-os-modelos-que-ainda-nao-foram-testados","title":"Verificar os modelos que ainda n\u00e3o foram testados","text":"<p>Para simplificar o processo de verifica\u00e7\u00e3o, desenvolvemos um script que identifica os modelos que ainda n\u00e3o foram testados. O script analisa os modelos que est\u00e3o no arquivo <code>models.py</code> das apps do projeto e compara-os com os testes que foram criados nos arquivos <code>test_models.py</code>, <code>test_views.py</code> e <code>test_forms.py</code> de cada app.</p> <pre><code>python manage.py check_tests \n</code></pre>"},{"location":"pytest/#arquivo-de-configuracao","title":"Arquivo de configura\u00e7\u00e3o","text":"<p>A linha <code>addopts = --cov --cov-fail-under=90</code> especifica o percentual m\u00ednimo de cobertura aceito para que o projeto passe no processo de CI</p> <pre><code>[pytest]\nDJANGO_SETTINGS_MODULE = base.settings\npython_files = tests.py test_*.py *_tests.py\naddopts = --cov --cov-fail-under = 90\n</code></pre>"},{"location":"pytest/#links","title":"Links","text":"Pip Docs Pip Doc"},{"location":"python-decouple/","title":"Python Decouple","text":""},{"location":"python-decouple/#sobre","title":"Sobre","text":"<p>Lib para aplicar dentre outras funcionalidades a separa\u00e7\u00e3o de dados sens\u00edveis da aplica\u00e7\u00e3o do arquivo settings e colocar em vari\u00e1veis de ambiente</p>"},{"location":"python-decouple/#arquivo-env","title":"Arquivo .env","text":"<p>No ambiente de desenvolvimento deve-se utilizar esse arquivo para conter as configura\u00e7\u00f5es do projeto. Como exemplo  temos a configura\u00e7\u00e3o da vari\u00e1veis SECRET_KEY e do DATABASE.</p>"},{"location":"python-decouple/#gerando-uma-nova-chave-secret_key-para-o-projeto-gerado","title":"Gerando uma nova chave SECRET_KEY para o projeto gerado","text":"<pre><code>from django.core.management import utils\nprint(utils.get_random_secret_key())\n</code></pre>"},{"location":"python-decouple/#o-arquivo-env-deve-ser-adicionado-no-arquivo-gitignore-para-evitar-de-ser-enviado-ao-servidor-de-versionamento","title":"O arquivo .env deve ser adicionado no arquivo .gitignore para evitar de ser enviado ao servidor de versionamento","text":"<pre><code># Substitua os __itens__ pelos valores correspondentes\n\nSECRET_KEY=__secret_key__\nDEBUG=True\nALLOWED_HOSTS=.localhost,*\nAPI_PATH=http://localhost:8080/\n\n# Sentry\nSENTRY_DNS=__sentry_dns__\n\n# Database\nDB_ENGINE=django.db.backends.postgresql_psycopg2\nDB_NAME=__nome_do_banco_de_dados__\nDB_USER=__usuario_do_banco_de_dados__\nDB_PASSWORD=__senha_do_banco_de_dados__\nDB_HOST=__host_do_banco_de_dados__\nDB_PORT=__porta_do_banco_de_dados__\n\nFCM_KEY=#Informar a chave de envio de PushNotification do Firebase\nHORAS_SEM_ATENDIMENTO=19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7, 12\n# 0 Seg - 1 Ter - 2 Qua - 3 Qui - 4 Sex - 5 Sab - 6 Dom\nDIAS_DA_SEMANA=0, 1, 2, 3, 4\nSENHA_PADRAO=__para_mockar_users__\n\n# ELASTIC APM\nELASTIC_APM_SERVER_URL=__url_do_servidor_apm__:__porta_do_servidor_apm__\nELASTIC_APM_ENVIRONMENT=__nome_do_ambiente__\n\n# Gitlab Core\nGITLAB_API_CORE_URL=https://__url_gitlab__/api/v4/projects/__id_projeto__/repository/\nGITLAB_TOKEN=__token_gitlab__\n</code></pre>"},{"location":"python-decouple/#links","title":"Links","text":"Pip Docs Pip Doc"},{"location":"aprenda_a_usar/","title":"Projeto Django","text":"<p>Esse projeto foi criado utilizando o AgtecCore que gera um projeto Django com as configura\u00e7\u00f5es padr\u00f5es de um projeto Django, com Django Rest Framework e com managers que auxiliar\u00e3o no desenvolvimento do seu projeto.</p> <p>Lembre-se de sempre consultar a documenta\u00e7\u00e3o quando surgir alguma d\u00favida.</p>"},{"location":"aprenda_a_usar/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Abaixo temos as etapas a serem executadas quando o projeto for criado.</p>"},{"location":"aprenda_a_usar/#ativar-o-virtualenv","title":"Ativar o virtualenv","text":"<pre><code>.\\.venv\\Script\\activate | windows\n. venv/bin/activate | linux e macOs\n</code></pre>"},{"location":"aprenda_a_usar/#comandos-a-serem-executados-apos-a-criacao-do-projeto","title":"Comandos a serem executados ap\u00f3s a cria\u00e7\u00e3o do projeto","text":"<ol> <li>Acessar o subdiret\u00f3rio do projeto que foi criado ap\u00f3s o comando cookiecutter ..\\agteccore</li> <li>Gerar a secret_key do projeto Django.<ol> <li>Abra o terminal.</li> <li>Ative o ambiente virtual</li> <li>Execute os comando a seguir.</li> </ol> </li> </ol> <p>O c\u00f3digo gerado deve ser colocado no arquivo .env que cont\u00eam os par\u00e2metros de configura\u00e7\u00e3o do projeto.</p> <pre><code>python contrib/secret_gen.py\n</code></pre> <ol> <li>Instale as depend\u00eancias <code>pip install -r requirements.txt</code> <code>pip install -r requirements-dev.txt</code></li> <li>Execute o comando de cria\u00e7\u00e3o das migra\u00e7\u00f5es <code>python manage.py makemigrations</code></li> <li>Execute o comando de aplica\u00e7\u00e3o das migra\u00e7\u00f5es   <code>python manage.py migrate</code></li> <li>Crie os c\u00f3digos boilerplates da app usuario <code>python manage.py build usuario --all</code></li> <li>Crie os c\u00f3digos boilerplates da app configuracao_core <code>python manage.py build configuracao_core --all</code></li> <li>Crie o super user padr\u00e3o do projeto <code>python mock_superuser.py</code></li> <li>Crie usu\u00e1rios de exemplo da app usu\u00e1rio <code>python mock_data.py</code></li> </ol> <p>Esse projeto j\u00e1 traz por padr\u00e3o a app de Usuario/usuario. Ao executar o comando migrate j\u00e1 foi adicionado no banco de dados as tabelas relativas a essa app, agora \u00e9 necess\u00e1rio executar o comando abaixo para que os arquivos boilerplates da app/model sejam criados.</p> <p>Com o comando de cria\u00e7\u00e3o do superusu\u00e1rio temos um usu\u00e1rio do tipo SuperUser com os dados abaixo.</p> <pre><code>login: admin  \nsenha: senha_padrao_deve_ser_mudada  \nDRF Token: 2b817ddbb5b974e5a451a8156963de586d72079e\n</code></pre>"},{"location":"aprenda_a_usar/#comandos-do-core","title":"Comandos do Core","text":"<p>Voc\u00ea pode executar dois comandos internos do Core</p> <p>(Lembre de configurar <code>GITLAB_TOKEN</code> e <code>GITLAB_API_CORE_URL</code> no arquivo .env)</p>"},{"location":"aprenda_a_usar/#-version","title":"--version","text":"<p>Esse comando exibe a vers\u00e3o do Core que est\u00e1 sendo utilizada no projeto.</p> <pre><code>python manage.py core --version\n</code></pre> <pre><code>\u2705  Vers\u00e3o do Core: 3.0\n</code></pre>"},{"location":"aprenda_a_usar/#-checkupdate","title":"--checkupdate","text":"<p>Esse comando verifica se existe uma nova vers\u00e3o do Core dispon\u00edvel.</p> <pre><code>python manage.py core --checkupdate\n</code></pre> <pre><code>\ud83c\udd99  Atualiza\u00e7\u00e3o v3.0 dispon\u00edvel\nVers\u00e3o 2.9 est\u00e1 sendo usada\n</code></pre>"},{"location":"django_apps/","title":"Novas app do seu projeto","text":"<p>Ap\u00f3s a configura\u00e7\u00e3o inicial do projeto quando forem criadas novas apps django no projeto, os seguintes passos devem ser seguidos para que os managers funcionem de forma correta.</p>"},{"location":"django_apps/#observacao","title":"Observa\u00e7\u00e3o","text":"<p>N\u00e3o deve ser executado o comando python manage.py build nome_da_app, esse comando s\u00f3 deve ser executado dessa forma logo ap\u00f3s a cria\u00e7\u00e3o inicial do projeto, aonde temos apenas a app usuario.</p>"},{"location":"django_apps/#etapas","title":"Etapas","text":"<ol> <li>Criar a nova app com o comando python manage.py startapp nome_da_app</li> <li>Adicionar a app no INSTALLED_APPS[...] do aquivo settings.py</li> <li>Criar os models com seus respectivos atributos<ol> <li>Adicionar no class Meta do models os campos que deseja que sejam renderizado no list_view fields_display =    ['campo_um', 'campo_n']</li> <li>Adicionar no class Meta do models os campos que s\u00e3o do tipo ForeingKey e que voc\u00ea deseja que sejam gerados os    modais nas telas de inser\u00e7\u00e3o de edi\u00e7\u00e3o do registro  fk_fields_modal = ['campo_fk_um', 'campo_fk_n'] </li> </ol> </li> </ol>"},{"location":"django_apps/#exemplo-de-class-meta-configurado","title":"Exemplo de class Meta configurado:","text":"<pre><code>    class Meta:\n        verbose_name = 'Nome do Model'\n        verbose_name_plural = 'Nome do Model no Plural'\n        fields_display = ['campo_um', 'campo_dois', 'campo_n']\n        fk_fields_modal = ['campo_fk_um', 'campo_fk_dois', 'campo_fk_n']\n</code></pre> <ol> <li>Executar os comandos python manage.py makemigrations e python manage.py migrate</li> <li>Executar o comando python manage.py build nome_da_app com as flags na ordem a seguir:<ol> <li>python manage.py build nome_da_app --forms ser\u00e3o gerados os forms dos models da app informada</li> <li>python manage.py build nome_da_app --views ser\u00e3o geradas as views dos models da app informada</li> <li>python manage.py build nome_da_app --urls ser\u00e3o geradas as urls dos models da app informada</li> <li>Agora adicione no arquivos urls.py do projeto (base) o path para as urls da app    path('core/', include('nome_da_app.urls', namespace=\"nome_da_app\")),</li> <li>python manage.py build nome_da_app --templates ser\u00e3o gerados os templates html dos models da app informada</li> <li>python manage.py build nome_da_app --parserhtml ser\u00e3o realizados os parser dos templates HTML contendo os    atributos dos models da app informada</li> <li>python manage.py build nome_da_app --api ser\u00e3o gerados os arquivos da APIRest dos models da app informada</li> </ol> </li> <li> <p>Para gerar todos os arquivos com um \u00fanico comando execute:  </p> <ol> <li>python manage.py build nome_da_app --all </li> </ol> </li> <li> <p>Para for\u00e7ar a gera\u00e7\u00e3o dos templates mesmo com a tag <code>#FileLocked</code> utilize:</p> <ol> <li>python manage.py build nome_da_app --all --force </li> <li>python manage.py build nome_da_app --templates --force </li> </ol> </li> </ol>"},{"location":"django_apps/auditar/","title":"Auditoria Core","text":""},{"location":"django_apps/auditar/#o-que-e","title":"O que \u00e9","text":"<p>A Auditoria cria um hist\u00f3rico com todos os campos pr\u00e9vios e atuais quando algum objeto sofre qualquer tipo de modifica\u00e7\u00e3o.</p>"},{"location":"django_apps/auditar/#como-usar","title":"Como Usar","text":""},{"location":"django_apps/auditar/#global","title":"Global","text":"<p>Necess\u00e1rio adicionar as seguintes linhas no arquivo <code>settings.py</code> dentro da pasta <code>base</code>:</p> <pre><code># Ativar Auditoria\nAUDIT_ENABLED = True\n\n# Auditoria tamb\u00e9m seja feita nos relacionamentos M2M\nDELETED_MANY_TO_MANY = True\n</code></pre>"},{"location":"django_apps/auditar/#especifico","title":"Espec\u00edfico","text":"<p>Caso n\u00e3o queira ativar a Auditoria em todo o projeto, \u00e9 poss\u00edvel utilizar a vari\u00e1vel <code>auditar</code> dentro da classe <code>Meta</code> do Model em quest\u00e3o.</p> <pre><code>class SeuModel(Base):\n    ...\n\n    class Meta:\n        auditar = True\n</code></pre>"},{"location":"django_apps/bloco_de_botoes_extra/","title":"Adicionar bot\u00f5es extras no list_view","text":"<ol> <li>Por padr\u00e3o o core ja vem com um bloco de botoes extras, que \u00e9 o bloco de botoes de a\u00e7\u00f5es.</li> <li>Na list view s\u00f3 criar um block barra_botoes_extra e colocar os botoes que deseja.</li> <li>O bloco ja vem com css aplicado para espa\u00e7amento e ja vem como ROW por padr\u00e3o.</li> </ol> <p>exemplo:</p>"},{"location":"django_apps/bloco_de_botoes_extra/#exemple_listpy","title":"exemple_list.py","text":"<pre><code>{% block barra_botoes_extra %}\n     &lt;a href=\"{% url 'exemple:exemple_create' %}\" class=\"br-button primary col-2 \"&gt;\n        &lt;i class=\"fa fa-plus\"&gt;&lt;/i&gt; Novo\n     &lt;/a&gt;\n{% endblock barra_botoes_extra %}\n</code></pre>"},{"location":"django_apps/escondendo_campos/","title":"Escondendo campos no Formul\u00e1rio","text":"<p>Por vezes voc\u00ea quer\u00e1 esconder algum campo em seu formul\u00e1rio.</p>"},{"location":"django_apps/escondendo_campos/#forms","title":"Forms","text":"<ol> <li> <p>Em seu arquivo form, import o <code>Form</code> do Django</p> </li> <li> <p>Crie a fun\u00e7\u00e3o <code>__init__</code></p> </li> <li> <p>Adicione o campo que quer esconder e atribua seu <code>widget</code> ao <code>HiddenInput</code></p> </li> <li> <p>Sua classe Form ficar\u00e1 parecida com esta abaixo</p> </li> </ol> <pre><code>from django import forms\n...\nclass SuaClasse():\n   def __init__(self, *args, **kwargs):\n      super().__init__(*args, **kwargs)\n      self.fields['nome_do_campo'].widget = forms.HiddenInput()\n</code></pre>"},{"location":"django_apps/escondendo_campos/#o-que-acontece-no-html","title":"O que acontece no HTMl?","text":"<p>Em seu HTML, todas as tags do campo estar\u00e3o dentro de uma tag <code>if</code> que verifica se seu campo dever\u00e1 ser exibido ou n\u00e3o por meio do <code>forms.visible_fields</code></p> <pre><code>{% if form.nome_do_campo in form.visible_fields %}\n   &lt;div class=\"form-group col-md-6\"&gt;\n      {{ form.nome_do_campo.label_tag }}\n      {{ form.nome_do_campo }}\n      &lt;div class=\"invalid-feedback\"&gt;\n         Campo Requerido.\n      &lt;/div&gt;\n      {% if form.nome_do_campo.errors  %}\n         {{ form.nome_do_campo.errors  }}\n      {% endif %}\n   &lt;/div&gt;\n{% endif %}\n</code></pre> <p>O c\u00f3digo HTML acima \u00e9 somente um exemplo e n\u00e3o \u00e9 preciso adicion\u00e1-lo manualmente pois o comando <code>build</code> \u00e9 respons\u00e1vel por isso</p>"},{"location":"django_apps/filter_example/","title":"Aplicando filtro e criando o arquivo filter.py","text":"<ol> <li> <p>Criar um arquivo filter.py na app requerida para configura\u00e7\u00e3o do modulo django_filters. De pref\u00earencia criar o    arquivo no mesmo nivel a qual ele vai ser importado.</p> </li> <li> <p>No arquivo filter.py importar os models que deseja aplicar o filtro.</p> </li> <li> <p>Criar a classe filter para o model desejado ( Ex: se o model \u00e9 Exemplo, criar FilterExemplo)</p> </li> <li> <p>Na classe filter, criar a classe meta para apontar pro model e definir os campos que ser\u00e3o utilizados para filtragem.</p> </li> <li> <p>Caso deseja personalizar o filtro, como por exemplo, definir label, adicionar atributos e outros comportamentos,    dever\u00e1 definir dentro do metodo init, lembrando de definir separado para cada campo/filtro.</p> </li> </ol> <p>exemplo:</p>"},{"location":"django_apps/filter_example/#filterpy","title":"filter.py","text":"<pre><code>import django_filters\n\nfrom exemplo.models import Exemplo\n\nclass ExemploFilter(django_filters.FilterSet):\n    class Meta:\n        model = Exemplo\n        fields = ['nome','cpf', 'email']\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.filters[\"nome\"].lookup_expr = 'icontains'\n        self.filters[\"nome\"].label = 'Nome'\n\n        self.filters[\"cpf\"].lookup_expr = 'icontains'\n        self.filters[\"cpf\"].label = 'CPF'\n\n        self.filters[\"email\"].lookup_expr = 'icontains'\n        self.filters[\"email\"].label = 'Email'\n</code></pre>"},{"location":"django_apps/filter_example/#importando-o-filtro-na-views","title":"Importando o filtro na views","text":"<ol> <li> <p>Na view, importar do filter.py o filtro especifico que vai utilizar na view.</p> </li> <li> <p>Importar tamb\u00e9m do django_filter.views o FilterView.</p> </li> <li> <p>A classe que vai utilizar o filtro, vai herdar o FilterView. (Coloque Filter no nome da classe para melhor    visualiza\u00e7\u00e3o ( ExempleFilterView ))</p> </li> <li> <p>Dentro da classe que herdou o FilterView, junto com o padr\u00e3o Class Base View, declare filterset_class recebendo o    filtro que foi importando do arquivo filter.py.      (filterset_class = ExempleFilter)</p> </li> </ol> <p>Exemplo:</p> <pre><code>from django_filters.views import FilterView\n\nclass ExemploListView(FilterView):\n    \"\"\"Classe para gerenciar a listagem do Exemplo\"\"\"\n\n    model = Exemplo\n    template_name = \"usuario/exemplo_listfilter.html\"\n    context_object_name = 'exemplo'\n    list_display = ['nome', 'email', 'cpf'']\n    filterset_class = ExemploFilter\n</code></pre>"},{"location":"django_apps/filter_example/#no-arquivo-html","title":"No arquivo html","text":"<ol> <li> <p>No arquivo html o filtro vem pela tag filter.</p> </li> <li> <p>A tag filter tem que ser utilizada dentro da tag html de form para funcionar.</p> </li> <li> <p>Por padr\u00e3o ela n\u00e3o vem com um bot\u00e3o para submit, s\u00f3 vem com os inputs e labels.</p> </li> <li> <p>Pode ser utilizado filter.form que vai herdar o css geral caso utilize template, ou filter.form.as_p    que vai renderizar o form basico mais oque for configurado no arquivo filter.py no metodo init.</p> </li> <li> <p>Tamb\u00e9m pode s\u00f3 chamar um input de filtragem especifico, chamando filter.form.\"campo\" (exemplo: filter.form.nome), e    tambem chamar s\u00f3 o label. filter.form.\"campo\".label</p> </li> </ol> <p>Exemplo:</p> <pre><code>&lt;form method=\"get\" &gt;\n    &lt;div class=\"row\"&gt;\n\n        # chamado o formulario de filtro baseado na classe meta (o css vai vir herdada do template)\n        {{ filter.form }}\n\n        # chamado o formulario de filtro baseado no metodo __init__(o css sera basico e vai ter q fazer manualmente)\n        {{ filter.form.as_p }}\n\n        # somente o input de nome\n        {{ filter.form.nome }}\n\n        # somente o label de nome\n        {{ filter.form.nome.label }}\n\n        &lt;div class=\"col-2\"&gt;\n            &lt;button class=\"btn btn-success form-control\" type=\"submit\"&gt;Buscar&lt;/button&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"django_apps/multiple_choice_field_example/","title":"Aplicando o forms MultipleChoiceField","text":"<ol> <li>No arquivo forms da app, criar um m\u00e9todo chamado clean_nomeDoCampo, nesse m\u00e9todo vai ser retornado uma fun\u00e7\u00e3o de join para transformar a lista dos items selecionaods em uma string</li> </ol>"},{"location":"django_apps/multiple_choice_field_example/#exemplo-do-arquivo-forms","title":"Exemplo do arquivo forms:","text":"<pre><code>\n    class UsuarioForm(BaseForm):\n\n        cursos = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple(\n            attrs={'class': ''}), choices=CHOICE_CURSOS, required=False)\n\n        def clean_cursos(self):\n            return ','.join(self.cleaned_data['cursos'])\n</code></pre> <ol> <li>No arquivo models da app, criar um m\u00e9todo que vai ser retornado uma fun\u00e7\u00e3o de split, que ir\u00e1 transformar a string salva separada por v\u00edrgula em uma lista, essa lista ser\u00e1 passada para o forms.     No init do mesma models, atribuir o valor dessa fun\u00e7\u00e3o ao valor do campo que est\u00e1 sendo usado no forms.</li> </ol>"},{"location":"django_apps/multiple_choice_field_example/#exemplo-do-arquivo-models","title":"Exemplo do arquivo models:","text":"<pre><code>\n    class Usuario(Base):\n        cursos = models.CharField(max_length=300, blank=True, null=True)\n\n        def get_cursos(self):\n            return self.cursos.split(',')\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            if self.cursos:\n                self.cursos = self.get_cursos()\n</code></pre>"},{"location":"django_apps/multiple_choice_field_example/#renderizacao-da-lista","title":"Renderiza\u00e7\u00e3o da lista","text":"<ol> <li>No arquivo de listagem, usar o template tag list_to_string.</li> </ol>"},{"location":"django_apps/templates/","title":"Templates HTML","text":"<p>Caso seja necess\u00e1rio customizar algo no template HTML abaixo temos as instru\u00e7\u00f5es de como proceder</p>"},{"location":"django_apps/templates/#importando-arquivo-js","title":"Importando arquivo js","text":"<ol> <li> <p>Na view, importar do filter.py o filtro especifico que vai utilizar na view.</p> </li> <li> <p>Importar tamb\u00e9m do django_filter.views o FilterView.</p> </li> <li> <p>A classe que vai utilizar o filtro, vai herdar o FilterView. (Coloque Filter no nome da classe para melhor    visualiza\u00e7\u00e3o ( ExempleFilterView ))</p> </li> <li> <p>Dentro da classe que herdou o FilterView, junto com o padr\u00e3o Class Base View, declare filterset_class recebendo o    filtro que foi importando do arquivo filter.py.      (filterset_class = ExempleFilter)</p> </li> </ol> <p>Exemplo:</p> <pre><code>from django_filter.views import FilterView\n\nclass ExemploListView(FilterView):\n   \"\"\"Classe para gerenciar a listagem do Exemplo\"\"\"\n\n   model = Exemplo\n   template_name = \"usuario/exemplo_listfilter.html\"\n   context_object_name = 'exemplo'\n   list_display = ['nome', 'email', 'cpf'']\n   filterset_class = ExemploFilter\n</code></pre>"},{"location":"django_apps/templates/#no-arquivo-html","title":"No arquivo html","text":"<ol> <li> <p>No arquivo html o filtro vem pela tag filter.</p> </li> <li> <p>A tag filter tem que ser utilizada dentro da tag html de form para funcionar.</p> </li> <li> <p>Por padr\u00e3o ela n\u00e3o vem com um bot\u00e3o para submit, s\u00f3 vem com os inputs e labels.</p> </li> <li> <p>Pode ser utilizado filter.form que vai herdar o css geral caso utilize template, ou filter.form.as_p    que vai renderizar o form basico mais oque for configurado no arquivo filter.py no metodo init.</p> </li> <li> <p>Tamb\u00e9m pode s\u00f3 chamar um input de filtragem especifico, chamando filter.form.\"campo\" (exemplo: filter.form.nome), e    tambem chamar s\u00f3 o label. filter.form.\"campo\".label</p> </li> </ol> <p>Exemplo:</p> <pre><code>&lt;form method=\"get\" &gt;\n    &lt;div class=\"row\"&gt;\n\n        # chamado o formulario de filtro baseado na classe meta (o css vai vir herdada do template)\n        {{ filter.form }}\n\n        # chamado o formulario de filtro baseado no metodo __init__(o css sera basico e vai ter q fazer manualmente)\n        {{ filter.form.as_p }}\n\n        # somente o input de nome\n        {{ filter.form.nome }}\n\n        # somente o label de nome\n        {{ filter.form.nome.label }}\n\n        &lt;div class=\"col-2\"&gt;\n            &lt;button class=\"btn btn-success form-control\" type=\"submit\"&gt;Buscar&lt;/button&gt;\n        &lt;/div&gt;\n\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"django_apps/unique_together/","title":"Usando Unique Together","text":"<p>O campo <code>unique_together</code> \u00e9 usado dentro da classe <code>Meta</code> do Model para indicar quais campos dever\u00e3o ser \u00fanicos.</p>"},{"location":"django_apps/unique_together/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"django_apps/unique_together/#sobrescrevendo-a-delecao-logica-ou-unique-do-campo-do-model","title":"Sobrescrevendo a dele\u00e7\u00e3o l\u00f3gica ou unique do campo do model","text":"<pre><code>class Meta:\n   ...\n   unique_together = ['cpf', 'created_on']\n</code></pre> <p>Da forma acima, utilizamos o <code>created_on</code> apenas como apoio, pois n\u00e3o \u00e9 poss\u00edvel definir o unique_together somente com um campo, no caso, CPF. Assim usando <code>created_on</code> ou <code>deleted</code> eles ser\u00e3o ignorados e verificado apenas o primeiro campo passado.</p>"},{"location":"django_apps/unique_together/#utilizando-dois-ou-mais-campos","title":"Utilizando dois ou mais campos","text":"<pre><code>class Meta:\n   ...\n   unique_together = [('cpf', 'created_on'), ('email', 'firebase')]\n</code></pre> <p>Em forma de lista de tuplas, conseguimos enviar mais campos como forma de valida\u00e7\u00e3o. No exemplo acima tanto CPF n\u00e3o pode existir na base quanto Email e Firebase, combinados, tamb\u00e9m n\u00e3o podem existir.</p>"},{"location":"django_apps/widget_data/","title":"Widget de Datas - Tempus Dominus","text":"<p>\u00c9 poss\u00edvel usar esta biblioteca para renderizar um datepicker, timepicker ou datetimepicker em seu formul\u00e1rio HTML.</p>"},{"location":"django_apps/widget_data/#forms","title":"Forms","text":"<ol> <li> <p>Em seu arquivo form, import o <code>widgets</code> do <code>tempus_dominus</code></p> </li> <li> <p>Importe tamb\u00e9m o <code>forms</code> do pr\u00f3prio <code>Django</code></p> </li> <li> <p>Adicione o campo que contenha <code>Datefield</code>, <code>Timefield</code> ou <code>Datetimefield</code></p> </li> <li> <p>Use o forms Django com widget do Tempus Dominus</p> </li> </ol> <pre><code>from django import forms\nfrom tempus_dominus import widgets as tempus_widgets\n...\nclass SuaClasse():\n    data_inicio = forms.DateField(\n        widget=tempus_widgets.DatePicker(\n            options={\n                \"format\": \"DD/MM/YYYY\",\n                \"useCurrent\": False,\n                \"locale\": \"pt-br\",\n            },\n        )\n    )\n\n    hora_inicio = forms.TimeField(\n        widget=tempus_widgets.TimePicker(\n            options={\n                \"format\": \"HH:mm\",\n                \"useCurrent\": False,\n                \"locale\": \"pt-br\",\n            },\n        )\n    )\n\n    data_hora_final = forms.DateTimeField(\n        widget=tempus_widgets.DateTimePicker(\n            options={\n                \"format\": \"DD/MM/YYYY HH:mm\",\n                \"useCurrent\": False,\n                \"locale\": \"pt-br\",\n            },\n        )\n    )\n</code></pre>"},{"location":"django_apps/widget_data/#html","title":"HTML","text":"<p>\u00c9 necess\u00e1rio a inclus\u00e3o da tag <code>{{ form.media }}</code> dentro do HTML que contem o seu formul\u00e1rio.</p> <p>Recomendo colocar no in\u00edcio do formul\u00e1rio, pois esta tag n\u00e3o pode ser duplicada ou o Widget n\u00e3o aparecer\u00e1.</p> <pre><code>&lt;form&gt;\n   {{ form.media }}\n   {% csrf_token %}\n   ...\n&lt;/form&gt;\n</code></pre>"},{"location":"django_apps/widget_data/#exemplos","title":"Exemplos","text":""},{"location":"docker/","title":"Como utilizar","text":"<p>Abaixo listamos os comandos para executar o projeto utilizando Docker e tamb\u00e9m os comandos para que seja poss\u00edvel depois do container subir executar os comandos dentro da imagem.</p> <p>Para usu\u00e1rios Windows \u00e9 necess\u00e1rio garantir que o WSL2 esteja configurado e tenha instalado o Docker Desktop</p>"},{"location":"docker/#criando-a-imagem-e-executando-o-container","title":"Criando a imagem e executando o container","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"docker/#executando-em-ambiente-de-desenvolvimento","title":"Executando em ambiente de desenvolvimento","text":"<pre><code>docker-compose --f docker-dev.yml up -d\n</code></pre>"},{"location":"docker/#forcando-a-geracao-da-nova-imagem-e-container","title":"For\u00e7ando a gera\u00e7\u00e3o da nova imagem e container","text":"<pre><code>docker-compose -f docker-dev.yml up -d --force-recreate --no-deps\n</code></pre>"},{"location":"docker/#mostrando-as-imagens-geradas","title":"Mostrando as imagens geradas","text":"<pre><code>docker image ls\n</code></pre> <p>Ap\u00f3s a execu\u00e7\u00e3o do comando acima deve ser mostrado no terminal o nome das imagens que foram criadas, uma das imagens \u00e9 o banco de dados, e outra \u00e9 o projeto (web) que traz o mesmo nome do seu projeto, para os demais comandos \u00e9 necess\u00e1rio copiar o IMAGE ID do projeto, que no exemplo abaixo \u00e9 55c290edebcd</p> <pre><code>REPOSITORY               TAG           IMAGE ID       CREATED          SIZE\nNOME_DO_SEU_PROJETO      latest        55c290edebcd   40 minutes ago   880MB\ndocker/getting-started   latest        bd9a9f733898   7 weeks ago      28.8MB\npostgres                 13.4-alpine   682810fa689e   5 months ago     192MB\n</code></pre>"},{"location":"docker/#mostrando-os-containers","title":"Mostrando os containers","text":"<pre><code>docker container ls\n</code></pre> <p>Ap\u00f3s a execu\u00e7\u00e3o do comando acima deve ser mostrado no terminal os containers que foram criados. O container que roda a aplica\u00e7\u00e3o django ter\u00e1 um nome parecido com NOME_DO_SEU_PROJETO_web_1, no exemplo abaixo \u00e9 \u00e9 agtectcore_web_1</p> <pre><code>CONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS         PORTS                    NAMES\nb3097cb73d33   agtectcore       \"bash -c 'python man\u2026\"   7 minutes ago   Up 7 minutes   0.0.0.0:8000-&gt;8000/tcp   agtectcore_web_1\n46d23ebe2f9b   postgres:14.3   \"docker-entrypoint.s\u2026\"   7 minutes ago   Up 7 minutes   5432/tcp                 agtectcore_database_1\n</code></pre> <p>Para executar os comandos no container basta utilizar o comando abaixo:</p> <pre><code>docker exec -it agtectcore_web_1 COMANDO_QUE_DESEJA_EXECUTAR\n</code></pre>"},{"location":"docker/#abrindo-o-shell-no-container","title":"Abrindo o shell no container","text":"<pre><code>docker exec -it CONTAINER_ID sh\n</code></pre> <p>Com esse comando o terminal passa a ser de dentro do container</p>"},{"location":"docker/#para-sair-do-shell-do-container-sem-derrubar-o-container-basta-utilizando-o-conjunto-de-teclas","title":"Para sair do shell do container sem derrubar o container basta utilizando o conjunto de teclas","text":"<pre><code>CTRL + P , CTRL + Q\n</code></pre>"},{"location":"docker/#criando-a-secret_key","title":"Criando a SECRET_KEY","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python contrib/secret_gen.py\"\n</code></pre> <p>O comando acima retorna uma string similar a esta gvN3L7UR_4ADJrUjnLGdjzZuvFoT01gqYyFfQkY0Qava7DigkWS63YP8UBl7saAcV3E essa string \u00e9 a chave secreta que ser\u00e1 utilizada pelo Django para gerar as senhas e deve ser adicionada como vari\u00e1vel de ambiente no arquivo Dockerfile.Dev</p>"},{"location":"docker/#executando-o-makemigrations","title":"Executando o makemigrations","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python manage.py makemigrations\"\n</code></pre>"},{"location":"docker/#executando-o-migrations","title":"Executando o migrations","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python manage.py migrate\"\n</code></pre>"},{"location":"docker/#executando-o-build-da-app-usuario","title":"Executando o build da app Usuario","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python manage.py build usuario\"\n</code></pre>"},{"location":"docker/#executando-o-comando-para-gerar-o-superuser","title":"Executando o comando para gerar o SuperUser","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python mock_superuser.py\"\n</code></pre>"},{"location":"docker/#executando-o-comando-para-gerar-os-dados-fake-do-models-usuario","title":"Executando o comando para gerar os dados Fake do models Usuario","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python mock_data.py\"\n</code></pre>"},{"location":"docker/#criando-uma-nova-app","title":"Criando uma nova app","text":"<pre><code>docker exec -it agtectcore_web_1 sh -c \"python manage.py startapp NomeDaNovaApp\"\n</code></pre>"},{"location":"docker/pycharm/","title":"Executando imagem Docker utilizando o Pycharm","text":"<p> Para usu\u00e1rios Windows \u00e9 necess\u00e1rio garantir que o WSL2 esteja configurado e tenha instalado o Docker Desktop </p> <p>Para executar um projeto utilizando docker no pycharm existem duas possibilidades</p>"},{"location":"docker/pycharm/#abrindo-o-arquivo-docker-composeyaml","title":"Abrindo o arquivo docker-compose.yaml","text":"<p> Com o arquivo aberto basta clicar no \u00edcone de \"duplo play\" na frente da palavra services. </p>"},{"location":"docker/pycharm/#executar-pela-janela-de-services","title":"Executar pela janela de Services","text":"<ol> <li> <p>Abrindo a janela deve aparecer uma imagem similar \u00e0 apresentada abaixo  </p> <p> No grupo Docker aparecer\u00e3o todos os containers, imagens e volumes da sua m\u00e1quina </p> </li> <li> <p>Selecione a que deseja executar e novamente clique no \u00edcone de \"duplo play\" Escolhendo o projeto que desejo executar </p> </li> <li> <p>Quando for finalizada a opera\u00e7\u00e3o de constru\u00e7\u00e3o do container os \u00edcones do Docker ficar\u00e3o azuis Projeto agteccoreexemplo sendo executado (\u00edcones em azul) </p> </li> <li> <p>Quando for finalizada a opera\u00e7\u00e3o de constru\u00e7\u00e3o do container os \u00edcones do Docker ficar\u00e3o azuis Projeto agteccoreexemplo sendo executado (\u00edcones em azul) </p> </li> <li> <p>Visualizando o log do container         Para visualizar o log do container basta clicar sobre o container, conforme exemplo acima </p> </li> <li> <p>Acessar o container para executar comandos         Para acessar o container e executar comandos no terminal basta clicar com o bot\u00e3o direito do mouse (Menu de context) e escolher a op\u00e7\u00e3o Create Terminal </p> <p>6.1. Terminal aberto j\u00e1 no container       Aten\u00e7\u00e3o: o terminal aberto j\u00e1 contem todas as bibliotecas do projeto instaladas, portanto n\u00e3o \u00e9 necess\u00e1rio ativar virtualenv </p> </li> <li> <p>Finalizando a execu\u00e7\u00e3o de um container       Para finalizar a execu\u00e7\u00e3o dos containers do projeto basta selecionar o arquivo Docker-compose do projeto e clicar no \u00edcone de stop</p> </li> </ol>"},{"location":"docker/pycharm_debug/","title":"Configurado o Pycharm para executar em modo debug","text":"<p> Para usu\u00e1rios Windows \u00e9 necess\u00e1rio garantir que o WSL2 esteja configurado e tenha instalado o Docker Desktop </p> <p>A configura\u00e7\u00e3o do Pycharm para executar utilizando o docker em modo debug \u00e9 bem simples, basta seguir os passos abaixo:</p>"},{"location":"docker/pycharm_debug/#verificar-o-docker","title":"Verificar o Docker","text":"<ol> <li>Abra as configura\u00e7\u00f5es (Settings) do projeto conforme a imagem abaixo    </li> <li>Acesse a \u00e1rea de Build, Execution, Deployment &gt; Docker     Caso n\u00e3o apareca o Docker clique no sinal de + e configure o Docker </li> </ol>"},{"location":"docker/pycharm_debug/#adicionar-o-interpretador-python","title":"Adicionar o interpretador Python","text":"<ol> <li> <p>Na tela de configura\u00e7\u00e3o (Settings) clique em adicionar interpretador e escolha a op\u00e7\u00e3o On Docker Compose do projeto conforme a imagem abaixo     </p> </li> <li> <p>Na janela que aparecer\u00e1 escolha na op\u00e7\u00e3o Service web e clique em Next </p> </li> <li>Na pr\u00f3xima tela selecione o interpretador recem criado e clique em Criar(Create)</li> <li>Agora \u00e9 necess\u00e1rio executar o docker-compose para criar o container, para isso basta abrir o arquivo docker-dev.yml e clicar nas duas setas verdes que encontram-se antes do services conforme a imagem abaixo       </li> </ol>"},{"location":"docker/pycharm_debug/#criando-o-arquivo-de-execucao","title":"Criando o arquivo de execu\u00e7\u00e3o","text":"<p>Agora vamos criar uma configura\u00e7\u00e3o do Django Server tamb\u00e9m na tela de configura\u00e7\u00e3o (Settings) do projeto, para isso clique em Add Configuration conforme a imagem abaixo  A diferen\u00e7a na configura\u00e7\u00e3o nessa tela para o que j\u00e1 foi feito \u00e9 que agora vamos configurar no Python Interpreter o interpretado que criamos no passo 3. E depois clicamos em Ok</p> <p>Pronto, agora \u00e9 s\u00f3 executar o debug e o Pycharm ir\u00e1 executar o projeto dentro do container docker. Desta forma podemos  utilizar o breakpoint para debugar o c\u00f3digo e verificar o que est\u00e1 acontecendo no projeto.</p>"},{"location":"docker/pycharm_debug/#links","title":"Links","text":"<p>Jetbrains Docs</p>"},{"location":"elastic/","title":"Usando ElasticSearch com Kibana","text":""},{"location":"elastic/#elasticsearch","title":"ElasticSearch","text":"<p>\u00c9 um programa gratuito para buscar e analisar dados gigantes em tempo real. Pode ser usado para pesquisar textos, monitorar logs e mais. \u00c9 escal\u00e1vel e muito usado para aplica\u00e7\u00f5es de busca e an\u00e1lise de dados.</p>"},{"location":"elastic/#kibana","title":"Kibana","text":"<p>\u00c9 uma plataforma de an\u00e1lise e visualiza\u00e7\u00e3o de dados de c\u00f3digo aberto que funciona em conjunto com o Elasticsearch. Ele permite criar gr\u00e1ficos, tabelas, mapas e dashboards interativos para ajudar a entender e explorar dados de forma mais f\u00e1cil e intuitiva. \u00c9 amplamente utilizado para monitorar e analisar dados em tempo real, para investigar problemas em logs de aplicativos e para obter insights em grandes conjuntos de dados.</p>"},{"location":"elastic/#instalacao","title":"Instala\u00e7\u00e3o","text":""},{"location":"elastic/#python","title":"Python","text":"<p><code>pip install elastic-apm</code></p> <p>O Core est\u00e1 usando a vers\u00e3o <code>elastic-apm==6.15.1</code></p>"},{"location":"elastic/#django","title":"Django","text":"<p>Crie um arquivo chamado <code>elastic.py</code> na pasta <code>base</code> e adicione o seguinte conte\u00fado substituindo <code>nome_do_projeto</code>:</p> <p>Caminho: <code>projeto/base/elastic.py</code></p> <pre><code>from decouple import config\n\nAPP_ID = \"nome_do_projeto\"\n\nELASTIC_APM = {\n    \"SERVICE_NAME\": \"nome_do_projeto\",\n    \"SERVER_URL\": config(\"ELASTIC_APM_SERVER_URL\"),\n    \"DEBUG\": config(\"DEBUG\", default=False, cast=bool),\n    \"ENVIRONMENT\": config(\"ENVIRONMENT\", default=\"desenvolvimento\"),\n}\n</code></pre> <p>Adicione a importa\u00e7\u00e3o do arquivo criado, o Middleware e o APP no arquivo <code>settings.py</code>:</p> <pre><code>if DEBUG is False:\n    ...\n\n    from .elastic import ELASTIC_APM\n\n    INSTALLED_APPS.append(\"elasticapm.contrib.django\")\n    MIDDLEWARE.append(\"elasticapm.contrib.django.middleware.TracingMiddleware\")\n</code></pre> <p>Utiliza\u00e7\u00e3o por padr\u00e3o dentro do bloco onde o Debug \u00e9 falso para ser usado apenas em ambientes de produ\u00e7\u00e3o e homologa\u00e7\u00e3o.</p>"},{"location":"elastic/#variaveis-de-ambiente-env","title":"Vari\u00e1veis de ambiente (.env)","text":"<p>Adicione as seguintes vari\u00e1veis de ambiente no arquivo <code>.env</code>:</p> <pre><code>ELASTIC_APM_SERVER_URL=http://localhost:8200\nENVIRONMENT=desenvolvimento\n</code></pre> <p>Configure o nome do ambiente de acordo com o que est\u00e1 sendo usado.</p>"},{"location":"fastapi/","title":"Projeto FastAPI","text":"<p>O AgtecCore possue um manager que gera um projeto fastapi j\u00e1 integrado com a camada do projeto Django.</p>"},{"location":"fastapi/#observacao","title":"Observa\u00e7\u00e3o","text":""},{"location":"fastapi/#o-projeto-gerado-utiliza-o-controle-de-permissoes-e-altorizacoes-do-projeto-django","title":"O projeto gerado utiliza o controle de permiss\u00f5es e altoriza\u00e7\u00f5es do projeto Django","text":""},{"location":"fastapi/#executando-o-build-do-projeto-fastapi","title":"Executando o build do projeto fastapi","text":""},{"location":"fastapi/#para-gerar-o-projeto-fastapi-e-necessario-executar-as-etapas-abaixo","title":"Para gerar o projeto fastapi \u00e9 necess\u00e1rio executar as etapas abaixo:","text":"<p>1 - Adicionar no arquivo <code>settings.py</code> do projeto Django as apps que ser\u00e3o geradas o c\u00f3digo do fastapi</p> <pre><code>FASTAPI_APPS = [\n    'app1',\n    'app2',\n    'app3',\n] \n</code></pre> <p>2 - Executar o comando abaixo para gerar o projeto fastapi</p> <pre><code>python manage.py fastapi --all\n</code></pre> <p>3 - Para configurar os arquivos para executar o projeto FastAPI via docker \u00e9 necess\u00e1rio executar o comando abaixo:</p> <pre><code>python manage.py fastapi --docker\n</code></pre>"},{"location":"fastapi/django_user/","title":"Django User","text":"<p>A classe Usuario possui um relacionamento um para um com a classe User, esse relacionamento tem um campo chamado django_user.</p> <p>Na gera\u00e7\u00e3o do projeto FastAPI, algumas mudan\u00e7as devem ser feitas para que nos endpoints de consulta, em fez de trazer o objeto do django_user, deve ser retornado a url com os dados do django_user daquele usuario.</p> <p>Para isso, siga os passos abaixo:</p>"},{"location":"fastapi/django_user/#1-passo","title":"1\u00b0 Passo","text":"<p>No arquivo schemas.py, a classe UsuarioBase tem o campo django_user do tipo User.  Deve-se trocar esse tipo para str.</p> <p>Antes</p> <pre><code>django_user: Optional[User]\n</code></pre> <p>Depois</p> <pre><code>django_user: Optional[str]\n</code></pre>"},{"location":"fastapi/django_user/#2-passo","title":"2\u00b0 Passo","text":"<p>No arquivo api.py, troque os m\u00e9todos chamados.</p> <p>Antes</p> <pre><code>def read_usuarios(db: Session = Depends(get_db), skip: int = 0, limit: int = 25) -&gt; Any:\n    \"\"\"\n    Retrieve usuarios.\n    \"\"\"\n    usuarios = cruds.usuario.get_multi(db, skip=skip, limit=limit)\n    for usuario in usuarios:\n        usuario.django_user = crud_auth.user.get_by_id(db=db, id=usuario.django_user_id)\n    return usuarios\n\ndef read_usuario_by_id(usuario_id: str, db: Session = Depends(get_db)) -&gt; Any:\n    \"\"\"\n    Get a specific usuario by id.\n    \"\"\"\n    usuario = cruds.usuario.get(db, id=usuario_id)\n    if not usuario:\n        raise HTTPException(status_code=404, detail=\"Item usuario inexistente no sistema\")\n    usuario.django_user = crud_auth.user.get_by_id(db=db, id=usuario.django_user_id)\n    return usuario\n</code></pre> <p>Depois</p> <pre><code>def read_usuarios(request: Request, db: Session = Depends(get_db), skip: int = 0, limit: int = 25) -&gt; Any:\n    \"\"\"\n    Retrieve usuarios.\n    \"\"\"\n    usuarios = cruds.usuario.get_multi_paginate_django_user(\n        db, request=request, offset=skip, limit=limit)\n    return usuarios\n\ndef read_usuario_by_id(usuario_id: str, request: Request, db: Session = Depends(get_db)) -&gt; Any:\n    \"\"\"\n    Get a specific usuario by id.\n    \"\"\"\n    usuario = cruds.usuario.get_paginate_django_user(\n        db, request=request, id=usuario_id)\n    return usuario\n</code></pre>"},{"location":"flutter/","title":"Projeto Flutter","text":"<p>O AgtecCore possue um manager que gera um projeto flutter j\u00e1 integrado com a camada de API do projeto Django.</p>"},{"location":"flutter/#para-que-o-manager-do-projeto-flutter-funcione-corretamente-e-necessario-validar-as-etapas-abaixo","title":"Para que o manager do projeto flutter funcione corretamente \u00e9 necess\u00e1rio validar as etapas abaixo","text":"<ol> <li>Verificar se na sua m\u00e1quina est\u00e3o instalados o Dart e o Flutter nas vers\u00f5es m\u00ednimas abaixo:<ol> <li>Dart 2.16.2</li> <li>Flutter 2.10.4</li> <li>Android SDK version 32.1.0-rc1</li> </ol> </li> <li>Configurar as apps que ser\u00e3o mapeadas para gerar o projeto Flutter no arquivo setting.py app base<ol> <li>FLUTTER_APPS = ['usuario', ]</li> <li>Configurar no arquivo .env o path da API API_PATH = config('API_PATH')</li> </ol> </li> </ol>"},{"location":"flutter/#executando-o-build-do-projeto-flutter","title":"Executando o build do projeto flutter","text":"<p>Sugerimos utilizar o ambiente virtual para executar o build do projeto flutter, o uso em container n\u00e3o foi testado.</p> <pre><code>python manage.py flutter\n</code></pre>"},{"location":"sphinx/documentacao_dev/","title":"Documenta\u00e7\u00e3o Sphinx","text":"<p>Sphinx \u00e9 um gerador de documenta\u00e7\u00e3o  que traduz um conjunto de arquivos fonte de texto simples em v\u00e1rios formatos de sa\u00edda, produzindo automaticamente refer\u00eancias cruzadas e \u00edndices. </p>"},{"location":"sphinx/documentacao_dev/#executar","title":"Executar","text":"<p>Para gerar a documenta\u00e7\u00e3o das apps \u00e9 necess\u00e1rio primeiramente adicion\u00e1-las no <code>DOC_APPS</code>  localizado no <code>settings.py</code>, esta \u00e9 a lista das apps que devem ser mapeadas pelo sphinx  como no exemplo a seguir:</p> <p><code>DOC_APPS = [\"usuario\", \"configuracao_core\"]</code></p> <p>Ap\u00f3s a inclus\u00e3o das apps no DOC_APPS execute o comando a seguir:</p> <pre><code>python manage.py doc &lt;nome_projeto&gt; &lt;nome_desenvolvedor&gt;\n</code></pre> <p>Ao executar o comando anterior o seguinte processo acontecer\u00e1 \u00e9 uma pasta com nome <code>doc</code>  ser\u00e1 criada na raiz do projeto com toda a documenta\u00e7\u00e3o dentro.</p> <pre><code>Running Sphinx v6.2.1\nmaking output directory... done\n[autosummary] generating autosummary for: configuracao_core.rst, index.rst, modules.rst, usuario.rst\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output... \nbuilding [html]: targets for 4 source files that are out of date\nupdating environment: [new config] 4 added, 0 changed, 0 removed\nreading sources... [100%] usuario\nlooking for now-outdated files... none found\npickling environment... done\npreparing documents... done\nwriting output... [100%] usuario\ngenerating indices... genindex py-modindex done\nhighlighting module code... [100%] usuario.views\nwriting additional pages... search done\ncopying static files... done\ncopying extra files... done\nbuild succeeded.\n</code></pre>"},{"location":"sphinx/documentacao_dev/#ler-a-documentacao","title":"Ler a Documenta\u00e7\u00e3o","text":"<p>Para visualizar a documenta\u00e7\u00e3o basta executar o arquivo <code>index.html</code> localizado dentro de doc/source/html/index.html</p> <p></p>"},{"location":"update_version/","title":"Vers\u00f5es","text":""},{"location":"update_version/#31","title":"3.1","text":""},{"location":"update_version/#etapas-para-atualizacao-para-a-versao-31","title":"Etapas para atualiza\u00e7\u00e3o para a vers\u00e3o 3.1","text":"<ol> <li> <p>No arquivo settings.py (base/settings.py)</p> <p>1.1. Adicinar a entrada de Auditoria, defina o valor como True caso deseje que o sistema todo seja auditado.</p> <pre><code>AUDIT_ENABLED = True\n</code></pre> <p>1.2. Adicionar a entrada para o novo estilo de Booleano</p> <pre><code>BOOLEAN_FIELD_IS_SWITCH = True\n</code></pre> <p>1.3. Adicionar a bloco abaixo para gerenciar quais \u00e1reas do cabe\u00e7alho do HTML ser\u00e3o renderizados  </p> <pre><code>\"\"\"\nConfigura\u00e7\u00e3o para o Middleware Header_control\nO middleware header_control \u00e9 responsavel por controlar\nSe o componente header do agtec_core vai ser renderizado ou n\u00e3o\n\"\"\"\n\n# Middleware Header Control\nHEADER_COMPLETO = True\nHEADER_ACTIONS = True\nHEADER_VERTICAL = True\nBREAD_CRUMBS = True\n</code></pre> <p>1.4. Adicionar o bloco abaixo que configura a app TEMPUS_DOMINUS</p> <pre><code>TEMPUS_DOMINUS_LOCALIZE = True\nTEMPUS_DOMINUS_INCLUDE_ASSETS = True\nTEMPUS_DOMINUS_DATE_FORMAT = \"DD/MM/YYYY\"\nTEMPUS_DOMINUS_TIME_FORMAT = \"HH:mm\"\n</code></pre> <p>1.5. Adicionar o bloco para que algum app n\u00e3o seja renderizado no Menu Principal,    importante quando algum app entra em conflito com o Core (Ex.: CKEditor)</p> <pre><code>IGNORED_APPS = []\n</code></pre> <p>1.6. Altere as MESSAGE_TAGS para o padr\u00e3o GovBR</p> <pre><code>MESSAGE_TAGS = {\n      messages.DEBUG: \"info\",\n      messages.INFO: \"info\",\n      messages.SUCCESS: \"success\",\n      messages.WARNING: \"warning\",\n      messages.ERROR: \"danger\",\n}\n</code></pre> <p>1.7. Adicione o <code>DEFAULT_AUTO_FIELD</code></p> <pre><code>DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n</code></pre> </li> <li> <p>No arquivo urls.py (base/urls.py)</p> <p>2.1. Adicionar a linha abaixo no bloco urlpatterns</p> <pre><code>    path(\"core/\", include(\"configuracao_core.urls\", namespace=\"configuracao_core\")),\n</code></pre> <p>2.2. Caso exista a entrada da url da app configuracao, remover.</p> <pre><code>    path(\"configuracao/\", include(\"configuracao.urls\", namespace=\"configuracao\")),\n</code></pre> <p>2.3. Alterar o import na linha 16 para o valor abaixo.</p> <pre><code>    from core.views.base import BaseIndexTemplate\n</code></pre> </li> <li> <p>No arquivo .env adicione a vari\u00e1vel de senha padr\u00f5es para ser usar em Mocks e na gera\u00e7\u00e3o do Admin</p> <p>SENHA_PADRAO=123456</p> </li> </ol>"},{"location":"update_version/#atencao-nessa-etapa-caso-voce-tenha-alterado-a-app-usuario-e-necessario-analisar-codigo-por-codigo","title":"Aten\u00e7\u00e3o nessa etapa, caso voc\u00ea tenha alterado a app usu\u00e1rio, \u00e9 necess\u00e1rio analisar c\u00f3digo por c\u00f3digo.","text":"<ol> <li> <p>Atualizar os arquivos da app usuario. </p> <p>4.1. Copiar os arquivos da app usuario (AgtecCore) para a app usuario do seu projeto.</p> <p>4.2. Foi melhorado o Signal que manipula o relacionamento de Usuario com User</p> <p>4.3. Campos como E-mail e CPF devem ser \u00fanicos</p> </li> </ol>"},{"location":"windows/","title":"Configura\u00e7\u00f5es adicionais para rodar o projeto no Windows","text":"<p>Para que o projeto funcione de forma correta e instale todas as depend\u00eancias \u00e9 necess\u00e1rio instalar o pacote contido aqui</p>"}]}