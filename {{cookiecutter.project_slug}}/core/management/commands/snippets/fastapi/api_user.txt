from typing import Any, List

from fastapi import APIRouter, Body, Depends, HTTPException
from sqlalchemy.orm import Session

from core.database import AsyncDBDependency, get_db
from authentication import security
from authentication import use_cases as crud_auth

from usuario import schemas
from usuario.use_cases import usuario as use_cases

router = APIRouter()

router_$model$ = APIRouter(prefix="/$model$", tags=['$model$'],
                           dependencies=[Depends(security.get_current_active_user)])


@router_$model$.get("/", response_model=List[schemas.$ModelClass$],
                    dependencies=[Depends(security.has_permission("$app$.view_$model$"))])
async def fetch(db: AsyncDBDependency, skip: int = 0, limit: int = 25) -> Any:
    """
    Retrieve $model$s.
    """
    itens = await use_cases.get_multi(db, skip=skip, limit=limit)
    for item in itens:
        item.django_user = crud_auth.user.get_by_id(db=db, id=item.django_user_id)
    return itens


@router_$model$.post("/", response_model=schemas.$ModelClass$,
                     dependencies=[Depends(security.has_permission("$app$.add_$model$"))])
async def create(*, db: AsyncDBDependency, data: schemas.$ModelClass$Create) -> Any:
    """
    Create new $model$.
    """
    result = await use_cases.create(db, data)
    return result


@router_$model$.get("/{id}", response_model=schemas.$ModelClass$,
                    dependencies=[Depends(security.has_permission("$app$.view_$model$"))])
async def get(id: str, db: AsyncDBDependency) -> Any:
    """
    Get a specific $model$ by id.
    """
    item = await use_cases.get(db, id)
    if not item:
        raise HTTPException(status_code=404, detail="Item $model$ inexistente no sistema")
    item.django_user = await crud_auth.user.get_by_id(db=db, id=item.django_user_id)
    return item


@router_$model$.put("/{id}", response_model=schemas.$ModelClass$,
                    dependencies=[Depends(security.has_permission("$app$.change_$model$"))])
async def update(*, db: AsyncDBDependency, id: str, data: schemas.$ModelClass$Update) -> Any:
    """
    Update a $model$.
    """
    item = await use_cases.get(db, id)

    if not $model$:
        raise HTTPException(status_code=404, detail="$model$ inexistente no sistema")

    result = await use_cases.update(db, item, data)
    return result


@router_$model$.delete("/{id}", response_model=schemas.$ModelClass$,
                       dependencies=[Depends(security.has_permission("$app$.delete_$model$"))])
async def delete(*, db: AsyncDBDependency, id: str) -> Any:
    """
    Delete a $model$.
    """
    item = await use_cases.get(db=db, id=id)
    if not item:
        raise HTTPException(status_code=404, detail="$model$ inexistente no sistema")
    result = await use_cases.delete(db=db, id=id)
    return result


router.include_router(router_$model$)
