/*
 * Copyright (c) 2020.
 *
 * Desenvolvido por Guilherme de Carvalho Carneiro
 * 
 * Analista Responsável
 * Guilherme de Carvalho Carneiro
 * guilherme.carvalho.carneiro@gmail.com
 */

import 'dart:async';

import 'package:dio/dio.dart';

import '../../core/config.dart';
import '../../core/exceptions/exception.dart';
import '../agtec.logger.dart';
import 'interceptors/header_token_interceptor.dart';
import 'interceptors/refresh_token_interceptor.dart';

class CustomDio {
  late Dio _dio;
  String _url = "";

  CustomDio(
    String url, {
    String? authenticationToken,
    String? errorMessage,
    String? token,
    String contentType = "application/json; charset=utf-8",
  }) {
    _url = url;

    BaseOptions options = new BaseOptions(
        baseUrl: url,
        connectTimeout: 5000,
        receiveTimeout: 5000,
        headers: {'Authorization': token != null ? '$token' : '${Config.DRFToken}'});
    _dio = Dio(options);

    _dio.interceptors.add(HeaderTokenInterceptor());
    _dio.interceptors.add(RefreshTokenInterceptor(customDio: this, dio: _dio));
  }

  Future<dynamic> getHttp({returnResult = false, String? uri}) async {
    try {
      Response _response = await _dio.get(uri ?? _url);
      if (_response.statusCode == 200) {
        if (returnResult) return _response.data["results"];
        AgteCoreLogger().info("Retorno do método getHTTP");
        AgteCoreLogger().verbose(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu o erro: ${error.response?.data?.toString()} no GetHttp",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general("Ocorreu um erro desconhecido no método GetHttp do Dio", errorGeneral.toString());
      return null;
    }
  }

  Future<dynamic> postHttp(data, {String? uri, bool multipart = false}) async {
    try {
      if (multipart == true) {
        _dio.options.headers['Content-Type'] = 'multipart/form-data';
      }
      Response _response = await _dio.post(uri ?? _url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        AgteCoreLogger().info("Retorno do método postHTTP");
        AgteCoreLogger().verbose(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu o erro: ${error.response?.data?.toString() ?? ''} no PostHttp",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general("Ocorreu um erro desconhecido no método PostHttp do Dio", errorGeneral.toString());
      return null;
    }
  }

  Future<dynamic> putHttp(data, String id, {String? uri, bool multipart = false}) async {
    try {
      if (multipart == true) {
        _dio.options.headers['Content-Type'] = 'multipart/form-data';
      }
      Response _response = await _dio.put(uri ?? _url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        AgteCoreLogger().info("Retorno do método putHTTP");
        AgteCoreLogger().verbose(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu o erro: ${error.response?.data?.toString()} no PutHttp",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general("Ocorreu um erro desconhecido no método PutHttp do Dio", errorGeneral.toString());
      return null;
    }
  }

  Future<dynamic> patchHttp(data, {String? uri}) async {
    try {
      Response _response = await _dio.patch(uri ?? _url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        AgteCoreLogger().info("Retorno do método patchHTTP");
        AgteCoreLogger().verbose(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu o erro: ${error.response?.data?.toString()} no PatchHttp",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general("Ocorreu um erro desconhecido no método PatchHttp do Dio", errorGeneral.toString());
      return null;
    }
  }

  Future<dynamic> deleteHttp(data, String id, {String? uri}) async {
    try {
      Response _response = await _dio.delete(uri ?? _url, data: data);
      if (_response.statusCode == 200 || _response.statusCode == 204) {
        AgteCoreLogger().info("Retorno do método deleteHTTP");
        AgteCoreLogger().verbose(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu um erro ao tentar executar o DeleteHttp",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general("Ocorreu um erro desconhecido no método DeleteHttp do Dio", errorGeneral.toString());
      return null;
    }
  }
}
