/// [Arquivo gerado automaticamente pelo AgtecCore]
///
/// [Travado por default]
/// Por ser um arquivo de customização de excessões, e que não deve ser alterado
/// por um novo build do Core, o mesmo está travado por default.
/// #FileLocked
///

import 'package:dio/dio.dart';
import '../agtec.logger.dart';

enum CustomTypeException { dio, service, data, state, general, refreshToken }

class ExceptionCustom implements Exception {
  int code = 0;
  String friendlyMessage = '';
  String errorMessage = '';
  String url = '';
  CustomTypeException typeException = CustomTypeException.general;
  DioException? dioError;

  ExceptionCustom(codigo, mensagemAmigavel, mensagemErro, tipo) {
    code = codigo;
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = tipo;
  }

  ExceptionCustom.dio(codigo, mensagemAmigavel, mensagemErro, url, dioError, [dynamic error, StackTrace? stackTrace]) {
    code = codigo;
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    url = url;
    typeException = CustomTypeException.dio;
    dioError = dioError;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  ExceptionCustom.data(mensagemAmigavel, mensagemErro, [dynamic error, StackTrace? stackTrace]) {
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = CustomTypeException.data;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  ExceptionCustom.service(mensagemAmigavel, mensagemErro, [dynamic error, StackTrace? stackTrace]) {
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = CustomTypeException.service;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  ExceptionCustom.state(mensagemAmigavel, mensagemErro, [dynamic error, StackTrace? stackTrace]) {
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = CustomTypeException.state;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  ExceptionCustom.general(mensagemAmigavel, mensagemErro, [dynamic error, StackTrace? stackTrace]) {
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = CustomTypeException.general;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  /// Excessão para ser levantada quando o método
  /// de renovação do TokenJWT der erro
  ExceptionCustom.tokenException(mensagemAmigavel, mensagemErro, [dynamic error, StackTrace? stackTrace]) {
    friendlyMessage = mensagemAmigavel;
    errorMessage = mensagemErro;
    typeException = CustomTypeException.refreshToken;
    AgtecCoreLogger().erro(mensagemAmigavel, error, stackTrace);
  }

  CustomTypeException get getTipo {
    return typeException;
  }

  @override
  String toString() {
    switch (typeException.index) {
      case 0:
        return 'Dio Error\n Code: $code\n ErrorMessage: $errorMessage\n ErrorFriendly:$friendlyMessage\n\n URL: $url\n\n DioError: ${dioError.toString()}';
      case 1:
        return 'Service Error\n ErrorMessage: $errorMessage\n ErrorFriendly:$friendlyMessage ';
      case 2:
        return 'Data Error\n ErrorMessage: $errorMessage\n ErrorFriendly:$friendlyMessage';
      case 3:
        return 'State Error\n ErrorMessage: $errorMessage\n ErrorFriendly:$friendlyMessage';
      case 4:
        return 'General Error\n ErrorMessage: $errorMessage\n ErrorFriendly:$friendlyMessage';
      default:
        return 'Unknow Error: {$code, $friendlyMessage, $errorMessage, $typeException}';
    }
  }

  String get getFriendlyMessage {
    return friendlyMessage;
  }

  String get getErrorMessage {
    return errorMessage;
  }

  int get getCodeError {
    return code;
  }
}
