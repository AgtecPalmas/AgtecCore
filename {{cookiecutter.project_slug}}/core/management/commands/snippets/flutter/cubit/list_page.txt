/// [Arquivo gerado automatimante pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///

import '../../../../core/agtec.logger.dart';
import '../../../../core/config.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/user_interface/connection_mixin.dart';
import '../../../../core/user_interface/modal_loading_mixin.dart';
import '../../../../core/user_interface/message_mixin.dart';

import '../../../../core/user_interface/widget.dart';
import '../../../../core/util.dart';
import '../controller.dart';
import '../model.dart';
import 'create.dart';
import 'detail.dart';

class $ModelClass$ListPage extends StatefulWidget {
  static const routeName = "/$ModelClassCamelCase$ListPage";

  @override
  $ModelClass$ListPageState createState() => $ModelClass$ListPageState();
}

class $ModelClass$ListPageState extends State<$ModelClass$ListPage>
  with SingleTickerProviderStateMixin, MessagesMixin, ConnectionMixin, ModalLoadingMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  List<$ModelClass$Model> _$Model$List = <$ModelClass$Model>[];

  @override
  void initState() {
    super.initState();
    SchedulerBinding.instance.addPostFrameCallback((timeStamp) {
      _loadData();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
      ),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.pushNamed(context, $ModelClass$AddPage.routeName);
        },
      ),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return Container(
      alignment: FractionalOffset.topLeft,
      child: RefreshIndicator(
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              _listBuilder(),
            ],
          ),
        ),
        onRefresh: _refresh,
      ),
    );
  }

  /// Método responsável por criar o GridView com os 
  /// dados retornados da API
  Widget _listBuilder() {
    return BlocConsumer<$ModelClass$Controller, $ModelClass$State>(
      listener: (context, state) {
        if (state is $ModelClass$ErrorState){
          AgteCoreLogger().erro("Ocorreu o erro ao executar o List Page BlocConsumer | listener", state.error.toString());
          showError(ListStringConstants.error);
        }
        if(state is $ModelClass$SuccessState){
          showSuccess(ListStringConstants.success);
        }
      },
      builder: (context, state) {
        if (state is $ModelClass$ProcessState) {
          return showHideModal(show: true);
        }
        if (state is $ModelClass$SuccessState){
            if(state.$ModelClassCamelCase$List  == null) {
              return Container(
                child: Center(
                  child: Text(ListStringConstants.empty),
                ),
              );
            }
            if (state.$ModelClassCamelCase$List.length > 0){
              return Container(
                margin: EdgeInsets.only(top: Util.getHeightSystemBar(context)),
                height: Util.getProportionScreenHeight(context, 0.8),
                child: GridView.count(
                  crossAxisCount: 1,
                  childAspectRatio: MediaQuery.of(context).size.height / 380,
                  crossAxisSpacing: 2.0,
                  mainAxisSpacing: 4.0,
                  physics: ScrollPhysics(),
                  shrinkWrap: true,
                  children:
                    List.generate(state.$ModelClassCamelCase$List.length, (index) {
                      return InkWell(
                        onTap: (){
                          Navigator.pushNamed(context, $ModelClass$DetailPage.routeName, arguments: state.$ModelClassCamelCase$List[index]);
                        },
                        child: Card(
                        child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
                            child: Text(state.$ModelClassCamelCase$List[index].toString(),),
                          ),
                        )
                      );
                    }),
                ),
              );
            }
            return Container(
                child: Center(
                    child: Text(ListStringConstants.empty),
                ),
            );
        }
        return Container();
      },
    );
  }

  /// Método para recarregar os dados da API, quando o usuário
  /// realizar o movimento de puxar a tela para baixa e soltar
  Future<void> _refresh() async {
    try {
    // TODO implementar o método de refresh da tela
    } catch (error) {

    }
  }

  /// Método responsável por carregar os dados da API
  Future<void> _loadData() async {
    final _$ModelClassCamelCase$Controller = context.read<$ModelClass$Controller>();
    await _$ModelClassCamelCase$Controller.fetch();
  }
}