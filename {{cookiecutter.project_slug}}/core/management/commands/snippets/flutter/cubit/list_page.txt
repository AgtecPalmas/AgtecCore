/// [Arquivo gerado automaticamente pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///

import '../../../../core/agtec.logger.dart';
import '../../../../core/config.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/user_interface/connection_mixin.dart';
import '../../../../core/user_interface/modal_loading_mixin.dart';
import '../../../../core/user_interface/message_mixin.dart';

import '../../../../core/user_interface/widget.dart';
import '../../../../core/util.dart';
import '../controller.dart';
import '../model.dart';
import 'create.dart';
import 'detail.dart';

class $ModelClass$ListPage extends StatefulWidget {
  static const routeName = '/$ModelClassCamelCase$ListPage';

  const $ModelClass$ListPage({super.key});

  @override
  State<$ModelClass$ListPage> createState() => $ModelClass$ListPageState();
}

class $ModelClass$ListPageState extends State<$ModelClass$ListPage>
  with SingleTickerProviderStateMixin, MessagesMixin, ConnectionMixin, ModalLoadingMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    SchedulerBinding.instance.addPostFrameCallback((timeStamp) {
      _loadData();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        onPressed: () {
          Navigator.pushNamed(context, $ModelClass$AddPage.routeName);
        },
      ),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        const HeadWidget(),
        _buildPage(),
        const CustomAppBar(title: '$ModelClass$s'),
      ],
    );
  }

  Widget _buildPage() {
    return CustomScrollView(
      slivers: <Widget>[
        SliverFillRemaining(
            child: Container(
          margin: EdgeInsets.only(top: MediaQuery.sizeOf(context).height * 0.1),
          alignment: FractionalOffset.topLeft,
          child: RefreshIndicator(
            onRefresh: _refresh,
            child: Padding(
              padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  _listBuilder(),
                ],
              ),
            ),
          ),
        ))
      ],
    );
  }

  /// Método responsável por criar o GridView com os 
  /// dados retornados da API
  Widget _listBuilder() {
    return BlocConsumer<$ModelClass$Controller, $ModelClass$State>(
      listener: (context, state) {
        switch (state) {
          case $ModelClass$ErrorState(:final error):

            AgtecCoreLogger().erro('Ocorreu o erro ao executar o List Page BlocConsumer | listener', error);
            showError(ListStringConstants.error);
            break;
          case $ModelClass$SuccessState():
            AgtecCoreLogger().info('Dados carregados com sucesso no List Page BlocConsumer | listener');
            showSuccess(ListStringConstants.success);
            break;
          default:
            break;
        }
      },
      builder: (context, state) {
        // Refatorando o pattern matching
        switch (state) {
          case $ModelClass$ProcessState():
            return showHideModal(show: true);
          case $ModelClass$EmptyListState():
            return const Expanded(child: Center(child: Text('Nenhum item encontrado')));
          case $ModelClass$ErrorState():
            return const SliverToBoxAdapter(child: SizedBox.shrink());
          case $ModelClass$SuccessState(: final $ModelClassCamelCase$List):
            return _buildResultList($ModelClassCamelCase$List);
          default:
            return const SliverToBoxAdapter(child: SizedBox.shrink());
        }
      },
    );
  }

  /// Método responsável por criar a listagem com os resultado
  /// quando a API retornar os dados
  Widget _buildResultList(List<$ModelClass$Model> $ModelClassCamelCase$List) {
    if ($ModelClassCamelCase$List.isEmpty){
      return const Expanded(
        child: Center(
          child: Text(ListStringConstants.empty),
        ),
      );
    }
    return Container(
      margin: EdgeInsets.only(top: Util.getHeightSystemBar(context)),
      height: Util.getProportionScreenHeight(context, 0.8),
      child: GridView.count(
        crossAxisCount: 1,
        childAspectRatio: MediaQuery.sizeOf(context).height / 380,
        crossAxisSpacing: 2.0,
        mainAxisSpacing: 4.0,
        physics: const ScrollPhysics(),
        shrinkWrap: true,
        children:
          List.generate($ModelClassCamelCase$List.length, (index) {
            return InkWell(
              onTap: (){
                Navigator.pushNamed(
                  context, 
                  $ModelClass$DetailPage.routeName, 
                  arguments: $ModelClassCamelCase$List[index],);
              },
              child: Card(
              child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
                  child: Text($ModelClassCamelCase$List[index].toString(),),
                ),
              )
            );
          }),
      ),
    );
  }

  /// Método para recarregar os dados da API, quando o usuário
  /// realizar o movimento de puxar a tela para baixa e soltar
  Future<void> _refresh() async {
    try {
      /// [Implementar o método de refresh da tela]
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro ao executar o _refresh na listPage', error, stackTrace);
      showError(ListStringConstants.refreshError);
    }
  }

  /// Método responsável por carregar os dados da API
  Future<void> _loadData() async {
    try {
      final $ModelClassCamelCase$Controller = context.read<$ModelClass$Controller>();
      await $ModelClassCamelCase$Controller.fetch();
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro ao executar o _loadData na listPage', error, stackTrace);
    }
    
  }
}