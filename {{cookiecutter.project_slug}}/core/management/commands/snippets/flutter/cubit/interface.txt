///
/// [Arquivo gerado automaticamente pelo AgtecCore]
///

///
/// [Arquivo travado]
/// Para evitar que o arquivo seja reescrito acidentalmente, 
/// o mesmo encontra-se "travado", para destravar remova o # da linha abaixo.
/// 
/// #FileLocked
///

/// 
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de $ModelClass$ da API.
///     detail()   -> Recupera os detalhes de $ModelClass$ da API.
///     post()     -> Salva os dados de uma instância do $ModelClass$ na API.
///     put()      -> Atualiza os dados de uma instância do $ModelClass$ na API.
///     delete()   -> Deleta os dados de uma instância do $ModelClass$ na API.
///     fetchEither() -> Recupera a lista de $ModelClass$ da API com retorno Either.
///     getMoreEither() -> Recupera a lista de $ModelClass$ da API com retorno Either.
///     detailEither() -> Recupera os detalhes de $ModelClass$ da API com retorno Either.
///     postEither() -> Salva os dados de uma instância do $ModelClass$ na API com retorno Either.
///     putEither() -> Atualiza os dados de uma instância do $ModelClass$ na API com retorno Either.
///     deleteEither() -> Deleta os dados de uma instância do $ModelClass$ na API com retorno Either.
///


import 'package:sembast/sembast.dart' as smbt;

import '../../../core/either.dart';
import 'model.dart';

abstract class $ModelClass$ServiceInterface {
  Future<List<$ModelClass$Model>> fetch({String? url});
  Future<List<$ModelClass$Model>> getMore(String uri);
  Future<$ModelClass$Model> detail($ModelClass$Model $ModelClassCamelCase$);
  Future<$ModelClass$Model?> post($ModelClass$Model $ModelClassCamelCase$);
  Future<$ModelClass$Model?> put($ModelClass$Model $ModelClassCamelCase$);
  Future<$ModelClass$Model?> patch($ModelClass$Model $ModelClassCamelCase$);
  Future<bool> delete($ModelClass$Model $ModelClassCamelCase$);
  /// [Método com retorno Either]
  Future<Either<List<$ModelClass$Model>?>> fetchEither({String? url});
  Future<Either<List<$ModelClass$Model>?>> getMoreEither(String uri);
  Future<Either<$ModelClass$Model?>> detailEither(String $ModelClassCamelCase$ID);
  Future<Either<$ModelClass$Model?>> postEither($ModelClass$Model $ModelClassCamelCase$);
  Future<Either<$ModelClass$Model?>> putEither($ModelClass$Model $ModelClassCamelCase$);
  Future<Either<$ModelClass$Model?>> patchEither($ModelClass$Model $ModelClassCamelCase$);
  Future<Either<bool?>> deleteEither($ModelClass$Model $ModelClassCamelCase$);
}

abstract class $ModelClass$LocalDataInterface {
  Future<smbt.Database?> initDb();
  Future<List<$ModelClass$Model>> fetchAll();
  Future<$ModelClass$Model?> get(int id);
  Future<bool> save($ModelClass$Model $Model$);
  Future<bool> deleteAll();
  Future<bool> delete(int id);
  Future<bool> update($ModelClass$Model $Model$);
}
