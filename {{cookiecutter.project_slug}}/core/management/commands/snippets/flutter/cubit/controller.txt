///
/// [Arquivo gerado automaticamente pelo AgtecCore ]
///

///
/// [Arquivo travado]
/// Para evitar que o arquivo seja reescrito acidentalmente, 
/// o mesmo encontra-se "travado", para destravar remova o # da linha abaixo.
/// 
/// #FileLocked
///


/// Os Métodos padrões gerados são:
///   Métodos da API
///     fecth() -> Recupera a lista de $ModelClass$.
///     reload() -> Recarrega a lista de $ModelClass$.
///     detail() -> Recupera os detalhes de um $ModelClass$.
///     post() -> Salva um novo $ModelClass$.
///     put() -> Atualiza os dados de um $ModelClass$.
///     delete() -> Deleta um $ModelClass$.
///     fetchEither() -> Recupera a lista de $ModelClass$ da API com retorno Either.
///     detailEither() -> Recupera os detalhes de $ModelClass$ da API com retorno Either.
///     postEither() -> Salva os dados de uma instância do $ModelClass$ na API com retorno Either.
///     putEither() -> Atualiza os dados de uma instância do $ModelClass$ na API com retorno Either.
///     deleteEither() -> Deleta os dados de uma instância do $ModelClass$ na API com retorno Either.
///
///   Métodos do Data
///     fetchLocal() -> Recupera a lista de $ModelClass$
///     reloadLocal() -> Recarrega a lista de $ModelClass$
///     detailLocal() -> Recupera os detalhes de um $ModelClass$
///     saveLocal() -> Salva um novo $ModelClass$
///     updateLocal() -> Atualiza um novo $ModelClass$
///     deleteLocal() -> Deleta um novo $ModelClass$
///     deleteAllLocal() -> Deleta um novo $ModelClass$


import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../core/exceptions/exception.dart';
import '../../../core/either.dart';

import 'model.dart';
import 'service.dart';
import 'interface.dart';

part 'state.dart';

class $ModelClass$Controller extends Cubit<$ModelClass$State> {
  late $ModelClass$ServiceInterface _service;
  $ModelClass$Model $ModelClassCamelCase$Model = $ModelClass$Model();
  List<$ModelClass$Model> $ModelClassCamelCase$List = <$ModelClass$Model>[];

  $ModelClass$Controller({$ModelClass$Model? $ModelClassCamelCase$Model}):
    super($ModelClass$Initial()) {
    _service = $ModelClass$Service($ModelClassCamelCase$: $ModelClassCamelCase$Model ?? this.$ModelClassCamelCase$Model);
  }

  Future<void> fetch() async {
    try {
      emit($ModelClass$ProcessState());
      $ModelClassCamelCase$List.clear();
      $ModelClassCamelCase$List = await _service.fetch();
      if($ModelClassCamelCase$List.isEmpty){
        emit(const $ModelClass$EmptyListState('Nenhum registro encontrado.'));
      }else{
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state(
        'Ocorreu um erro ou executar o método fetch do $ModelClass$Controller', 
        error.toString(), 
        error, 
        stackTrace,
      );
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar consultar os dados.'));
    }
  }

  Future<void> reload() async {
    try {
      emit($ModelClass$ProcessState());
      $ModelClassCamelCase$List.clear();
      $ModelClassCamelCase$List = await _service.fetch();
      if($ModelClassCamelCase$List.isEmpty){
        emit(const $ModelClass$EmptyListState('Nenhum registro encontrado.'));
      }else{
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método reload do $ModelClass$Controller', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar recarregar os dados.'));
    }
  }

  Future<void> post($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.post($ModelClassCamelCase$);
      if(resultData == null) {
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar salvar.'));
      }else{
        $ModelClassCamelCase$Model = resultData;
        emit($ModelClass$SuccessState(
            successMessage: '$ModelClass$ cadastrado com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método post do $ModelClass$Controller', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar salvar.'));
    }
  }

  Future<void> put($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.put($ModelClassCamelCase$);
      if(resultData == null) {
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
      }else{
        $ModelClassCamelCase$Model = resultData;
        emit($ModelClass$SuccessState(
            successMessage: '$ModelClass$ cadastrado com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método put do $ModelClass$Controller', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
    }
  }

  Future<void> patch($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.patch($ModelClassCamelCase$);
      if(resultData == null) {
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
      }else{
        $ModelClassCamelCase$Model = resultData;
        emit($ModelClass$SuccessState(
            successMessage: '$ModelClass$ cadastrado com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método path do $ModelClass$Controller', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
    }
  }

  Future<void> delete($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.delete($ModelClassCamelCase$);
      if(resultData == false) {
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar excluir o registro.'));
      }else{
        emit($ModelClass$SuccessState(
          successMessage: '$ModelClass$ excluído com sucesso.',
          $ModelClassCamelCase$List: $ModelClassCamelCase$List,
          $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
        ));
      }
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método delete do $ModelClass$Controller', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar excluir o registro.'));
    }
  }

  ///
  /// [===============================================================]
  /// [===============================================================]
  /// [ Métodos com retorno Either ]
  /// [===============================================================]
  /// [===============================================================]
  /// 
  /// 
  

  /// 
  /// [fetchEither]
  /// 
  /// Método que recupera a lista de $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<List<$ModelClass$Model>?> -> Lista de $ModelClass$ ou Error.
  /// 
  Future<Either<List<$ModelClass$Model>?>> fetchEither() async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.fetchEither();
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar consultar os dados.'));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if (resultData.success != null){
        // Chamada bem sucedida
        final successData = resultData.success!;
        if(successData.isEmpty){
          emit(const $ModelClass$EmptyListState('Nenhum registro encontrado.'));
          return Either.failure('empty_list');
        }else{
          $ModelClassCamelCase$List.clear();
          $ModelClassCamelCase$List = successData;
          emit(
            $ModelClass$SuccessState(
              successMessage: 'Dados carregados com sucesso.',
              $ModelClassCamelCase$List: $ModelClassCamelCase$List,
              $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
            ),
          );
          return Either.success($ModelClassCamelCase$List);
        }
      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método fetchEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar consultar os dados.'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [reloadEither]
  /// 
  /// Método que recupera a lista de $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<List<$ModelClass$Model>?> -> Lista de $ModelClass$ ou Error.
  /// 
  Future<Either<List<$ModelClass$Model>?>> reloadEither() async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.fetchEither();
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar consultar os dados.'));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if (resultData.success != null){
        // Chamada bem sucedida
        final successData = resultData.success!;
        if(successData.isEmpty){
          emit(const $ModelClass$EmptyListState('Nenhum registro encontrado.'));
          return Either.failure('empty_list');
        }else{
          $ModelClassCamelCase$List.clear();
          $ModelClassCamelCase$List = successData;
          emit(
            $ModelClass$SuccessState(
              successMessage: 'Dados carregados com sucesso.',
              $ModelClassCamelCase$List: $ModelClassCamelCase$List,
              $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
            ),
          );
          return Either.success($ModelClassCamelCase$List);
        }
      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método reloadEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar consultar os dados.'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [detailEither]
  /// 
  /// Método que recupera o $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<$ModelClass$Model?> -> Lista de $ModelClass$ ou Error.
  /// 
  Future<Either<$ModelClass$Model?>> detailEither(String $ModelClassCamelCase$ID) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.detailEither($ModelClassCamelCase$ID);
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar detalhar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar detalhar o item.'));
        return Either.failure('Ocorreu um erro ao tentar detalhar os dados.');
      }
      if (resultData.success != null){
        final successData = resultData.success!;

        $ModelClassCamelCase$Model = successData;
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
        return Either.success($ModelClassCamelCase$Model);

      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método detailEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar detalher o item.'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [postEither]
  /// 
  /// Método que recupera o $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<$ModelClass$Model?> -> Lista de $ModelClass$ ou Error.
  /// 
  Future<Either<$ModelClass$Model?>> postEither($ModelClass$Model $ModelClassCamelCase$Model) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.postEither($ModelClassCamelCase$Model);
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar cadastrar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar cadastrar o item.'));
        return Either.failure('Ocorreu um erro ao tentar cadastrar os dados.');
      }
      if (resultData.success != null){
        // Chamada bem sucedida
        final successData = resultData.success!;
      
        $ModelClassCamelCase$Model = successData;
        $ModelClassCamelCase$List.add($ModelClassCamelCase$Model);
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
        return Either.success($ModelClassCamelCase$Model);

      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método postEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar cadastrar.'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [patchEither]
  /// 
  /// Método que recupera o $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<$ModelClass$Model?> -> $ModelClass$Model ou Error.
  /// 
  Future<Either<$ModelClass$Model?>> patchEither($ModelClass$Model $ModelClassCamelCase$Model) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.patchEither($ModelClassCamelCase$Model);
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
        return Either.failure('Ocorreu um erro ao tentar consultar os dados.');
      }
      if (resultData.success != null){
        // Chamada bem sucedida
        final successData = resultData.success!;
      
        $ModelClassCamelCase$Model = successData;
        $ModelClassCamelCase$List.add($ModelClassCamelCase$Model);
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
        return Either.success($ModelClassCamelCase$Model);
        
      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método patchEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar.'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [putEither]
  /// 
  /// Método que recupera o $ModelClass$ da API com retorno Either.
  /// 
  /// [return]
  ///  - Either<$ModelClass$Model?> -> $ModelClass$Model ou Error.
  /// 
  Future<Either<$ModelClass$Model?>> putEither($ModelClass$Model $ModelClassCamelCase$Model) async {
    try {
      emit($ModelClass$ProcessState());
      final resultData = await _service.putEither($ModelClassCamelCase$Model);
      // Chamada falhou
      if(resultData.isFailure){
        emit($ModelClass$ErrorState(resultData.failure.toString()));
        return Either.failure('Ocorreu um erro ao tentar atualizar os dados.');
      }
      if(resultData.success == null){
        emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar (PUT).'));
        return Either.failure('Ocorreu um erro ao tentar atualizar os dados.');
      }
      if (resultData.success != null){
        // Chamada bem sucedida
        final successData = resultData.success!;

        $ModelClassCamelCase$Model = successData;
        $ModelClassCamelCase$List.add($ModelClassCamelCase$Model);
        emit(
          $ModelClass$SuccessState(
            successMessage: 'Dados carregados com sucesso.',
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
            $ModelClassCamelCase$Model: $ModelClassCamelCase$Model,
          ),
        );
        return Either.success($ModelClassCamelCase$Model);

      }
      return Either.failure('Ocorreu um erro genérico.');
    } catch (error, stackTrace) {
      ExceptionCustom.state('Ocorreu um erro ou executar o método patchEither', 
        error.toString(), error, stackTrace,);
      emit(const $ModelClass$ErrorState('Ocorreu um erro ao tentar atualizar (PUT).'));
      return Either.failure(error.toString());
    }
  }

  /// 
  /// [===============================================================]
  /// [ fim dos métodos com retorno Either]
  /// [===============================================================]
  /// 
  /// 

}
