/// [Arquivo gerado automaticamente pelo AgtecCore]
///
/// [Travado por default]
/// Por ser um arquivo de autenticação que interage com o Auth da API, e que não deve ser alterado
/// por um novo build do Core, o mesmo está travado por default.
/// #FileLocked
///
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_sign_in/google_sign_in.dart';

import '../../../core/agtec.logger.dart';
import '../../../core/config.dart';
import '../../../core/user_interface/custom.style.dart';
import '../../../core/user_interface/message_mixin.dart';
import '../../../core/user_interface/font.dart';
import '../../../core/user_interface/widget.dart';
import '../../../core/util.dart';
import '../cubit.dart';
import '../data.dart';
import '../model.dart';
import '../pages/termo_uso.dart';

class SignupPage extends StatefulWidget {
  const SignupPage({super.key});

  @override
  State<SignupPage> createState() => _SignupPageState();
}

class _SignupPageState extends State<SignupPage> with SingleTickerProviderStateMixin, MessagesMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  FirebaseAuth firebaseAuth = FirebaseAuth.instance;
  final _formKey = GlobalKey<FormState>();
  bool iAgree = false;
  bool _registerWithEmail = false;
  bool _registerWithOTP = false;
  bool _inputCodeConfirmationOTP = false;
  String? _verificationID;
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _loginController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _phoneOTPController = TextEditingController();
  final TextEditingController _emailOTPController = TextEditingController();
  final TextEditingController _codeOTPController = TextEditingController();

  @override
  void initState() {
    super.initState();
    SchedulerBinding.instance.addPostFrameCallback((timeStamp) {
      _loadData();
    });
  }

  @override
  void dispose() {
    _nameController.dispose();
    _loginController.dispose();
    _passwordController.dispose();
    _phoneOTPController.dispose();
    _emailOTPController.dispose();
    _codeOTPController.dispose();
    super.dispose();
  }

  void _loadData() async {}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(children: <Widget>[
      const HeadWidget(),
      _buildPage(),
    ]);
  }

  Widget _buildPage() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisSize: MainAxisSize.max,
        children: [
          customTitleSection(context, 'Registrar usando: '),
          const SizedBox(height: 8),
          Visibility(
            visible: enabledGoogleAccount && !_registerWithEmail && !_registerWithOTP,
            child: _buildGoogleAccount(context),
          ),
          Visibility(
            visible: enabledEmailAccount && !_registerWithEmail && !_registerWithOTP,
            child: _buildEmailAccount(context),
          ),
          Visibility(
            visible: enabledOTPAccount && !_registerWithEmail && !_registerWithOTP,
            child: _buildOTPAccount(context),
          ),
          Visibility(
            visible: _registerWithEmail && !_registerWithOTP,
            child: _buildEmailRegisterArea(),
          ),
          Visibility(
            visible: _registerWithOTP && !_registerWithEmail && !_inputCodeConfirmationOTP,
            child: _buildOTPRegisterArea(),
          ),
          Visibility(
            visible: _registerWithOTP && _inputCodeConfirmationOTP && !_registerWithEmail,
            child: _buildOTPInputCodeArea(context),
          ),
          const SizedBox(height: 10),
          _buildIAgreeArea(context),
        ],
      ),
    );
  }

  ///
  ///
  /// Área para registro com o Google
  ///
  ///

  _buildGoogleAccount(BuildContext context) {
    try {
      return SizedBox(
        width: Util.getProportionScreenWidth(context, 0.61),
        // #TODO Pesquisar um outro pacote para substituir o SignInButton
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildGoogleAccount', error, stackTrace);
      return const SizedBox.shrink();
    }
  }

  Future<void> signUpGoogle() async {
    final localUser = await checkLocalUser();
    final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();
    if (googleUser != null) {
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      String? accessToken, idToken;
      GoogleAuthCredential? credential;
      try {
        if (localUser.validateLocalUserSignInWithGoogle() == true) {
          accessToken = localUser.accessToken;
          idToken = localUser.idToken;
          if (accessToken.isNotEmpty && idToken.isNotEmpty) {
            credential = GoogleAuthProvider.credential(
              accessToken: accessToken,
              idToken: idToken,
            ) as GoogleAuthCredential;
          }
        } else {
          accessToken = googleAuth.accessToken;
          idToken = googleAuth.idToken;
          if (accessToken != null && idToken != null) {
            if (accessToken.isNotEmpty && idToken.isNotEmpty) {
              credential = GoogleAuthProvider.credential(
                accessToken: accessToken,
                idToken: idToken,
              ) as GoogleAuthCredential;
            }
          }
        }
        if (credential != null && accessToken != null && idToken != null) {
          _showMessage('Usuário autorizado para registro, aguarde...');
          signInGoogle(credential, accessToken, idToken);
        } else {
          _showMessage('Erro ao recuperar credenciais do usuário, tente novamente', error: true);
        }
        return;
      } catch (error, stackTrace) {
        AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page signUpGoogle', error, stackTrace);
      }
    }
  }

  Future<void> signInGoogle(AuthCredential authCredential, String accessToken, String idToken) async {
    try {
      final user = await firebaseAuth.signInWithCredential(authCredential);
      _showMessage('Registrando usuário, aguarde...');
      // Cadastrando o usuário no Backend
      final AuthModel authModel = AuthModel(
          name: user.user?.displayName ?? '',
          email: user.user?.email ?? user.user?.providerData[0].email ?? '',
          phoneNumber: user.user?.phoneNumber ?? '',
          photoUrl: user.user?.photoURL ?? '',
          firebaseId: user.user?.uid ?? '');
      // ignore: use_build_context_synchronously
      final authCubit = context.read<AuthCubit>();
      await authCubit.signUp(authModel);
      if (authCubit.state is AuthSuccessState) {
        // Salvando os dados locais do usuário autenticado
        final authSignInData = AuthData();
        await authSignInData.saveSignInData(authModel);
        signUpDjangoUser(authModel);
      }
      if (authCubit.state is AuthErrorState) {
        _showMessage(authCubit.state.props[0].toString().replaceAll('Exception:', ''), error: true);
      }
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page signInGoogle', error, stackTrace);
    }
  }

  ///
  ///
  ///  Área para registro com email e senha
  ///
  ///

  _buildEmailAccount(BuildContext context) {
    try {
      return SizedBox(
        width: Util.getProportionScreenWidth(context, 0.61),
        // #TODO Pesquisar um outro pacote para substituir o SignInButton
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildEmailAccount', error, stackTrace);
      return const SizedBox.shrink();
    }
  }

  /// Método para construir o formulário de registro utilizando o email e senha
  Widget _buildEmailRegisterArea() {
    return Visibility(
      visible: _registerWithEmail,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 12, horizontal: 18),
        width: double.infinity,
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 22),
              TextFormField(
                decoration: CustomTextFormFieldStyle.textFieldStyle(
                  hintText: 'Informe seu nome',
                  hiddenCounter: true,
                ),
                controller: _nameController,
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    }
                  }
                  return null;
                },
              ),
              const SizedBox(height: 22),
              TextFormField(
                decoration: CustomTextFormFieldStyle.textFieldStyle(
                  hintText: 'Informe seu email',
                  hiddenCounter: true,
                ),
                controller: _loginController,
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    }
                  }
                  return null;
                },
              ),
              const SizedBox(height: 22),
              TextFormField(
                decoration: CustomTextFormFieldStyle.textFieldStyle(
                  hintText: 'Informe sua senha',
                  hiddenCounter: true,
                ),
                controller: _nameController,
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    } else {
                      if (value.length < 6) {
                        return 'A senha deve conter no mínimo 6 caracteres';
                      }
                    }
                  }
                  return null;
                },
              ),
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState?.validate() ?? false) {
                        signInEmail(_loginController.text.trim(), _passwordController.text.trim());
                      }
                    },
                    child: const Text('Cadastrar'),
                  ),
                  OutlinedButton(
                    onPressed: () {
                      setState(() {
                        _registerWithEmail = false;
                      });
                    },
                    child: const Text('Cancelar'),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }

  Future<void> signInEmail(String email, String password) async {
    try {
      UserCredential user;
      final localUser = await checkLocalUser();
      if (localUser.validateLocalUserSignInWithEmail() == true) {
        if (localUser.email == _loginController.text.trim()) {
          try {
            user = await firebaseAuth.signInWithEmailAndPassword(email: localUser.email, password: localUser.password);
          } catch (e) {
            user = await firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
          }
        } else {
          try {
            user = await firebaseAuth.signInWithEmailAndPassword(email: email, password: password);
          } catch (e) {
            user = await firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
          }
        }
      } else {
        user = await firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
      }
      final AuthModel authModel = AuthModel(
        name: _nameController.text.trim(),
        email: user.user?.email ?? user.user?.providerData[0].email ?? '',
        phoneNumber: user.user?.phoneNumber ?? '',
        photoUrl: user.user?.photoURL ?? '',
        firebaseId: user.user?.uid ?? '',
        password: _passwordController.text.trim(),
      );
      // ignore: use_build_context_synchronously
      final authCubit = context.read<AuthCubit>();
      await authCubit.signUp(authModel);
      if (authCubit.state is AuthSuccessState) {
        // Salvando os dados locais do usuário autenticado
        final authSignInData = AuthData();
        await authSignInData.saveSignInData(authModel);
        signUpDjangoUser(authModel);
      }
      if (authCubit.state is AuthErrorState) {
        _showMessage(authCubit.state.props[0].toString().replaceAll('Exception:', ''), error: true);
      }
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page signInEmail', error, stackTrace);
    }
  }

  ///
  ///
  /// Área para registro utilizando o OTP
  ///
  ///

  _buildOTPAccount(BuildContext context) {
    try {
      return InkWell(
        onTap: iAgree
            ? () {
                setState(() {
                  _registerWithOTP = true;
                });
              }
            : () {
                _showMessage('Antes de registrar é necessário concordar com os termos de uso');
              },
        child: Container(
          margin: const EdgeInsets.symmetric(vertical: 4),
          width: Util.getProportionScreenWidth(context, 0.61),
          padding: const EdgeInsets.only(left: 12, top: 4, bottom: 4),
          decoration: BoxDecoration(
            color: Colors.orange,
            borderRadius: BorderRadius.circular(3.4),
          ),
          child: const Row(
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              Icon(Icons.phone),
              SizedBox(width: 8),
              Text('Registrar com número'),
            ],
          ),
        ),
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildOTPAccount', error, stackTrace);
      return const SizedBox.shrink();
    }
  }

  /// Método para construir o formulário de registro utilizando o email e senha
  Widget _buildOTPRegisterArea() {
    return Visibility(
      visible: _registerWithOTP,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 12, horizontal: 18),
        width: double.infinity,
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 22),
              TextFormField(
                decoration: CustomTextFormFieldStyle.textFieldStyle(
                  hintText: 'Informe seu telefone',
                  hiddenCounter: true,
                ),
                controller: _phoneOTPController,
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    }
                  }
                  return null;
                },
              ),
              const SizedBox(height: 22),
              TextFormField(
                decoration: CustomTextFormFieldStyle.textFieldStyle(
                  hintText: 'Informe seu email',
                  hiddenCounter: true,
                ),
                controller: _emailOTPController,
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    }
                  }
                  return null;
                },
              ),
              const SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState?.validate() ?? false) {
                          signUpWithOTP();
                        }
                      },
                      child: const Text('Cadastrar')),
                  OutlinedButton(
                    onPressed: () {
                      setState(() {
                        _registerWithOTP = false;
                      });
                    },
                    child: const Text('Cancelar'),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }

  Future<void> signUpWithOTP() async {
    try {
      final phoneNumber = '+55${_phoneOTPController.text.trim()}';
      await FirebaseAuth.instance.verifyPhoneNumber(
          phoneNumber: phoneNumber,
          // Método chamado quando o processo de validação do usuário baseado no telefone finalizar
          verificationCompleted: (PhoneAuthCredential credential) async {
            final userAuth = await firebaseAuth.signInWithCredential(credential);
            AgtecCoreLogger().info('Usuário autenticado com sucesso', userAuth.user?.uid ?? '');
          },
          // Callback disparado quando ocorre algum erro no Firebase
          verificationFailed: (FirebaseAuthException e) {},
          // Callback chamado quando o timeout informado abaixo expirar
          codeAutoRetrievalTimeout: (String verificationID) {},
          timeout: const Duration(seconds: 120),
          // Callback chamado quando o Firebase retorna o código baseado no número informado pelo usuário
          // deve ser utilizado para atualizar a tela seguindo as regras de negócio do projeto
          codeSent: (String verificationId, int? forceResendingToken) {
            setState(() {
              _inputCodeConfirmationOTP = true;
              _verificationID = verificationId;
            });
          });
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page signUpoWithOTP', error, stackTrace);
    }
  }

  _buildOTPInputCodeArea(BuildContext context) {
    try {
      return Container(
        margin: const EdgeInsets.only(top: 12),
        child: Column(
          children: [
            const Text('Informe o código de validação'),
            Form(
              child: TextFormField(
                controller: _codeOTPController,
                keyboardType: TextInputType.emailAddress,
                style: const TextStyle(color: Colors.black45),
                decoration: const InputDecoration(
                  icon: Icon(Icons.email, color: Colors.black45),
                  hintText: 'Informe seu email',
                  hintStyle: TextStyle(color: Colors.black45),
                  labelStyle: TextStyle(color: Colors.black45),
                  focusedBorder: UnderlineInputBorder(
                    borderSide: BorderSide(color: Colors.black45),
                  ),
                ),
                validator: (String? value) {
                  if (value == null) {
                    return 'Esse campo é obrigatório';
                  } else {
                    if (value.isEmpty) {
                      return 'Esse campo é obrigatório';
                    }
                  }
                  return null;
                },
              ),
            ),
            ElevatedButton(
              onPressed: () async {
                try {
                  // Autenticando com o ID de verificação e o código SMS recebido anteriormente
                  final verificationCode = _verificationID;
                  if (verificationCode != null) {
                    final PhoneAuthCredential phoneAuthCredential = PhoneAuthProvider.credential(
                        verificationId: verificationCode, smsCode: _codeOTPController.text.trim());
                    await firebaseAuth.signInWithCredential(phoneAuthCredential);
                  }
                } catch (e) {
                  AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildOTPInputCodeArea', e, null);
                }
              },
              child: const Text('Validar Código'),
            ),
          ],
        ),
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildOTPInputCodeArea', error, stackTrace);
    }
  }

  _buildIAgreeArea(BuildContext context) {
    try {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Align(
            alignment: Alignment.center,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                CupertinoSwitch(
                    value: iAgree,
                    onChanged: (value) {
                      setState(() {
                        iAgree = value;
                      });
                    }),
                const Flexible(
                  child: Text(
                    'Aceito os termos',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),
          InkWell(
            onTap: () {
              Navigator.push(context, MaterialPageRoute(builder: (_) => const TermoUso()));
            },
            child: Text(
              'Termos de uso e política de privacidade',
              style: TextStyle(color: Colors.grey[600], fontWeight: FontWeight.bold),
            ),
          )
        ],
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page _buildIAgreeArea', error, stackTrace);
      return const SizedBox.shrink();
    }
  }

  /// Método responsável por mostrar um SnackBar com uma mensagem
  /// com o texto passada como parâmetro
  _showMessage(String message, {bool error = false}) {
    if (error == true) {
      showError(message);
    } else {
      showSuccess(message);
    }
  }

  // Método para verificar se tem um usuário local.
  Future<AuthModel> checkLocalUser() async {
    try {
      final authData = AuthData();
      final List<AuthModel> users = await authData.fetchAll();
      if (users.isNotEmpty) {
        return users.last;
      }
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no Auth SignUp Page checkLocalUser', error, stackTrace);
    }
    return AuthModel();
  }

  /// Método para logar o usuário no Django após ter se registrado utilizando uma
  /// das opções disponíveis
  Future<void> signUpDjangoUser(AuthModel authModel) async {
    final authCubit = context.read<AuthCubit>();
    if (authCubit.state is AuthErrorState) {
      final error = authCubit.state.props.first.toString().split(':')[1];
      _showMessage(error, error: true);
    } else {}
  }
}
