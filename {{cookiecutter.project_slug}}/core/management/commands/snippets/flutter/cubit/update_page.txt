/// [Arquivo gerado automaticamente pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para n√£o ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:validatorless/validatorless.dart';

import '../../../../core/user_interface/custom.style.dart';
import '../../../../core/user_interface/connection_mixin.dart';
import '../../../../core/user_interface/message_mixin.dart';
import '../../../../core/user_interface/modal_loading_mixin.dart';
import '../../../../core/agtec.logger.dart';
import '../../../../core/user_interface/widget.dart';
import '../../../../core/config.dart';
import '../../../../core/util.dart';
import '../controller.dart';
import '../model.dart';

class $ModelClass$UpdatePage extends StatefulWidget {
  static const routeName = '/$ModelClassCamelCase$Update';

  final $ModelClass$Model $ModelClassCamelCase$Model;

  const $ModelClass$UpdatePage({super.key, required this.$ModelClassCamelCase$Model});

  @override
  State<$ModelClass$UpdatePage> createState() => _$ModelClass$AddPageState();
}

class _$ModelClass$AddPageState extends State<$ModelClass$UpdatePage>
  with SingleTickerProviderStateMixin, MessagesMixin, ConnectionMixin, ModalLoadingMixin{
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  final _form$ModelClass$ = GlobalKey<FormState>();

  $ModelClass$Model _$Model$Model = $ModelClass$Model();

  $Attributes$

  @override
  void initState() {
    super.initState();
    _$ModelClassCamelCase$Model = widget.$ModelClassCamelCase$Model;
    _loadData();
  }

  @override
  void dispose() {
    $DisposeController$
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget> [
        const HeadWidget(),
        _buildPage(),
        const CustomAppBar(title: 'Atualizar $ModelClass$'),
      ]
    );
  }

  Widget _buildPage() {
    return CustomScrollView(
      slivers: <Widget>[
        SliverFillRemaining(
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
              margin: EdgeInsets.only(
                top: Util.getProportionScreenHeight(
                      context, Config.marginHead),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.max,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: <Widget>[
                  const Padding(
                    padding:  EdgeInsets.only(bottom: 12.0, top: 12.0),
                  ),

                  BlocListener<$ModelClass$Controller, $ModelClass$State>(
                  listener: (context, state) {
                    if (state is $ModelClass$ErrorState){
                      showError(InsertStringConstants.error);
                      AgtecCoreLogger().erro(
                        'Ocorreu o erro ao executar o Update Page BlocListner', 
                        state.error.toString(),
                      );
                    }
                    if(state is $ModelClass$SuccessState){
                      showSuccess(state.successMessage);
                      _clearForm();
                    }
                  },
                  child: Stack(
                    children : <Widget>[
                      Column(
                        children: <Widget>[
                          _createForm(context),
                          _createButton(context),
                        ],
                      ),
                    ],
                  ),
                ),
                ],
              ),
          ),
          ),
      ],
    );
  }

  Widget _createForm(context){
    return Form(
      key: _form$ModelClass$,
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: <Widget>[
          $Form$
        ],
      ),
    );
  }

  Widget _createButton(context){
    return Padding(
      padding: const EdgeInsets.only(top: 24.0),
      child: SizedBox(
          width: MediaQuery.sizeOf(context).width,
          child: CustomRaisedButton(
            label: 'Atualizar',
            onPress: () {
              if (_form$ModelClass$.currentState?.validate() ?? false) {
                setState(() {
                  $AttributesData$
                  _put();
                });
              }
            },
          ),
        ),
      );
  }

  void _clearForm(){
    $ClearData$
  }

  void _put() async {
    final $Model$Controller = context.read<$ModelClass$Controller>();
    try{
       $GetValuesControllers$

      await $Model$Controller.put(_$Model$Model);
    }catch (error, stackTrace){
      AgtecCoreLogger().erro('Ocorreu o erro ao executar o Update Page _put', error.toString(), stackTrace);
      showError(UpdateStringConstants.error);
    }
  }

  void _loadData() {
    try{
      $EditedAttributes$
    }catch (error, stackTrace){
      AgtecCoreLogger().erro('Ocorreu o erro ao executar o Update Page _loadData', error.toString(), stackTrace);
      showError(UpdateStringConstants.loadingError);
    }
  }
}
