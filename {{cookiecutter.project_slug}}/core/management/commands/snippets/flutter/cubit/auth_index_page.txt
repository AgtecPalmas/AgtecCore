/// [Travar o arquivo]
/// Caso deseje \"travar\" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// #FileLocked
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';

import '../../../core/user_interface/widget.dart';
import '../../../core/util.dart';
import 'signup.dart';

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> with SingleTickerProviderStateMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  AnimationController? _animationController;
  final _formLogin = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
    SchedulerBinding.instance?.addPostFrameCallback((timeStamp) {
      _loadData();
    });
  }

  @override
  void dispose() {
    super.dispose();
  }

  void _loadData() async {}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(children: <Widget>[HeadWidget(), _buildPage()]);
  }

  Widget _buildPage() {
    return Container(
      color: Colors.white,
      width: double.infinity,
      height: Util.getProportionScreenHeight(context, 1),
      child: Stack(
        children: [
          Center(
            child: Image.asset('assets/images/login_img.png'),
          ),
          Container(
            width: double.infinity,
            height: Util.getProportionScreenHeight(context, 1),
            color: Colors.black45,
          ),
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: () {},
                  child: Text(
                    "Acessar Conta",
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
                OutlinedButton(
                  onPressed: () {
                    Navigator.push(context, MaterialPageRoute(builder: (_) => SignupPage()));
                  },
                  child: Text(
                    "Registrar Conta",
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                )
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// Método responsável por mostrar um SnackBar com uma mensagem
  /// com o texto passada como parâmetro
  _showMessage(String message, {bool error = false}) {
    if (message.isNotEmpty) {
      setState(() {
        ScaffoldMessenger.of(context).showSnackBar(
          error == false ? customSuccessSnackbar(message) : customErrorSnackbar(message),
        );
      });
    }
  }

  _hideKeyboard(BuildContext context) {
    FocusScope.of(context).requestFocus(FocusNode());
  }

  _makeToast(String texto) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            TextButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            TextButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }
}
