import '../../core/agtec.logger.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sembast/sembast.dart' as smbt;
import 'package:sembast/sembast_io.dart' as smbt_io;

import '../../core/exceptions/exception.dart';
import 'model.dart';

class AuthData {
  static AuthData? _instance;

  factory AuthData() {
    _instance ??= AuthData._internal();
    return _instance!;
  }

  AuthData._internal();

  final String _storeName = 'AuthStoreDB';

  /// Método para inicializar o banco de dados criando a tabela.
  Future<smbt.Database?> initDb() async {
    try {
      final dir = await getApplicationDocumentsDirectory();
      await dir.create(recursive: true);
      final dbPath = join(dir.path, '$project$.db');
      return await smbt_io.databaseFactoryIo.openDatabase(dbPath);
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
    }
    return null;
  }

Future<List<AuthModel>> fetchAll() async {
    var localList = <AuthModel>[];
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        final data = await store.find(db);
        localList = data.map((snapshot) => AuthModel.fromMap(snapshot.value)).toList();
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return localList;
    } finally {
      await db?.close();
    }
    return localList;
  }

  Future<AuthModel?> get(int id) async {
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        final data = await store.findFirst(db);
        if (data != null) {
          return AuthModel.fromMap(data.value);
        }
        return null;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return null;
    } finally {
      await db?.close();
    }
    return null;
  }

  Future<bool> save(AuthModel auth) async {
    smbt.Database? db;
    try {
      AgtecCoreLogger().debug('Iniciado processo de save do AuthModel');
      await deleteAll();
      AgtecCoreLogger().debug('Iniciando o db');
      db = await initDb();
      if (db != null) {
        AgtecCoreLogger().debug('DB não nulo');
        final store = smbt.intMapStoreFactory.store(_storeName);
        AgtecCoreLogger().debug('Store criada');
        await store.add(db, auth.toMap());
        AgtecCoreLogger().debug('Dados salvos: ${auth.toMap()}');
        return true;
      }
      AgtecCoreLogger().debug('Finalizado processo de save do AuthModel');
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      await db?.close();
    }
    return false;
  }

  /// Método para salvar os dados do usuário logado localmente
  Future<bool> saveSignInData(AuthModel auth) async {
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        await store.add(db, auth.toMap());
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      await db?.close();
    }
    return false;
  }

  Future<bool> deleteAll() async {
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        await store.delete(db);
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      await db?.close();
    }
    return false;
  }

  Future<bool> delete(int id) async {
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        await store.delete(db);
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      await db?.close();
    }
    return false;
  }

  Future<bool> update(AuthModel auth) async {
    smbt.Database? db;
    try {
      db = await initDb();
      if (db != null) {
        final store = smbt.intMapStoreFactory.store(_storeName);
        await store.update(db, auth.toMap());
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      await db?.close();
    }
    return false;
  }

  /// Método para consultar o Token JWT
  Future<String> getJWTToken() async {
    try {
      final data = await get(0);
      if (data != null) {
        final String token = data.token.isNotEmpty
            ? data.token
            : data.accessToken.isNotEmpty
                ? data.accessToken
                : '';
        if (token.isNotEmpty) {
          return token;
        }
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        '------DATA ERROR------',
        error.toString(),
        error,
        stackTrace,
      );
    }
    return '';
  }

  /// Método para atualizar no banco de dados local do disposito
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   void
  Future<void> updateRefreshToken(String refreshToken) async {
    try {
      final data = await get(0);
      if (data != null) {
        final String token = refreshToken.isNotEmpty ? refreshToken : '';
        if (token.isNotEmpty) {
          data.refreshToken = token;
          await save(data);
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        'Ocorreu no método updateRefreshToken do AuthData',
        'Error: ${error.toString()}\nException: ${exception.toString()}',
      );
    }
  }

  /// Método para atualizar no banco de dados local do disposito
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   void

  Future<void> updateAccessToken(String accessToken) async {
    try {
      final data = await get(0);
      if (data != null) {
        final String token = accessToken.isNotEmpty ? accessToken : '';
        if (token.isNotEmpty) {
          data.accessToken = token;
          await save(data);
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        'Ocorreu no método setRefreshToken do AuthData',
        'Error: ${error.toString()}\nException: ${exception.toString()}',
      );
    }
  }

  /// Método para recuperar o refreshToken
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   Strng
  Future<String> getRefreshToken() async {
    try {
      final data = await get(0);
      if (data != null) {
        final String token = data.refreshToken.isNotEmpty ? data.refreshToken : '';
        if (token.isNotEmpty) {
          return token;
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        'Ocorreu no método getJWTToken do AuthData',
        'Error: ${error.toString()}\nException: ${exception.toString()}',
      );
    }
    return '';
  }
}
