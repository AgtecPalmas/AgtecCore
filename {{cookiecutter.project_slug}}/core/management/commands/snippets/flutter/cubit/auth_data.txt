/// Local Data do model Auth
///
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de Auth.
///     save() -> Salva os dados de uma instância do Auth.
///     detail() -> Recupera os detalhes de Auth.
///     update() -> Atualiza os dados de uma instância do Auth.
///     delete() -> Deleta um registro.
///     deleteAll() -> Deleta todos os registros.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'dart:developer' as dev;

import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sembast/sembast.dart' as smbt;
import 'package:sembast/sembast_io.dart' as smbt_io;

import '../../core/exceptions/exception.dart';
import 'model.dart';

class AuthData {

  static AuthData? _instance;

  factory AuthData() {
    _instance ??= AuthData._internal();
    return _instance!;
  }

  AuthData._internal();

  final String _storeName = "AuthStoreDB";

  /// Método para inicializar o banco de dados criando a tabela.
  Future<smbt.Database?> initDb() async {
    try {
      var dir = await getApplicationDocumentsDirectory();
      await dir.create(recursive: true);
      var dbPath = join(dir.path, 'Iteeia.db');
      return await smbt_io.databaseFactoryIo.openDatabase(dbPath);
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
    }
    return null;
  }

  Future<List<AuthModel>> fetchAll() async {
    var _localList = <AuthModel>[];
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        final _data = await _store.find(_db);
        _localList = _data.map((snapshot) => AuthModel.fromMap(snapshot.value)).toList();
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return _localList;
    } finally {
      _db?.close();
    }
    return _localList;
  }

  Future<AuthModel?> get(int id) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        final _data = await _store.findFirst(_db);
        if (_data != null) {
          return AuthModel.fromMap(_data.value);
        }
        return null;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return null;
    } finally {
      _db?.close();
    }
    return null;
  }

  Future<bool> save(AuthModel auth) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      await deleteAll();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        await _store.add(_db, auth.toMap());
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      _db?.close();
    }
    return false;
  }

  /// Método para salvar os dados do usuário logado localmente
  Future<bool> saveSignInData(AuthModel auth) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        await _store.add(_db, auth.toMap());
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      _db?.close();
    }
    return false;
  }

  Future<bool> deleteAll() async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        await _store.delete(_db);
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      _db?.close();
    }
    return false;
  }

  Future<bool> delete(int id) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        final _store = smbt.intMapStoreFactory.store(_storeName);
        await _store.delete(_db);
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      _db?.close();
    }
    return false;
  }

  Future<bool> update(AuthModel auth) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        //final _store = smbt.intMapStoreFactory.store(_storeName);
        smbt.intMapStoreFactory.store(_storeName);
        return true;
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
      return false;
    } finally {
      _db?.close();
    }
    return false;
  }

  /// Método para consultar o Token JWT
  Future<String> getJWTToken() async {
    try {
      final _data = await get(0);
      if (_data != null) {
        final String token = _data.token.isNotEmpty ? _data.token : "";
        if (token.isNotEmpty) {
          return token;
        }
      }
    } catch (error, stackTrace) {
      ExceptionCustom.data(
        "------DATA ERROR------",
        error.toString(),
        error,
        stackTrace,
      );
    }
    return "";
  }

  /// Método para atualizar no banco de dados local do disposito
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   void
  Future<void> updateRefreshToken(String refreshToken) async {
    try {
      final _data = await get(0);
      if (_data != null) {
        final String token = refreshToken.isNotEmpty ? refreshToken : "";
        if (token.isNotEmpty) {
          _data.refreshToken = token;
          await save(_data);
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        "Ocorreu no método updateRefreshToken do AuthData",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    }
  }

  /// Método para atualizar no banco de dados local do disposito
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   void

  Future<void> updateAccessToken(String accessToken) async {
    try {
      final _data = await get(0);
      if (_data != null) {
        final String token = accessToken.isNotEmpty ? accessToken : "";
        if (token.isNotEmpty) {
          _data.accessToken = token;
          await save(_data);
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        "Ocorreu no método setRefreshToken do AuthData",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    }
  }

  /// Método para recuperar o refreshToken
  /// o RefreshToken para uso futuro
  ///
  /// [Parameters]
  ///   refreshToken: String
  /// [Return]
  ///   Strng
  Future<String> getRefreshToken() async {
    try {
      final _data = await get(0);
      if (_data != null) {
        final String token = _data.refreshToken.isNotEmpty ? _data.refreshToken : "";
        if (token.isNotEmpty) {
          return token;
        }
      }
    } catch (error, exception) {
      ExceptionCustom.data(
        "Ocorreu no método getJWTToken do AuthData",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    }
    return "";
  }
}
