/// [Arquivo gerado automaticamente pelo AgtecCore ]
///
/// [Travado por default]
/// Por ser o arquivo de criação de vários widgets, e que não deve ser alterado
/// por um novo build do Core, o mesmo está travado por default.
/// #FileLocked
///
/// Arquivo contendo os Widgets componentizados da aplicação
///
import 'package:flutter/material.dart';

import '../../core/agtec.logger.dart';
import '../../core/util.dart';

// Constante contendo o valor da proporção da tela padrão
// utilizado para calcular altura do Head da página e da
// margem superior da barra de botões
const double _proportionScreenDefault = 0.55;

/// Componente CustomRaisedButton
///
///    Parameters:
///     label -> String com o texto a ser mostrado no botão
///     onPress -> Função a ser executada ao clicar no botão
///     color (opcional) -> Color contendo a cor de background do botão
///     textColor (opcional) -> Color contendo a cor do text
///     iconButton (opcional) -> Icon a ser mostrado à esquerda do botão
///     rounded (default = false) -> Bool que determina se o botão é arredondado ou não
///     elevation (default = 2.0) -> Double contendo a altura da elevação do botão
///
/// O método onPress deve seguir o exemplo abaixo:
/// ```dart
/// onPress: (() {
///   Coloque a função que deseja executar aqui
/// }),
/// ```
class CustomRaisedButton extends StatelessWidget {
  final String label;
  final void Function() onPress;
  final Color? color;
  final Color? textColor;
  final Icon? iconButton;
  final bool? rounded;
  final double? elevation;
  const CustomRaisedButton({
    super.key,
    required this.label,
    required this.onPress,
    this.color,
    this.textColor,
    this.iconButton,
    this.rounded,
    this.elevation,
  });

  @override
  Widget build(BuildContext context) {
    try {
      return ElevatedButton(
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 12.0),
          backgroundColor: color ?? Theme.of(context).colorScheme.secondary,
          elevation: elevation ?? 2.0,
          shape: rounded ?? false
              ? RoundedRectangleBorder(borderRadius: BorderRadius.circular(18.0))
              : RoundedRectangleBorder(borderRadius: BorderRadius.circular(0.8)),
        ),
        onPressed: onPress,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            iconButton ?? const SizedBox.shrink(),
            const SizedBox(width: 4.0),
            Text(label, style: TextStyle(color: textColor ?? Theme.of(context).primaryColor)),
          ],
        ),
      );
    } catch (error, stackTrace) {
      AgtecCoreLogger().erro('Ocorreu o erro no método customRaisedButton', error, stackTrace);
      return const SizedBox.shrink();
    }
  }
}

/// Classe para gerar o Card da tela Inicial
class CustomMainCardButton extends StatelessWidget {
  final IconData? icon;
  final String label;
  final Color iconColor;
  final Color textColor;
  final Color boxShadowColor;
  final Color cardBorderColor;
  final Color cardBackgroundColorBegin;
  final Color cardBackgroundColorEnd;
  final double textSize;
  final FontWeight textWeight;

  const CustomMainCardButton({
    super.key,
    required this.label,
    required this.iconColor,
    required this.textColor,
    required this.boxShadowColor,
    required this.cardBorderColor,
    required this.cardBackgroundColorBegin,
    required this.cardBackgroundColorEnd,
    this.textSize = 14,
    this.textWeight = FontWeight.w600,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 4),
      decoration: BoxDecoration(
        border: Border.all(color: cardBorderColor),
        boxShadow: [
          BoxShadow(
            color: boxShadowColor,
            offset: const Offset(2.0, 2.0),
            blurRadius: 3.0,
          )
        ],
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          stops: const [0.0, 0.9],
          colors: [
            cardBackgroundColorBegin,
            cardBackgroundColorEnd,
          ],
        ),
        borderRadius: BorderRadius.circular(8.0),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 6),
            child: Center(
              child: icon != null ? Icon(icon, color: iconColor, size: 42) : const SizedBox.shrink(),
            ),
          ),
          Center(
            child: Text(
              label,
              style: TextStyle(color: textColor, fontWeight: textWeight, fontSize: textSize),
              textAlign: TextAlign.center,
            ),
          )
        ],
      ),
    );
  }
}

///
/// [Área para os widgets do cabeçalho da página/views e da barra de botões]
///

class HeadWidget extends StatefulWidget {
  final String assetImageHeadBackground;
  final String webImageHeadBackground;
  final double marginTitleTop;
  final double marginTitleBottom;
  final double marginTitleRight;
  final double marginTitleLeft;

  const HeadWidget(
      {super.key,
      this.assetImageHeadBackground = '',
      this.webImageHeadBackground = '',
      this.marginTitleTop = 80,
      this.marginTitleBottom = 12,
      this.marginTitleLeft = 12,
      this.marginTitleRight = 45});

  @override
  State<HeadWidget> createState() => _HeadWidgetState();
}

/// Head da tela inicial
class _HeadWidgetState extends State<HeadWidget> {
  /// Variável contendo o tipo da imagem a ser renderizada como background
  /// iniciado com zero para o caso de não ter sido informada nenhuma imagem
  /// no construtor do Widget. Valor 1 -> AssetsImage, 2 -> WebImage
  int imageType = 0;
  double marginTitleTop = 0.0;
  double marginTitleLef = 0.0;
  double marginTitleBottom = 0.0;
  double marginTitleRight = 0.0;

  /// String contendo o caminho a ser renderizado como background do cabeçalho
  String _urlPath = '';

  @override
  void initState() {
    // Verificando se foi passado algum valor para o assetImageHeadBackgroud ou webImageHeadBackground
    if (widget.assetImageHeadBackground.isNotEmpty) {
      _urlPath = widget.assetImageHeadBackground;
      imageType = 1;
    } else if (widget.webImageHeadBackground.isNotEmpty) {
      _urlPath = widget.webImageHeadBackground;
      imageType = 2;
    }
    marginTitleTop = widget.marginTitleTop;
    marginTitleBottom = widget.marginTitleBottom;
    marginTitleLef = widget.marginTitleLeft;
    marginTitleRight = widget.marginTitleRight;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: Util.getProportionScreenWidth(context, _proportionScreenDefault),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Theme.of(context).primaryColor,
            Theme.of(context).colorScheme.secondary,
          ],
        ),
      ),
      child: Stack(
        children: <Widget>[
          imageType == 1
              ? Image.asset(
                  _urlPath,
                  fit: BoxFit.cover,
                  width: double.infinity,
                )
              : Container(),
          Container(
            color: Colors.black.withOpacity(0.22),
            width: double.infinity,
          ),
          Container(
            padding: EdgeInsets.only(
              top: marginTitleTop,
              bottom: marginTitleBottom,
              left: marginTitleLef,
              right: marginTitleRight,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              children: <Widget>[
                Text(
                  '',
                  style: Theme.of(context)
                      .textTheme
                      .headlineSmall
                      ?.copyWith(fontWeight: FontWeight.w600, wordSpacing: 0.08, color: Colors.white),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// Barra de botões da tela inicial
class ContentWidget extends StatefulWidget {
  final widgetChild = Container();
  ContentWidget({
    super.key,
    Widget? widgetChild,
  });

  @override
  State<ContentWidget> createState() => _ContentWidgetState();
}

class _ContentWidgetState extends State<ContentWidget> {
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(top: Util.getProportionScreenWidth(context, _proportionScreenDefault) - 125),
      child: widget.widgetChild,
    );
  }
}

/// [Área para o CustomTextFormFieldLabel]
class CustomTextFormFieldLabel extends StatelessWidget {
  final String labelText;

  const CustomTextFormFieldLabel({super.key, required this.labelText});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(
        bottom: 8,
        left: 4,
      ),
      child: Text(
        labelText,
        style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
      ),
    );
  }
}

/// Classe para criar um componente que será o título das telas
/// que possuem o botão de voltar
class CustomAppBar extends StatelessWidget {
  final String title;
  const CustomAppBar({super.key, required this.title});

  @override
  Widget build(BuildContext context) {
    return Positioned(
      top: MediaQuery.sizeOf(context).height * .0675,
      left: MediaQuery.sizeOf(context).width * .005,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          IconButton(
            icon: const Icon(Icons.arrow_back_ios, size: 24),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          Text(title,
              style: const TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
              )),
        ],
      ),
    );
  }
}