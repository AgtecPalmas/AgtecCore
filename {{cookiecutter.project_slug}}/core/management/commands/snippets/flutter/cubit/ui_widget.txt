/// [Arquivo gerado automatimante pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///
/// Arquivo contendo os Widgets componentizados da aplicação
///
import '../../core/agtec.logger.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../../core/config.dart';
import '../../core/localization.dart';
import '../../core/util.dart';
import 'custom.colors.dart';
import 'custom.style.dart';

// Constante contendo o valor da proporção da tela padrão
// utilizado para calcular altura do Head da página e da
// margem superior da barra de botões
const double _proportionScreenDefault = 0.55;

/// Widget para gerar os "botões" da tela inicial de acesso rápido
Widget customMainCardButton(icon, label,
    {iconColor,
    textColor,
    cardBackgroundColorBegin,
    cardBackgroundColorEnd,
    boxShadowColor,
    cardBorderColor,
    image,
    double textSize = 14,
    textWeight = FontWeight.w600}) {
  return Container(
    margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
    decoration: BoxDecoration(
      border: Border.all(color: cardBorderColor),
      boxShadow: [
        BoxShadow(
          color: boxShadowColor,
          offset: Offset(2.0, 2.0),
          blurRadius: 3.0,
        )
      ],
      gradient: LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        stops: [0.0, 0.9],
        colors: [
          cardBackgroundColorBegin,
          cardBackgroundColorEnd,
        ],
      ),
      borderRadius: BorderRadius.circular(8.0),
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 6),
          child: Center(
            child: icon != null ? Icon(icon, color: iconColor, size: 42) : image,
          ),
        ),
        Center(
          child: Text(
            '$label',
            style: TextStyle(color: textColor, fontWeight: textWeight, fontSize: textSize),
            textAlign: TextAlign.center,
          ),
        )
      ],
    ),
  );
}

/// Componente RaisedButton
///
///    Parameters:
///     label -> String com o texto a ser mostrado no botão
///     onPress -> Função a ser executada ao clicar no botão
///     color (opcional) -> Color contendo a cor de background do botão
///     textColor (opcional) -> Color contendo a cor do text
///     iconButton (opcional) -> Icon a ser mostrado à esquerda do botão
///     rounded (default = false) -> Bool que determina se o botão é arredondado ou não
///     elevation (default = 2.0) -> Double contendo a altura da elevação do botão
///
/// O método onPress deve seguir o exemplo abaixo:
/// ```dart
/// onPress: (() {
///   // Coloque a função que deseja executar aqui
/// }),
/// ```
///
Widget customRaisedButton(
    {required String label,
    required VoidCallback onPress,
    required BuildContext context,
    Color? color,
    Color? textColor,
    Icon? iconButton,
    bool rounded = false,
    double elevation: 2.0}) {
  try {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 12.0),
        backgroundColor: color ?? Theme.of(context).colorScheme.secondary,
        elevation: elevation,
        shape: rounded
            ? RoundedRectangleBorder(borderRadius: BorderRadius.circular(18.0))
            : RoundedRectangleBorder(borderRadius: BorderRadius.circular(0.8)),
      ),
      onPressed: onPress,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          iconButton ?? Container(),
          SizedBox(width: 4.0),
          Text(
            label,
            style: TextStyle(color: textColor ?? Theme.of(context).primaryColor),
          ),
        ],
      ),
    );
  } catch (error, stackTrace) {
    AgteCoreLogger().erro("Ocorreu o erro no método customRaisedButton", error, stackTrace);
    return SizedBox.shrink();
  }
}

/// Componente OutlineButton
///
///    Parameters:
///     label -> String com o texto a ser mostrado no botão
///     onPress -> Função a ser executada ao clicar no botão
///     borderSize (default = 1.12) -> Double com a expessura da borda
///     textColor (opcional) -> Color contendo a cor do texto
///     borderColor (opcional) -> Color contendo a bor da borda do botão
///     iconButton (opcional) -> Icon a ser mostrado à esquerda do botão
///     rounded (default = false) -> Bool que determina se o botão é arredondado ou não
///
/// O método onPress deve seguir o exemplo abaixo:
/// ```dart
/// onPress: (() {
///   // Coloque a função que deseja executar aqui
/// }),
/// ```
///
Widget customButtonOutline(
    {required String label,
    required VoidCallback onPress,
    required BuildContext context,
    double borderSize = 1.12,
    Color? textColor,
    Color? borderColor,
    Icon? iconButton,
    bool rounded = false,
    bool processing = false,
    double circularProgressIndicatorSize = 28,
    double circularProgressIndicatorStrokeWidth = 4.0,
    Color circularProgressIndicatorBgColor = Colors.blue}) {
  try {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: OutlinedButton(
        style: OutlinedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 12.0),
          shape: rounded
              ? RoundedRectangleBorder(borderRadius: BorderRadius.circular(18.0))
              : RoundedRectangleBorder(borderRadius: BorderRadius.circular(0.8)),
          side: BorderSide(
            width: borderSize,
            color: borderColor ?? Theme.of(context).primaryColor,
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            iconButton != null ? iconButton : Container(),
            SizedBox(
              width: 4.0,
            ),
            processing
                ? Container(
                    height: circularProgressIndicatorSize,
                    width: circularProgressIndicatorSize,
                    child: CircularProgressIndicator(
                      strokeWidth: circularProgressIndicatorStrokeWidth,
                      valueColor: new AlwaysStoppedAnimation<Color>(circularProgressIndicatorBgColor),
                    ))
                : Text(
                    label,
                    style: TextStyle(color: textColor ?? Theme.of(context).primaryColor),
                  ),
          ],
        ),
        onPressed: onPress,
      ),
    );
  } catch (error, stackTrace) {
    AgteCoreLogger().erro("Ocorreu o erro no método customRaisedButton", error, stackTrace);
    return SizedBox.shrink();
  }
}

/// Componente visual para mostrar um card enquando o usuário aguarda
/// o processamento da operação.
///
///    Parameters:
///
///      context -> BuildContext contendo o contexto do App
Widget customProcessingCardModal(BuildContext context) {
  return Container(
    child: Align(
      alignment: Alignment.center,
      child: Card(
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8.0),
          child: Column(
            children: [
              CircularProgressIndicator(),
              SizedBox(
                height: 16,
              ),
              Text(
                AppLocalizations.of(context)?.translate("custom_processing_card_label") ?? "",
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

/// Componente visual para mostrar um card centralizado enquando o usuário aguarda
/// o processamento da operação.
///
///    Parameters:
///
///      context -> BuildContext contendo o contexto do App
Widget customProcessingCardModalCenter(BuildContext context) {
  return Container(
    margin: EdgeInsets.only(top: MediaQuery.of(context).size.height / 2),
    child: Align(
      alignment: Alignment.center,
      child: Card(
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 22, horizontal: 16),
          child: Column(
            children: [
              const CircularProgressIndicator(),
              SizedBox(
                height: 16,
              ),
              Text(
                AppLocalizations.of(context)?.translate("custom_processing_card_label") ?? "",
              ),
            ],
          ),
        ),
      ),
    ),
  );
}

/// Componente para mostrar mensagens aos usuário de
/// ações que retornaram com sucesso
customSuccessSnackbar(String message, {int secondsDuration = 4}) {
  return SnackBar(
    content: Text(message),
    backgroundColor: Color(0xFFF799FCB),
    duration: Duration(seconds: secondsDuration),
  );
}

/// Componente visual para mostrar um elemento de loading customizado
///     Parameters:
///       context -> BuildContext contendo o contexto do App
///       isCircularIndicator -> bool indicando se o widget é CircularProgressIndicator
///       lineHeigth -> double contendo a espesura da linha
///       lineColor -> Color contendo a cor de foreground
///       backgroundColor -> Color contendo a cor de background
Widget customProcessingWidget(
  BuildContext context, {
  bool isCircularIndicator = true,
  double lineHeigth = 0.0,
  Color backgroundColor = Colors.white,
}) {
  if (isCircularIndicator == true) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12.0),
      child: CircularProgressIndicator(),
    );
  }
  return Container(
    padding: const EdgeInsets.symmetric(vertical: 12.0),
    child: LinearProgressIndicator(
      backgroundColor: backgroundColor,
    ),
  );
}

/// Componente para mostrar mensagens aos usuário de
/// ações que retornaram com sucesso
customErrorSnackbar(String message, {int secondsDuration = 4}) {
  return SnackBar(
    content: Text(message),
    backgroundColor: Color(0xfffFF6961),
    duration: Duration(seconds: secondsDuration),
  );
}

///
/// [Área para os widgets do cabeçalho da página/views e da barra de botões]
///

class HeadWidget extends StatefulWidget {
  final String assetImageHeadBackground;
  final String webImageHeadBackground;
  final double marginTitleTop;
  final double marginTitleBottom;
  final double marginTitleRight;
  final double marginTitleLeft;

  HeadWidget(
      {this.assetImageHeadBackground = "",
      this.webImageHeadBackground = "",
      this.marginTitleTop = 80,
      this.marginTitleBottom = 12,
      this.marginTitleLeft = 12,
      this.marginTitleRight = 45});

  @override
  _HeadWidgetState createState() => _HeadWidgetState();
}

/// Head da tela inicial
class _HeadWidgetState extends State<HeadWidget> {
  /// Variável contendo o tipo da imagem a ser renderizada como background
  /// iniciado com zero para o caso de não ter sido informada nenhuma imagem
  /// no construtor do Widget. Valor 1 -> AssetsImage, 2 -> WebImage
  int imageType = 0;
  double marginTitleTop = 0.0;
  double marginTitleLef = 0.0;
  double marginTitleBottom = 0.0;
  double marginTitleRight = 0.0;

  /// String contendo o caminho a ser renderizado como background do cabeçalho
  String _urlPath = "";

  @override
  void initState() {
    // Verificando se foi passado algum valor para o assetImageHeadBackgroud ou webImageHeadBackground
    if (widget.assetImageHeadBackground.isNotEmpty) {
      _urlPath = widget.assetImageHeadBackground;
      imageType = 1;
    } else if (widget.webImageHeadBackground.isNotEmpty) {
      _urlPath = widget.webImageHeadBackground;
      imageType = 2;
    }
    marginTitleTop = widget.marginTitleTop;
    marginTitleBottom = widget.marginTitleBottom;
    marginTitleLef = widget.marginTitleLeft;
    marginTitleRight = widget.marginTitleRight;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: Util.getProportionScreenWidth(context, _proportionScreenDefault),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Theme.of(context).primaryColor,
            Theme.of(context).colorScheme.secondary,
          ],
        ),
      ),
      child: Stack(
        children: <Widget>[
          imageType == 1
              ? Image.asset(
                  _urlPath,
                  fit: BoxFit.cover,
                  width: double.infinity,
                )
              : Container(),
          Container(
            color: Colors.black.withOpacity(0.22),
            width: double.infinity,
          ),
          Container(
            padding: EdgeInsets.only(
              top: marginTitleTop,
              bottom: marginTitleBottom,
              left: marginTitleLef,
              right: marginTitleRight,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              children: <Widget>[
                Text(
                  "",
                  style: Theme.of(context)
                      .textTheme
                      .headline5
                      ?.copyWith(fontWeight: FontWeight.w600, wordSpacing: 0.08, color: Colors.white),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// Barra de botões da tela inicial
class ContentWidget extends StatefulWidget {
  final widgetChild = Container();
  ContentWidget({
    Key? key,
    Widget? widgetChild,
  });

  @override
  _ContentWidgetState createState() => _ContentWidgetState();
}

class _ContentWidgetState extends State<ContentWidget> {
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(top: Util.getProportionScreenWidth(context, _proportionScreenDefault) - 125),
      child: widget.widgetChild,
    );
  }
}

/// [Área para o CustomTextFormFieldLabel]
class CustomTextFormFieldLabel extends StatelessWidget {
  final String labelText;

  const CustomTextFormFieldLabel({Key? key, required this.labelText}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(
        bottom: 8,
        left: 4,
      ),
      child: Text(
        labelText,
        style: Theme.of(context).textTheme.bodyLarge?.copyWith(
          fontSize: 14,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }
}

/// [Área para o CustomTextFormFieldWidget Class]
class CustomTextFormField extends StatelessWidget {
  final String labelText;
  final String hintText;
  final FormFieldValidator<String>? customValidator;
  final ValueChanged<String>? customOnChanged;
  final List<TextInputFormatter>? inputFormatters;
  final FocusNode? focusNode;
  final TextInputType keyBoardType;
  final bool obscureValue;
  final bool readOnly;
  final int? maxLineField;
  final int? maxLengthCharacter;
  final TextEditingController controller;
  final bool hiddenCounter;

  const CustomTextFormField(
      {Key? key,
      required this.labelText,
      required this.hintText,
      required this.controller,
      this.customValidator,
      this.customOnChanged,
      this.inputFormatters,
      this.focusNode,
      this.keyBoardType = TextInputType.text,
      this.obscureValue = false,
      this.readOnly = false,
      this.maxLineField = null,
      this.maxLengthCharacter = null,
      this.hiddenCounter = false})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        CustomTextFormFieldLabel(labelText: labelText),
        Container(
          margin: const EdgeInsets.only(bottom: 18),
          child: TextFormField(
            controller: controller,
            validator: customValidator,
            onChanged: customOnChanged,
            inputFormatters: inputFormatters,
            keyboardType: keyBoardType,
            obscureText: obscureValue,
            readOnly: readOnly,
            maxLines: maxLineField,
            focusNode: this.focusNode,
            maxLength: maxLengthCharacter ?? null,
            decoration: CustomTextFormFieldStyle.textFieldStyle(hintText: hintText, hiddenCounter: hiddenCounter),
          ),
        )
      ],
    );
  }
}
