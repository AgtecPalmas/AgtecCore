/// [Arquivo gerado automatimante pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para nÃ£o ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/user_interface/custom.style.dart';
import '../../../../core/user_interface/connection_mixin.dart';
import '../../../../core/user_interface/message_mixin.dart';
import '../../../../core/user_interface/modal_loading_mixin.dart';
import '../../../../core/agtec.logger.dart';
import '../../../../core/user_interface/font.dart';
import '../../../../core/user_interface/widget.dart';
import '../../../../core/config.dart';
import '../../../../core/util.dart';
import '../controller.dart';
import '../model.dart';

class $ModelClass$AddPage extends StatefulWidget {
  static const routeName = "/$ModelClassCamelCase$AddPage";

  @override
  _$ModelClass$AddPageState createState() => _$ModelClass$AddPageState();
}

class _$ModelClass$AddPageState extends State<$ModelClass$AddPage> 
  with SingleTickerProviderStateMixin, MessagesMixin, ConnectionMixin, ModalLoadingMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();  
  late AnimationController _animationController;
  $ModelClass$Model _$Model$Model = $ModelClass$Model();
  final _form$ModelClass$ = GlobalKey<FormState>();
  $Attributes$

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget> [
        HeadWidget(),
        _buildPage(),
      ]
    );
  }

  Widget _buildPage(){
    return SingleChildScrollView(
      child: ConstrainedBox(
        constraints: new BoxConstraints(
          minHeight: MediaQuery.of(context).size.height
        ),
        child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
         margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(context, Config.marginHead),
             ),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.only(bottom: 12.0, top: 12.0),
                  child: customTitlePage(context,
                    'Cadastrar $ModelClass$',
                  ),
                ),

                BlocConsumer<$ModelClass$Controller, $ModelClass$State>(
                listener: (context, state) {
                  if (state is $ModelClass$ErrorState){
                    showError(registerItemErrorMessage);
                    AgteCoreLogger().erro("Ocorreu o erro no BlocConsumer CreatePage", state.error.toString());
                  }
                  if(state is $ModelClass$SuccessState){
                    showSuccess(registerItemSuccessMessage);
                  }
                },
                builder: (context, state) {
                    _$Model$Model = context.read<$ModelClass$Controller>().$Model$Model;
                    return Stack(
                    children : <Widget>[
                      Column(
                        children: <Widget>[
                          _createForm(context),
                          _createButton(context),
                        ]
                      ),
                    ]
                  );
                },
              )
            ],
          ),
        ),
      ),
    );
  }

  Widget _createForm(context){
    return Form(
      key: _form$ModelClass$,
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: <Widget>[
          $Form$
        ],
      ),
    );
  }

  Widget _createButton(context){
    return BlocConsumer<$ModelClass$Controller, $ModelClass$State>(
      listener: (context, state) {},
      builder: (context, state) {
        return  Padding(
          padding: const EdgeInsets.only(top: 24.0),
          child: Container(
              width: MediaQuery.of(context).size.width,
              child: customRaisedButton(
                label: 'Salvar',
                context: context,
                onPress: () {
                  if (_form$ModelClass$.currentState?.validate() ?? false) {
                    _post();
                  }
                },
              ),
            ),
        );
      },
    );
  }

  void _clearForm(){
    $ClearData$
  }

  void _post() async {
    final _$Model$Controller = context.read<$ModelClass$Controller>();
    try{
      _$Model$Model = $ModelClass$Model();
      $GetValuesControllers$
      _$Model$Controller.$Model$Model = _$Model$Model;
      await _$Model$Controller.post(_$Model$Model);
    }catch (error, stackTrace){
      AgteCoreLogger().erro("Ocorreu o erro no _post do PageCreate", error, stackTrace);
      showError(registerItemErrorMessage);
    }
  }
}
