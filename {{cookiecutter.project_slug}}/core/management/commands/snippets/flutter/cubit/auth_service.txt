import 'dart:convert';

import 'package:dio/dio.dart';

import '../../../core/config.dart';
import '../../../core/dio/custom_dio.dart';
import '../../core/agtec.logger.dart';
import '../../core/exceptions/exception.dart';
import '../../core/util.dart';
import '../auth/data.dart';
import '../usuario/usuario/model.dart';
import 'model.dart';

class AuthService {
  AuthModel auth = AuthModel();

  Future<void> defaultAuthenticationFastAPI() async {
    final _uriAuth = uriDeveloper;
    final String _uriAutentication = '${_uriAuth}api/v1/authentication/login';
    try {
      final authenticationLogin = {
        'username': Config.fastAPIUserDevelopment,
        'password': Config.fastAPIPasswordDevelopment,
      };
      final CustomDio _dio = CustomDio(_uriAutentication);
      final authenticationForm = FormData.fromMap(authenticationLogin);
      final dataResponse = await _dio.postHttp(authenticationForm);
      if (dataResponse != null) {
        AgteCoreLogger().debug(dataResponse);
        final _authData = AuthData();
        final _authModel = AuthModel();
        final String _token = dataResponse['access_token'] ?? '';
        _authModel.accessToken = _token;
        _authData.save(_authModel);
      }
      return dataResponse['access_token'];
    } on DioException catch (error) {
      ExceptionCustom.dio(
        error.response?.statusCode ?? 0,
        "Ocorreu o erro: ${error.response?.data?.toString()} no defaultAuthentication",
        error.message,
        error.requestOptions.uri.toString(),
        error,
      );
      return null;
    } catch (errorGeneral) {
      ExceptionCustom.general(
          "Ocorreu um erro desconhecido no método defaultAuthentication do Dio", errorGeneral.toString());
      return null;
    }
  }

  Future<void> signUpUser(int typeUser) async {
    String _uri = "";
    switch (typeUser) {
      case 0:
        _uri = "${Config.uri}usuario/cliente/";
        break;
      default:
        _uri = "${Config.uri}usuario/profissional/";
    }
    try {
      final CustomDio _dio = CustomDio(_uri);
      FormData _data = FormData.fromMap({
        "cpf": auth.cpf,
        "nome": auth.name,
        "email": auth.email,
        "telefone": auth.phoneNumber,
        "password": auth.password,
        "firebase": auth.firebaseId
      });
      final data = await _dio.postHttp(_data, uri: _uri);
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signUpUser", error, stackTrace);
    }
  }

  Future<void> signUpUserFirebase(String url) async {
    try {
      final CustomDio _dio = CustomDio(url);
      var _dataPost = json.encode({'email': auth.email, 'password': auth.password, 'returnSecureToken': true});
      final data = await _dio.postHttp(_dataPost, uri: url);
      if (data != null) {
        auth.firebaseId = data['localId'];
        signUpUser(0);
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signUpUserFirebase", error, stackTrace);
    }
  }

  Future<AuthModel> signIn(String login, String password) async {
    String _uri = "${Config.uriAuth}token/";
    AuthModel _authModel = AuthModel();
    try {
      CustomDio _dio = CustomDio(_uri);
      FormData _data = FormData.fromMap({"username": login, "password": password});
      var dataResponse = await _dio.postHttp(_data, uri: _uri);
      if (dataResponse != null) {
        _authModel.token = dataResponse['access'];
        _success("Usuário logado com sucesso", statusCode: 200);
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signIn", error, stackTrace);
    }
    return _authModel;
  }

  Future<int?> checkDjangoUserTypeClient(String login) async {
    String _uri = "${Config.uri}usuario/cliente/?email=$login";
    try {
      CustomDio _dio = CustomDio(_uri);
      var dataResponse = await _dio.getHttp(uri: _uri);
      if (dataResponse != null) {
        if (dataResponse["count"] != 0) {
          return 0;
        }
        return 1;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService checkDjangoUserTypeClient", error, stackTrace);
    }
    return null;
  }

  Future<String?> signUp(AuthModel authModel) async {
    String _uri = "";
    final bool result = await this.verifyingEmailAlreadyExists(authModel.email);
    if (result == true) {
      throw new Exception("Já existe um usuário com o email informado");
    }
    _uri = "${Config.uri}usuario/usuario/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = json.encode({
        "cpf": authModel.cpf,
        "nome": authModel.name,
        "email": authModel.email,
        "telefone": authModel.phoneNumber,
        "password": authModel.password,
        "firebase": authModel.firebaseId,
        "device_id": authModel.idToken,
        "jwt_token": authModel.accessToken
      });
      final data = await _dio.postHttp(_data, uri: _uri);
      if (data != null) {
        _success("Usuário criado com sucesso", statusCode: Process.statusCode);
        return data["id"];
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signUp", error, stackTrace);
    }
    return null;
  }

  Future<AuthModel?> login(AuthModel auth) async {
    String _uri = "${Config.uriAuth}";
    try {
      CustomDio _dio = CustomDio(_uri);
      final _data = json.encode({"username": auth.login, "password": auth.password});
      final userType = await checkDjangoUserTypeClient(auth.login);
      var dataResponse = await _dio.postHttp(_data, uri: _uri);
      if (dataResponse != null && userType != null) {
        final authData = AuthData();
        auth.token = dataResponse['access'];
        final djangoUser = await signInDjangoUser(auth.login, userType);
        if (djangoUser != null) {
          auth.id = djangoUser.id;
          auth.uuid = djangoUser.id;
          auth.name = djangoUser.nome;
          auth.login = djangoUser.email;
          auth.email = djangoUser.email;
          auth.firebaseId = djangoUser.firebase;
          auth.phoneNumber = djangoUser.telefone;
          authData.save(auth);
          return auth;
        } else {
          return null;
        }
      } else {
        return null;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService login", error, stackTrace);
    }
    return null;
  }

  Future<bool> verifyingEmailAlreadyExists(String email) async {
    bool result = false;
    String _uri = "";
    try {
      _uri = "${Config.uri}usuario/usuario/?email=$email";
      final CustomDio _dio = CustomDio(_uri);
      final dataResult = await _dio.getHttp(uri: _uri);
      if (dataResult != null) {
        result = dataResult['count'] != 0;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService verifyingEmailAlreadyExists", error, stackTrace);
    }
    return result;
  }

  Future<UsuarioModel?> signInDjangoUser(String login, int userType) async {
    String _uri = "${Config.uri}usuario/usuario/?email=$login";
    int typeException = 0;
    try {
      CustomDio _dio = CustomDio(_uri);
      var dataResponse = await _dio.getHttp(uri: _uri);
      if (dataResponse != null) {
        if (dataResponse["count"] == 0) {
          return null;
        }
        if (dataResponse["results"][0]["aprovado"] == false) {
          final _cpf = dataResponse["results"][0]["cpf"];
          typeException = 0;
          if (_cpf == null || _cpf == "") {
            typeException = 1;
          }
        } else {
          _success("Usuário logado com sucesso", statusCode: 200);
          return UsuarioModel.fromMap(dataResponse["results"][0]);
        }
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signInDJangoUser", error, stackTrace);
    }
    if (typeException == 0) {
      throw ("Seu cadastro ainda não foi aprovado.");
    } else if (typeException == 1) {
      throw ("Dados Incompletos");
    } else {
      return null;
    }
  }

  Future<bool> logout() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService logout", error, stackTrace);
    }
    return false;
  }

  Future<bool> changePassword() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService changePassword", error, stackTrace);
    }
    return false;
  }

  Future<bool> recoverPassword() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService recoverPassword", error, stackTrace);
    }
    return false;
  }

  Future<AuthModel?> createAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return AuthModel.fromMap(data);
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService createAccount", error, stackTrace);
    }
    return null;
  }

  Future<bool> disableAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService disableAccount", error, stackTrace);
    }
    return false;
  }

  Future<bool> excludeAccount() async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_url);
      final data = await _dio.getHttp();
      if (data != null) {
        return true;
      }
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService excludeAccount", error, stackTrace);
    }
    return false;
  }

  void _success(String message, {int statusCode = 200}) async {
    try {
      AgteCoreLogger().debug(message);
    } catch (error, stackTrace) {
      AgteCoreLogger().erro("Ocorreu o erro no AuthService signUpUser", error, stackTrace);
    }
  }
}
