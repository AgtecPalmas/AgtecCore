/// Page/View para controle das configurações da App.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import './cubit.dart';
import '../../core/user_interface/widget.dart';
import '../../core/localization.dart';

class SettingsIndexPage extends StatefulWidget {
  @override
  _SettingsIndexPageState createState() => _SettingsIndexPageState();
}

class _SettingsIndexPageState extends State<SettingsIndexPage> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context)?.translate("page_label_configuration") ?? ""),
        centerTitle: true,
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Container(
      height: 300,
      child: Center(
          child: Column(
        children: <Widget>[
          BlocConsumer<SettingsCubit, SettingsState>(
            listener: (context, state) {},
            builder: (context, state) {
              return Container(
                height: 60,
                width: MediaQuery.of(context).size.width * .9,
                child: customButtonOutline(
                    borderColor: Colors.red,
                    textColor: Colors.red,
                    rounded: true,
                    label: "Dark",
                    onPress: () {
                      context.read<SettingsCubit>().setDarkTheme();
                    },
                    context: context),
              );
            },
          ),
          Container(
            height: 60,
            width: MediaQuery.of(context).size.width * .9,
            child: customButtonOutline(
                borderColor: Colors.white,
                textColor: Colors.white,
                rounded: true,
                label: "Light",
                onPress: () {
                  context.read<SettingsCubit>().setLightTheme();
                },
                context: context),
          ),
        ],
      )),
    );
  }

  /// Método para mostrar/ocultar a barra de mensagem para o usuário
  ///    Params:
  ///      message -> String contendo a mensagem a ser mostrada.
  ///      error -> bool para determinar se a mensagem é de erro ou não.
  _showMessage(String message, {bool error = false}) {
    if (message.isNotEmpty) {
      setState(() {
        ScaffoldMessenger.of(context).showSnackBar(
          error == false ? customSuccessSnackbar(message) : customErrorSnackbar(message),
        );
      });
    }
  }
}
