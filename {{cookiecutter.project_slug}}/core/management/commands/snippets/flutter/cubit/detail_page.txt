/// [Arquivo gerado automatimante pelo AgtecCore ]
///
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para nÃ£o ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
///
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/user_interface/connection_mixin.dart';
import '../../../../core/user_interface/message_mixin.dart';
import '../../../../core/user_interface/modal_loading_mixin.dart';
import '../../../../core/agtec.logger.dart';
import '../../../../core/user_interface/widget.dart';
import '../../../../core/config.dart';
import '../../../../core/util.dart';
import '../controller.dart';
import '../model.dart';
import 'update.dart';

class $ModelClass$DetailPage extends StatefulWidget {
  static const routeName = "/$ModelClassCamelCase$DetailPage";

  final $ModelClass$Model $ModelClassCamelCase$Model;

  const $ModelClass$DetailPage({Key? key, required this.$ModelClassCamelCase$Model})
      : super(key: key);

  @override
  _$ModelClass$DetailPageState createState() => _$ModelClass$DetailPageState();
}

class _$ModelClass$DetailPageState extends State<$ModelClass$DetailPage> 
  with SingleTickerProviderStateMixin, MessagesMixin, ConnectionMixin, ModalLoadingMixin{

  late $ModelClass$Model _$ModelClassCamelCase$Model;
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _$ModelClassCamelCase$Model = widget.$ModelClassCamelCase$Model;
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<$ModelClass$Controller, $ModelClass$State>(
      listener: (context, state) {
        if (state is $ModelClass$ErrorState){
          showError(DetailStringConstants.error);
          AgteCoreLogger().erro("Ocorreu o erro ao executar o Detail Page BlocConsumer", state.error.toString());
        }
        if(state is $ModelClass$SuccessState){
          showSuccess(DetailStringConstants.success);
        }
      },
      builder: (context, state) {
        if (state is $ModelClass$ProcessState) {
          return showHideModal(show: true);
        }
        return Scaffold(
          key: _scaffoldKey,
          extendBodyBehindAppBar: true,
          appBar: AppBar(backgroundColor: Colors.transparent),
          body: _buildBody(),
          floatingActionButton: FloatingActionButton(
            child: Icon(
              Icons.update,
            ),
            onPressed: () {
              Navigator.pushNamed(context, $ModelClass$UpdatePage.routeName, arguments: _$ModelClassCamelCase$Model);
            },
          ),
        );
      },
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return SingleChildScrollView(
      child: Container(
        height: MediaQuery.of(context).size.height,
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(context, Config.marginHead)),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Text(_$ModelClassCamelCase$Model.toString()),
            ],
          ),
        ),
      ),
    );
  }
}
