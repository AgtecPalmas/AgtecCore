/// Página inicial da APP.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'routers.dart';

import 'apps/configuracao/cubit.dart';
import 'home.page.dart';
import 'core/config.dart';

$ImportCubit$

String currentLanguage = "";

void main() async {
  /// Descomentar as linhas abaixo para inicializar o Firebase
  // WidgetsFlutterBinding.ensureInitialized();
  // await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {

    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark.copyWith(
      statusBarColor: Colors.transparent
    ));

    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.light.copyWith(
      statusBarColor: Colors.transparent
    ));
    
    return MultiBlocProvider(
      providers: [
        $RegisterProviders$
      ], child: MaterialAppWidget()  
    );
  }
}

class MaterialAppWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocConsumer<SettingsCubit, SettingsState>(
      listener: (context, state) {},
      builder: (context, state) {
        return ScreenUtilInit(
          designSize: const Size(widthScreenUtil, heightScreenUtil),
          builder: (_, __) => MaterialApp(
            title: Config.app_title,
            theme: context.watch<SettingsCubit>().lightTheme == true ? CustomTheme.lightTheme : CustomTheme.darkTheme,
            home: const MyHomePage(title: '${Config.app_title}'),
            onGenerateRoute: RouteGenerator.generateRoute,
            debugShowCheckedModeBanner: false,
            localizationsDelegates: const[
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: const[
              Locale('pt', 'BR')
            ],
            locale: const Locale('pt', 'BR'),
          ),
        );
      },
    );
  }
}