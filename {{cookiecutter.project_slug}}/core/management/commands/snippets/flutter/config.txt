/// [Arquivo gerado automaticamente pelo AgtecCore]
///
/// [Travado por default]
/// Por ser um arquivo de configuração, para evitar que o mesmo seja sobrescrito
/// por um novo build do Core, o mesmo está travado por default.
/// #FileLocked
///

import 'package:flutter/material.dart';

const heightAppBarPage = 22.0;
const marginTopCustomAppBar = 12.0;
const marginHorizontalSectionsDataPage = 12.0;

// Definindo o width e o height do ScreenUtil Extensions
const double widthScreenUtil = 390;
const double heightScreenUtil = 844;

// Constante para determinar se a navegação na App será utilizando o Bottom NavigationBar
const bool enabledBottomNavigationBar = false;

// Chave para determinar se a versão está em desenvolvimento ou produção
const bool releaseVersion = false;

// URI para desenvolvimento
// URI definida do settings do Projeto Django -> $DjangoAPIPath$
const String uriDeveloper = '$UriAPIDeveloper$';

// URI para produção
const String uriRelease = '';

// URL para os termos de uso
const String urlTermoUso = '';

// Área para configuração das modalidades de registro e login
const bool enabledFacebookAccount = false;
const bool enabledGoogleAccount = false;
const bool enabledEmailAccount = false;
const bool enabledOTPAccount = false;

class Config {
  static const uri = releaseVersion ? uriRelease : uriDeveloper;
  static const uriAuth = '';

  // Adicionar aqui o token DRF caso esteja utilizando o Django Rest Framework.
  static const drfToken = 'Token ';

  // Dados de acesso à camada FastAPI
  static const fastAPIUserDevelopment = '$FastAPIUserDevelopment$';
  static const fastAPIPasswordDevelopment = '$FastAPIPasswordDevelopment$';

  static const String uriMedia = 'media/';
  static const String appTitle = 'App Flutter';
  static const bool usingURL = false;
  static const double marginHead = 0.25;
}

///
/// Customizando o Thema do aplicativo Flutter
///
class CustomTheme {
  //Colors for theme
  static Color defaultColor = Colors.black;
  static Color lightPrimary = const Color(0xfffcfcff);
  static Color lightAccent = Colors.blue;
  static Color lightBG = const Color(0xfffcfcff);
  static Color darkPrimary = Colors.black;
  static Color darkAccent = Colors.blueGrey;
  static Color darkBG = Colors.black;

  //Colors for main cards theme light and dark
  static Color mainCardLightIconColor = Colors.black38;
  static Color mainCardLightTextColor = Colors.black38;
  static Color mainCardLightBackgroundColor = Colors.white;
  static Color mainCardLightShadowColor = Colors.black38;
  static Color textStyleDefaultColor = const Color(0xFF4a5c6a);

  // Classe estática para configuração do TextStyle padrão
  static final _defaultTextStyle = TextStyle(color: textStyleDefaultColor);

  static final _textThemeDefault = TextTheme(
    displayLarge: _defaultTextStyle,
    displayMedium: _defaultTextStyle,
    displaySmall: _defaultTextStyle,
    headlineMedium: _defaultTextStyle,
    headlineSmall: _defaultTextStyle,
    titleLarge: _defaultTextStyle,
    titleMedium: _defaultTextStyle,
    titleSmall: _defaultTextStyle,
    bodyLarge: _defaultTextStyle,
    bodyMedium: _defaultTextStyle,
    bodySmall: _defaultTextStyle,
    labelLarge: _defaultTextStyle,
    labelSmall: _defaultTextStyle,
  );

  static ThemeData lightTheme = ThemeData(
      primaryColor: lightPrimary,
      scaffoldBackgroundColor: lightBG,
      appBarTheme: AppBarTheme(
        elevation: 0,
        toolbarTextStyle: TextTheme(
          titleMedium: TextStyle(color: lightBG, fontSize: 18.0, fontWeight: FontWeight.w800),
        ).bodyMedium,
        titleTextStyle: TextTheme(
          titleMedium: TextStyle(color: lightBG, fontSize: 18.0, fontWeight: FontWeight.w800),
        ).titleLarge,
      ),
      textTheme: _textThemeDefault,
      colorScheme: ColorScheme.fromSwatch()
          .copyWith(
            secondary: lightAccent,
          )
          .copyWith(background: lightBG));

  static ThemeData darkTheme = ThemeData(
      brightness: Brightness.dark,
      primaryColor: darkPrimary,
      scaffoldBackgroundColor: darkBG,
      appBarTheme: AppBarTheme(
        elevation: 0,
        toolbarTextStyle: TextTheme(
          titleMedium: TextStyle(color: lightBG, fontSize: 18.0, fontWeight: FontWeight.w800),
        ).bodyMedium,
        titleTextStyle: TextTheme(
          titleMedium: TextStyle(color: lightBG, fontSize: 18.0, fontWeight: FontWeight.w800),
        ).titleLarge,
      ),
      textTheme: _textThemeDefault,
      colorScheme: ColorScheme.fromSwatch()
          .copyWith(
            secondary: darkAccent,
          )
          .copyWith(background: darkBG));
}

// Área de definição das classes que encapsulam as String defaultas
// das telas de listagem, inserção, edição, exclusão e detalhamento
class ListStringConstants {
  static const String loading = 'Carregando...';
  static const String error = 'Erro ao carregar os dados';
  static const String refreshError = 'Erro ao recarregar os dados';
  static const String loadingError = 'Erro ao carregar os dados';
  static const String success = 'Dados carregados com sucesso';
  static const String empty = 'Nenhum registro encontrado';
}

class DetailStringConstants {
  static const String loading = 'Detalhando...';
  static const String loadingError = 'Erro ao carregar os dados';
  static const String error = 'Erro ao detalhar o item';
  static const String success = 'Item detalhado com sucesso';
  static const String empty = 'Item não encontrado';
}

class InsertStringConstants {
  static const String loading = 'Cadastrando...';
  static const String loadingError = 'Erro ao carregar os dados';
  static const String error = 'Erro ao cadastrar o item';
  static const String success = 'Item cadastrado com sucesso';
  static const String empty = '';
}

class UpdateStringConstants {
  static const String loading = 'Atualizando...';
  static const String loadingError = 'Erro ao carregar os dados';
  static const String error = 'Erro ao atualizar o item';
  static const String success = 'Item atualizado com sucesso';
  static const String empty = '';
}
