/// Local Data do model $ModelClass$
///
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de $ModelClass$.
///     save() -> Salva os dados de uma instância do $ModelClass$.
///     detail() -> Recupera os detalhes de $ModelClass$.
///     update() -> Atualiza os dados de uma instância do $ModelClass$.
///     delete() -> Deleta um registro.
///     deleteAll() -> Deleta todos os registros.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// #FileLocked

import 'package:path/path.dart';
import 'package:flutter/foundation.dart';
import 'package:sembast/sembast_io.dart' as smbt_io;
import 'package:sembast/sembast.dart' as smbt;
import 'package:path_provider/path_provider.dart';
import 'dart:developer' as dev;

import 'model.dart';
import '../../../core/config.dart';
import '../../../core/exceptions/exception.dart';

class $ModelClass$Data {

  static  $ModelClass$Data? _instance;
  factory $ModelClass$Data() {
    _instance ??= $ModelClass$Data._internal();
    return _instance!;
  }

  $ModelClass$Data._internal();

  final String _storeName = "$ModelClass$StoreDB";

  /// Método para inicializar o banco de dados criando a tabela.
  Future<smbt.Database?> initDb() async {
    try {
      var dir = await getApplicationDocumentsDirectory();
      await dir.create(recursive: true);
      var dbPath = join(dir.path, '$project$.db');
      return await smbt_io.databaseFactoryIo.openDatabase(dbPath);
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método initDb do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    }
    return null;
  }

  /// Método para recuperar todos os dados de $ModelClass$
  ///
  /// returns:
  ///   Instância do $ModelClass$Model
  Future<List<$ModelClass$Model>> fetchAll() async {
    var _localList = <$ModelClass$Model>[];
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
        var _store = smbt.intMapStoreFactory.store(_storeName);
        var _data = await _store.find(_db);
        _localList = _data.map((snapshot) {
          return $ModelClass$Model.fromMap(snapshot.value);
        }).toList();
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método fetchAll do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return _localList;
  }

  /// Método para recuperar o primeiro registro de $ModelClass$
  ///
  /// returns:
  ///   Instância do $ModelClass$Model
  Future<$ModelClass$Model?> get(int id) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
          var _store = smbt.intMapStoreFactory.store(_storeName);
          var _data = await _store.findFirst(_db);
          if(_data != null){
            return $ModelClass$Model.fromMap(_data.value);
          }
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método get do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return null;
  }

  /// Método para salvar localmente um(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> save($ModelClass$Model $modelClass$) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
          var _store = smbt.intMapStoreFactory.store(_storeName);
          final _map = $modelClass$.toMap();
          if(_map != null){
            // Salvando o dado do novo $modelClass$
            await _store.add(_db, _map);
            return true;
          }
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método save do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return false;
  }

  /// Método para deletar todos os registros do(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> deleteAll() async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
          var _store = smbt.intMapStoreFactory.store(_storeName);
          // Apagando todos os registros anteriores
          await _store.delete(_db);
          return true;
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método deletar do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return false;
  }

  /// Método para deletar um registro do(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> delete(int id) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
          var _store = smbt.intMapStoreFactory.store(_storeName);
          await _store.delete(_db);
          return true;
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método deletar do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return false;
  }

  /// Método para atualizar um registro do(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> update($ModelClass$Model $modelClass$) async {
    smbt.Database? _db;
    try {
      _db = await initDb();
      if (_db != null) {
          var _store = smbt.intMapStoreFactory.store(_storeName);
          final finder = smbt.Finder(filter: smbt.Filter.byKey($modelClass$.id));
          final _map = $modelClass$.toMap();
          if(_map != null){
            await _store.update(_db, _map, finder: finder);
            return true;
          }
      }
    } catch (error, exception) {
      dev.log("Data", name: "AgtecCore", error: error.toString(), stackTrace: exception);
      ExceptionCustom.data(
        "Ocorreu no método update do $ModelClass$Data",
        "Error: ${error.toString()}\nException: ${exception.toString()}",
      );
    } finally {
      _db?.close();
    }
    return false;
  }
}
