{"version":3,"file":"components/notification/notification.min.js","mappings":"CAAA,SAAUA,EAAiCC,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,OAAQ,GAAIH,GACO,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,GAChB,CATD,CASGK,MAAM,I,2BCNT,MAAMC,EAMJ,WAAAC,CAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,UAAYA,EACjBC,KAAKC,SAAWF,EAAUG,iBAAiB,mBAC3CF,KAAKG,WAAa,CAAC,aAAc,QACjCH,KAAKI,cACP,CAOA,iBAAAC,CAAkBC,GAChB,MAAMC,EAAeD,YAAOE,WAAWA,WAC1BC,aAAa,SAAU,GACtC,CAOA,qBAAAC,CAAsBJ,GACpB,MAAMK,EACJL,YAAOE,WAAWA,WAAWA,WAAWN,iBAAiB,YAC7CU,SAASL,IACrBA,EAAaE,aAAa,SAAU,GAAE,GAE1C,CAMA,YAAAL,GACE,IAAK,MAAMS,KAAUb,KAAKD,UAAUG,iBAClC,2BAEAW,EAAOC,iBAAiB,SAAS,KAC/Bd,KAAKe,SAASf,KAAKD,UAAS,IAGhCC,KAAKgB,sBACP,CAMA,oBAAAA,GACE,MAAMC,EAAqB,GAE3BC,OAAOC,SACJjB,iBAAiB,0CACjBU,SAASQ,IACR,MAAMC,EAAiBD,EAAoBE,cACzC,uBAGF,IAAIC,EAAc,GAElB,IAAIF,EAeF,OAZA,GAFAE,EAAcF,EAAeG,aAAa,qBAEtB,OAAhBD,EACF,OAGF,QAA2B,IAAhBA,EACT,OAGF,GAA2B,KAAvBA,EAAYE,OACd,OAMJ,MAAMC,EAAS,CACbC,UAAWP,EACXQ,UAAW,MACXC,YAAaN,GAEf,IACEO,OAASV,EAAoBZ,WAC7BsB,OACAA,OAASA,OAAOtB,WAEhB,GAAIsB,OAAOC,WACLD,OAAOC,UAAUC,SAAS,iBAC5B,OAGNf,EAAmBgB,KAAK,IAAIC,QAAQR,GACpC,GAEN,CAOA,QAAAX,CAAShB,GACPA,EAAUgC,UAAUI,IAAI,QAC1B,EAGF,MAAe,I","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/notification/notification.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Tooltip from '../../partial/js/behavior/tooltip'\n// import Tooltip from '../../partial/js/behavior/tooltip'\n/** Classe para instanciar um objeto BRNotification*/\nclass BRNotification {\n  /**\n   * Instancia do objeto\n   * @param {string} name - Nome do componente em minúsculo\n   * @param {object} component - Objeto referenciando a raiz do componente DOM\n   */\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.menuBtns = component.querySelectorAll('.contextual-btn')\n    this.hideEvents = ['mouseleave', 'blur']\n    this._setBehavior()\n  }\n\n  /**\n   * Esconde a notificação relativa a referência\n   * @private\n   * @property {object} action - Referência ao Objeto que dispara a ação\n   */\n  _hideNotification(action) {\n    const notification = action.parentNode.parentNode\n    notification.setAttribute('hidden', '')\n  }\n\n  /**\n   * Esconde todas as notificações relativa a referência\n   * @private\n   * @property {object} action - Referência ao Objeto que dispara a ação\n   */\n  _hideAllNotifications(action) {\n    const notifications =\n      action.parentNode.parentNode.parentNode.querySelectorAll('.br-item')\n    notifications.forEach((notification) => {\n      notification.setAttribute('hidden', '')\n    })\n  }\n\n  /**\n   * Define comportamentos do componente\n   * @private\n   */\n  _setBehavior() {\n    for (const button of this.component.querySelectorAll(\n      '.br-notification .close'\n    )) {\n      button.addEventListener('click', () => {\n        this._dismiss(this.component)\n      })\n    }\n    this._notificationTooltip()\n  }\n\n  /**\n   * Define tooltip para a notificação\n   * @private\n   */\n  _notificationTooltip() {\n    const TooltipExampleList = []\n\n    window.document\n      .querySelectorAll(':not(.br-header) .notification-tooltip')\n      .forEach((TooltipNotification) => {\n        const elementTooltip = TooltipNotification.querySelector(\n          '[data-tooltip-text]'\n        )\n\n        let texttooltip = ''\n        // Verifica se existe atributo data-tooltip-text\n        if (elementTooltip) {\n          texttooltip = elementTooltip.getAttribute('data-tooltip-text')\n\n          if (texttooltip === null) {\n            return\n          }\n\n          if (typeof texttooltip === 'undefined') {\n            return\n          }\n\n          if (texttooltip.trim() === '') {\n            return\n          }\n        } else {\n          return\n        }\n\n        const config = {\n          activator: TooltipNotification,\n          placement: 'top',\n          textTooltip: texttooltip,\n        }\n        for (\n          parent = TooltipNotification.parentNode;\n          parent;\n          parent = parent.parentNode\n        ) {\n          if (parent.classList)\n            if (parent.classList.contains('header-avatar')) {\n              return\n            }\n        }\n        TooltipExampleList.push(new Tooltip(config))\n        return\n      })\n  }\n\n  /**\n   * Adiciona classe para refletir comportamento de fechar\n   * @private\n   * @property {object} componente - Referência ao Objeto\n   */\n  _dismiss(component) {\n    component.classList.add('close')\n  }\n}\n\nexport default BRNotification\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","BRNotification","constructor","name","component","this","menuBtns","querySelectorAll","hideEvents","_setBehavior","_hideNotification","action","notification","parentNode","setAttribute","_hideAllNotifications","notifications","forEach","button","addEventListener","_dismiss","_notificationTooltip","TooltipExampleList","window","document","TooltipNotification","elementTooltip","querySelector","texttooltip","getAttribute","trim","config","activator","placement","textTooltip","parent","classList","contains","push","Tooltip","add"],"sourceRoot":""}