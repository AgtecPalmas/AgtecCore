{"version":3,"file":"components/menu/menu.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;ACVA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,QAAQ;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sEAAe,sDAAM;;;;;;AClmBrB","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/menu/menu.js","webpack://core/./src/components/menu/_menu.scss?9175"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","/** Classe para instanciar um objeto BRMenu*/\nclass BRMenu {\n  /**\n   * Instancia do objeto\n   * @param {string} name - Nome do componente em minúsculo\n   * @param {object} component - Objeto referenciando a raiz do componente DOM\n   */\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.id = this.component.id\n    this.breakpoints = this.component.dataset.breakpoints\n      ? this.component.dataset.breakpoints.split(' ')\n      : ['col-sm-4', 'col-lg-3']\n    this.pushShadow = 'shadow-lg-right'\n    this.trigger = document.querySelector(`[data-target=\"#${this.id}\"]`)\n    this.contextual = this.component.querySelector('[data-toggle=\"contextual\"]')\n    this.dismiss = this.component.querySelectorAll('[data-dismiss=\"menu\"]')\n    this.scrim = this.component.querySelector('.menu-scrim')\n    this.componentFolders = this.component.querySelectorAll('.menu-folder')\n    this.componentSiders = this.component.querySelectorAll('.side-menu')\n    this.componentItems = this.component.querySelectorAll('.menu-item')\n    this.elementOpenMenu = HTMLElement\n    this.inSubmenu = false\n    this.triggerParent = HTMLElement\n    this._setBehavior()\n  }\n\n  /**\n   * Define comportamentos do componente\n   * @private\n   */\n  _setBehavior() {\n    this._toggleMenu()\n    this._setDropMenu()\n    this._setSideMenu()\n    this._setKeyboardBehaviors()\n    this._setBreakpoints()\n    this._setView()\n    this._addARIAAttributes()\n    window.addEventListener('resize', () => {\n      this._setView()\n    })\n  }\n\n  /**\n   * Define visual do componente\n   * @private\n   */\n  _setView() {\n    const template = document.querySelector('body')\n    const menuContextual = document.querySelector('.menu-trigger')\n    // const panel = document.querySelector('.menu-panel')\n    if (menuContextual && window.innerWidth < 992) {\n      template.classList.add('mb-5')\n    } else {\n      template.classList.remove('mb-5')\n    }\n  }\n\n  /**\n   * Define breakpoints do menu\n   * @private\n   */\n  _setBreakpoints() {\n    if (!this.component.classList.contains('push') && !this.contextual) {\n      this.component\n        .querySelector('.menu-panel')\n        .classList.add(...this.breakpoints)\n    }\n  }\n\n  /**\n   * Define ações do teclado\n   * @private\n   */\n  _setKeyboardBehaviors() {\n    // Fechar com tecla ESC\n    this.component.addEventListener('keydown', (event) => {\n      // Código da tecla\n\n      const keyCode = event.code\n      switch (keyCode) {\n        case 'Escape':\n          event.preventDefault()\n\n          if (this.trigger) {\n            this._closeMenu()\n          }\n\n          break\n        case 'ArrowDown':\n          event.preventDefault()\n          this._navigateToNextElment(event.target, 1)\n          break\n        case 'ArrowUp':\n          event.preventDefault()\n          this._navigateToNextElment(event.target, -1)\n          break\n        default:\n          break\n      }\n    })\n    // Fechar com Tab fora do menu\n    if (this.scrim) {\n      // this.scrim.addEventListener('keyup', () => {\n      //   return this._closeMenu()\n      // })\n    }\n  }\n\n  /**\n   * Navega para o próximo elemento na lista com base em um operador.\n   *\n   * @param {HTMLElement} element - O elemento de referência a partir do qual a navegação será realizada.\n   * @param {number} operator - Um operador numérico que indica a direção da navegação.\n   *                             Um valor positivo indica a navegação para baixo, enquanto um valor negativo\n   *                             indica a navegação para cima.\n   */\n  _navigateToNextElment(element, operator) {\n    // Obtém o contêiner pai com base na hierarquia\n    const parentFolder = element.parentNode.closest('.side-menu.active')\n      ? element.parentNode.closest('.side-menu.active')\n      : element.closest('.br-menu')\n    // Obtém todos os elementos irmãos relacionados ao elemento de referência dentro do contêiner pai\n    const elementSiblings =\n      parentFolder.classList.contains('br-menu') ||\n      parentFolder.classList.contains('menu-body')\n        ? parentFolder.querySelectorAll(\n            '.menu-body > .menu-item, .menu-body > .menu-folder > .menu-item,.menu-body > .menu-folder.active > .side-menu.active, .menu-body > .menu-folder.active > ul > li > .menu-item'\n          )\n        : parentFolder.querySelectorAll(\n            '.side-menu.active > .menu-item,.side-menu.active > ul > li > .menu-item'\n          )\n    // Determina a posição do elemento de referência na lista de elementos irmãos\n    const posicao = Array.from(elementSiblings).findIndex((el) => {\n      return el === element\n    })\n\n    // Calcula a nova posição na lista com base no operador\n    const soma = posicao + operator\n\n    // Foca no próximo elemento na lista, ajustando para o início ou o final da lista se necessário\n    if (soma >= 0 && soma < elementSiblings.length) {\n      const nextElement = elementSiblings[soma]\n\n      if (\n        nextElement.getAttribute('role') === 'group' ||\n        nextElement.getAttribute('role') === 'tree'\n      ) {\n        const nextSibling = elementSiblings[soma + operator]\n        nextSibling.focus()\n      } else {\n        nextElement.focus()\n      }\n    } else {\n      // Se a nova posição estiver fora dos limites, foca no primeiro ou no último elemento da lista, dependendo do operador\n      const lastIndex = elementSiblings.length - 1\n      const targetElement = operator === 1 ? 0 : lastIndex\n      const target = elementSiblings[targetElement]\n      target.focus()\n    }\n  }\n\n  /**\n   * Define comportamentos de abrir/fechar menu\n   * @private\n   */\n  _toggleMenu() {\n    const trigger = this.contextual ? this.contextual : this.trigger\n    // Clicar no trigger\n    if (trigger) {\n      trigger.addEventListener('keydown', (event) => {\n        if (event.code === 'Enter' || event.code === 'Space') {\n          event.preventDefault() // Impede o comportamento padrão do botão Enter ou Space\n          // Fechar Menu caso esteja aberto\n          if (this.component.classList.contains('active')) {\n            this._closeMenu()\n          } else {\n            // Abre Menu\n            this._openMenu()\n\n            this._focusOnFirstVisibleItem()\n          }\n        }\n      })\n\n      trigger.addEventListener('click', () => {\n        // Fechar Menu caso esteja aberto\n        if (this.component.classList.contains('active')) {\n          this._closeMenu()\n        } else {\n          this._openMenu()\n          this._focusOnFirstVisibleItem()\n        }\n      })\n    }\n    // Clicar no dismiss\n    for (const close of this.dismiss) {\n      close.addEventListener('click', () => {\n        return this._closeMenu()\n      })\n    }\n  }\n\n  /**\n   *  Focar no primeiro item de nível 1 visível\n   * @private\n   */\n  _focusOnFirstVisibleItem() {\n    const activeMenu = this.component.querySelector(\n      '.menu-body .menu-item:not([hidden]):not(.inactive)'\n    )\n    if (activeMenu) {\n      activeMenu.focus()\n      activeMenu.scrollIntoView({ block: 'nearest' }) // Foca e traz para a visualização se necessário\n      return\n    }\n\n    const firstVisibleItem = this.component.querySelector(\n      '.menu-body > .menu-item:not([hidden]):not(.inactive)'\n    )\n\n    if (firstVisibleItem) {\n      firstVisibleItem.focus()\n      firstVisibleItem.scrollIntoView({ block: 'nearest' }) // Foca e traz para a visualização se necessário\n    }\n  }\n\n  /**\n   * Define visual do menu aberto\n   * @private\n   */\n  _openMenu() {\n    this.elementOpenMenu = document.activeElement\n    this.component.classList.add('active')\n    this.component.setAttribute('aria-expanded', 'true')\n    this.elementOpenMenu.setAttribute('aria-expanded', 'true')\n\n    if (this.component.classList.contains('push')) {\n      this.component.classList.add(...this.breakpoints, 'px-0')\n    }\n  }\n\n  /**\n   * Define visual do menu fechado\n   * @private\n   */\n  _closeMenu() {\n    this.component.classList.remove('active')\n    if (this.component.classList.contains('push')) {\n      this.component.classList.remove(...this.breakpoints, 'px-0')\n    }\n    if (this.elementOpenMenu) {\n      this.elementOpenMenu.setAttribute('aria-expanded', 'false')\n    }\n    this.elementOpenMenu.focus()\n    // }\n  }\n\n  /**\n   * Configura Drop Menu para filho imediato de \".menu-folder\"\n   * @private\n   */\n  _setDropMenu() {\n    for (const item of this.component.querySelectorAll(\n      '.menu-folder > a.menu-item'\n    )) {\n      // Inclui ícone de Drop Menu\n      this._createIcon(item, 'fa-chevron-down')\n      // Configura como Drop Menu\n      item.parentNode.classList.add('drop-menu')\n      //Configura aria indicando que submenu está fechado\n      item.setAttribute('aria-expanded', 'false')\n      // Inicializa Drop Menu\n      this._handleMenuInteraction(item)\n    }\n  }\n\n  /**\n   * Foca no próximo elemento\n   * @private\n   */\n  _focusNextElement() {\n    //lista de elementos que desejamos focar\n    const focussableElements =\n      'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])'\n    if (document.activeElement) {\n      const focussable = Array.prototype.filter.call(\n        this.component.querySelectorAll(focussableElements),\n        (element) => {\n          // testa a visibilidade e inclui o elemento ativo\n          return (\n            element.offsetWidth > 0 ||\n            element.offsetHeight > 0 ||\n            element === document.activeElement\n          )\n        }\n      )\n      const index = focussable.indexOf(document.activeElement)\n      const nextElement = focussable[index + 1] || focussable[0]\n      nextElement.focus()\n    }\n  }\n\n  /**\n   * Configura Side Menu para quem não for filho imediato de \".menu-folder\"\n   * @private\n   */\n  _setSideMenu() {\n    for (const ul of this.component.querySelectorAll('a.menu-item + ul')) {\n      if (!ul.parentNode.classList.contains('menu-folder')) {\n        // Inclui ícone de Side Menu\n        this._createIcon(ul.previousElementSibling, 'fa-angle-right')\n        // Configura como Side Menu\n        ul.parentNode.classList.add('side-menu')\n        ul.parentNode.setAttribute('role', 'none')\n        // Inicializa Side Menu\n        this._handleSideMenuInteraction(ul.previousElementSibling)\n      }\n    }\n  }\n\n  /**\n   * Gerencia eventos de cliques e interações por teclado no menu - tecla espaço\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _handleMenuInteraction(element) {\n    if (!element.hasAttribute('data-click-listener')) {\n      element.addEventListener('click', () => {\n        this._toggleDropMenu(element)\n      })\n\n      element.addEventListener('keydown', (event) => {\n        const menuFolder = element.closest('.menu-folder')\n        const menuItem = menuFolder.querySelector('a.menu-item')\n\n        if (menuFolder) {\n          if (event.key === ' ' || event.key === 'Spacebar') {\n            if (menuItem && menuItem.classList.contains('focus-visible')) {\n              event.preventDefault()\n              this._toggleDropMenu(element)\n            }\n          }\n          if (event.key === '2') {\n            // event.preventDefault()\n\n            this._toggleDropMenu(element)\n          }\n        }\n      })\n\n      element.setAttribute('data-click-listener', 'true')\n    }\n  }\n\n  /**\n   * Muda estado do Drop Menu - aberto/fechado\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _toggleDropMenu(element) {\n    if (element.parentNode.classList.contains('active')) {\n      // this.inSubmenu = false\n      this._closeMenuElement(element)\n    } else {\n      element.parentNode.classList.add('active')\n      element.setAttribute('aria-expanded', 'true')\n\n      this.inSubmenu = true\n      element.parentElement\n        .querySelectorAll('ul li ul a')\n        .forEach((menuItem) => {\n          this.triggerParent = menuItem.parentElement\n          menuItem.addEventListener('keydown', (event) => {\n            const { parentElement } = menuItem.parentElement\n            const keyCode = event.code\n\n            switch (keyCode) {\n              case 'Escape':\n                event.preventDefault()\n                this._backMenu(parentElement)\n                break\n              case 'Backspace':\n                event.preventDefault()\n                this._backMenu(parentElement)\n                break\n              case 'ArrowLeft':\n                event.preventDefault()\n                this._backMenu(parentElement)\n                break\n              default:\n                break\n            }\n          })\n        })\n    }\n  }\n\n  _backMenu(parentElement) {\n    //\n\n    parentElement.parentElement.querySelector('[data-click-listener]').click()\n  }\n\n  _closeMenuElement(element) {\n    element.parentNode.classList.remove('active')\n    element.setAttribute('aria-expanded', 'false')\n  }\n\n  /**\n   * Gerencia eventos de cliques e interações por teclado no Side Menu - tecla espaço\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _handleSideMenuInteraction(element) {\n    // Verifica se o elemento já possui click listener através de um atributo especial\n    if (!element.hasAttribute('data-click-listener')) {\n      element.addEventListener('click', () => {\n        this.inSubmenu = false\n        this._toggleSideMenu(element)\n      })\n\n      element.addEventListener('keydown', (event) => {\n        const sideMenu = element.closest('.side-menu')\n        const menuItem = sideMenu.querySelector('a.menu-item')\n\n        if (sideMenu) {\n          if (event.key === ' ' || event.key === 'Spacebar') {\n            if (menuItem && menuItem.classList.contains('focus-visible')) {\n              event.preventDefault()\n              this._toggleSideMenu(element)\n            }\n          }\n        }\n      })\n\n      element.setAttribute('data-click-listener', 'true')\n    }\n  }\n\n  /**\n   * Muda estado do Side Menu - aberto/fechado\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _toggleSideMenu(element) {\n    this._hideItems(element)\n\n    // Mostra itens do Side Menu ativo\n    element.setAttribute('aria-expanded', 'true')\n    this._showItems(element.parentNode)\n\n    // Fecha Side Menu caso esteja aberto\n    if (element.parentNode.classList.contains('active')) {\n      this._closeSideMenu(element)\n      element.focus()\n      return\n    }\n\n    // Abre Side Menu\n    element.parentNode.classList.add('active')\n\n    // Foca no primeiro item do Side Menu\n    const submenu = element.nextElementSibling\n    if (submenu) {\n      const firstMenuItem = submenu.querySelector('.menu-item')\n      if (firstMenuItem) {\n        firstMenuItem.focus()\n      }\n    }\n  }\n\n  /**\n   * Fecha Side Menu\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _closeSideMenu(element) {\n    element.parentNode.classList.remove('active')\n    element.setAttribute('aria-expanded', 'false')\n    // Verifica se existe Side Menu anterior, caso contrário mostra todos os itens de volta\n    const parentFolder = element.parentNode.closest('.side-menu.active')\n      ? element.parentNode.closest('.side-menu.active')\n      : element.closest('.menu-body')\n    this._showItems(parentFolder)\n  }\n\n  /**\n   * Esconde os elementos proximos a referencia\n   * @private\n   * @param {object} element - referencia ao Objeto que fará a ação\n   */\n  _hideItems(element) {\n    for (const item of element\n      .closest('.menu-body')\n      .querySelectorAll('.menu-item')) {\n      item.setAttribute('hidden', '')\n    }\n  }\n\n  /**\n   * Mostra os elementos proximos a referencia\n   * @private\n   * @param {object} element - referência ao Objeto que fará a ação\n   */\n  _showItems(element) {\n    for (const item of element.querySelectorAll('.menu-item')) {\n      item.removeAttribute('hidden')\n    }\n  }\n\n  /**\n   * Cria icone filho a referencia\n   * @private\n   * @param {object} element - referência ao Objeto pai\n   * @param {string} icon - nome da classe font awesome do ícone\n   */\n  _createIcon(element, icon) {\n    // Verifica se já existe container para o ícone\n    if (!element.querySelectorAll('span.support').length) {\n      const menuIconContainer = document.createElement('span')\n      menuIconContainer.classList.add('support')\n\n      const menuIcon = document.createElement('i')\n      menuIcon.classList.add('fas')\n      menuIcon.classList.add(icon)\n      menuIcon.setAttribute('aria-hidden', 'true')\n\n      menuIconContainer.appendChild(menuIcon)\n      element.appendChild(menuIconContainer)\n    }\n  }\n\n  /**\n   * Adiciona atributos role=menu e role=menuitem com base na hierarquia dos elementos\n   * @private\n   */\n  _addARIAAttributes() {\n    // Adiciona atributo role=\"menubar\" à classe .menu-body\n    const menuBody = this.component.querySelector('.menu-body')\n    // menuBody.setAttribute('role', 'menubar')\n    menuBody.setAttribute('role', 'tree')\n    if (this.contextual) {\n      menuBody.setAttribute('role', 'menubar')\n    }\n\n    // Adiciona atributo role=\"group\" nos elementos .menu-item que são filhos de .menu-folder e não são drop-down\n    const nonDropdownItems = this.component.querySelectorAll(\n      '.menu-folder:not(.drop-menu) > .menu-item'\n    )\n    nonDropdownItems.forEach((item) => {\n      item.setAttribute('role', 'tree')\n      if (this.contextual) {\n        item.setAttribute('role', 'menubar')\n      }\n    })\n\n    // Adiciona atributo role=\"menuitem\" somente aos elementos <a> com a classe .menu-item que não têm .menu-folder como pai\n    const menuItems = this.component.querySelectorAll(\n      '.menu-folder.drop-menu > a.menu-item, li > a.menu-item'\n    )\n    menuItems.forEach((item) => {\n      item.setAttribute('role', 'treeitem')\n      if (this.contextual) {\n        item.setAttribute('role', 'menuitem')\n      }\n    })\n\n    // Adiciona atributo role=\"menu\" e aria-label nos elementos <ul> que são filhos de .side-menu\n    const sideMenuLists = this.component.querySelectorAll('.side-menu > ul')\n    sideMenuLists.forEach((list) => {\n      const menuItem = list.parentNode.querySelector('.menu-item .content')\n      const menuItemText = menuItem.textContent.trim()\n\n      list.setAttribute('role', 'group')\n      list.setAttribute('aria-label', menuItemText)\n    })\n\n    // Adiciona atributo role=\"menu\" e aria-label nos elementos <ul> que são filhos de .menu-folder\n    const menuFolderLists = this.component.querySelectorAll('.menu-folder > ul')\n    menuFolderLists.forEach((list) => {\n      const menuItem = list.parentNode.querySelector('.menu-item .content')\n      const menuItemText = menuItem.textContent.trim()\n      list.setAttribute('role', 'tree')\n      if (this.contextual) {\n        list.setAttribute('role', 'menubar')\n      }\n      list.setAttribute('aria-label', menuItemText)\n    })\n\n    const sideMenuItems = this.component.querySelectorAll(\n      'li.side-menu > .menu-item'\n    )\n    for (const submenu of sideMenuItems) {\n      submenu.setAttribute('aria-haspopup', 'true')\n      submenu.setAttribute('aria-expanded', 'false')\n    }\n\n    const folderMenuItems = this.component.querySelectorAll(\n      '.menu-folder.drop-menu > .menu-item'\n    )\n    for (const submenu of folderMenuItems) {\n      submenu.setAttribute('aria-haspopup', 'true')\n      submenu.setAttribute('aria-expanded', 'false')\n    }\n  }\n}\n\nexport default BRMenu\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}