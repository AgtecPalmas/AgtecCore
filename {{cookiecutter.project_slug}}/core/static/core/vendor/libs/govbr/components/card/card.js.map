{"version":3,"file":"components/card/card.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;ACVyD;;AAEzD;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,6CAA6C,GAAG;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,sEAAe,sDAAM;;;;;;AChHrB","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/card/card.js","webpack://core/./src/components/card/_card.scss?ee7e"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Collapse from '../../partial/js/behavior/collapse'\n\n/** Classe para instanciar um objeto BRCard */\nclass BRCard {\n  /**\n   * Instancia do componente\n   * @property {string} name - Nome do componente em minÃºsculo\n   * @property {object} component - Objeto referenciando a raiz do componente DOM\n   * @property {string} id - nome da id do ocmponente\n   */\n  constructor(name, component, id) {\n    this.name = name\n    this.component = component\n    this.component.setAttribute('id', `card${id}`)\n    this._setBehavior()\n  }\n\n  /**\n   * Define o comportamento do componente\n   * @private\n   */\n  _setBehavior() {\n    this._setFlipBehavior()\n    // this._setExpandBehavior()\n    this._setDragBehavior()\n    this._setDisableBehavior()\n    this._collpaseBehavior()\n  }\n\n  /**\n   * Define o comportamento de comprimir (collapse)\n   * @private\n   */\n  _collpaseBehavior() {\n    this.component\n      .querySelectorAll('[data-toggle=\"collapse\"]')\n      .forEach((trigger) => {\n        const config = {\n          iconToHide: 'fa-chevron-up',\n          iconToShow: 'fa-chevron-down',\n          trigger,\n          useIcons: true,\n        }\n        const collapse = new Collapse(config)\n        collapse.setBehavior()\n      })\n  }\n\n  /**\n   * Desabilita o componente\n   * @private\n   */\n  _setDisableBehavior() {\n    if (this.component.classList.contains('disabled')) {\n      this.component.setAttribute('aria-hidden', 'true')\n      const buttons = this.component.querySelectorAll('button')\n      const inputs = this.component.querySelectorAll('input')\n      const selects = this.component.querySelectorAll('select')\n      const textareas = this.component.querySelectorAll('textarea')\n      for (const button of buttons) {\n        button.setAttribute('disabled', 'disabled')\n      }\n      for (const input of inputs) {\n        input.setAttribute('disabled', 'disabled')\n      }\n      for (const select of selects) {\n        select.setAttribute('disabled', 'disabled')\n      }\n      for (const textarea of textareas) {\n        textarea.setAttribute('disabled', 'disabled')\n      }\n    }\n  }\n\n  /**\n   * Define o comportamento de girar (flip)\n   * @private\n   */\n  _setFlipBehavior() {\n    for (const flip of this.component.querySelectorAll('button.flip')) {\n      flip.addEventListener('click', () => {\n        if (this.component.getAttribute('flipped') === 'off') {\n          this.component.setAttribute('flipped', 'on')\n        } else {\n          this.component.setAttribute('flipped', 'off')\n        }\n      })\n    }\n  }\n\n  /**\n   * Define o comportamento de arrastar (drag)\n   * @private\n   */\n  _setDragBehavior() {\n    for (const img of this.component.querySelectorAll('img')) {\n      img.setAttribute('draggable', 'false')\n    }\n    for (const link of this.component.querySelectorAll('a')) {\n      link.setAttribute('draggable', 'false')\n    }\n    this.component.addEventListener('dragstart', (event) => {\n      event.stopPropagation()\n      event.dataTransfer.setData(\n        'text/plain',\n        this.component.getAttribute('id')\n      )\n      event.dropEffect = 'move'\n    })\n  }\n}\n\nexport default BRCard\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}