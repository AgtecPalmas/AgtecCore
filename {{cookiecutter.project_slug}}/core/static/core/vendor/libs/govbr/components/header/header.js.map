{"version":3,"file":"components/header/header.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;ACVuD;;AAEvD;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sEAAe,wDAAQ;;;;;;ACvUvB","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/header/header.js","webpack://core/./src/components/header/_header.scss?5b29"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Tooltip from '../../partial/js/behavior/tooltip'\n\n/** Classe para instanciar um objeto BRHeader*/\nclass BRHeader {\n  /**\n   * Instancia do objeto\n   * @param {string} name - Nome do componente em minúsculo\n   * @param {object} component - Objeto referenciando a raiz do componente DOM\n   */\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.componentSearch = this.component.querySelector('.header-search')\n    this.componentSearchInput = this.component.querySelector(\n      '.header-search input'\n    )\n    this.componentSearchTrigger = this.component.querySelector(\n      '[data-toggle=\"search\"]'\n    )\n    this.componentSearchDismiss = this.component.querySelector(\n      '[data-dismiss=\"search\"]'\n    )\n    this.hideDrop = null\n    this.menuTrigger = this.component.querySelector(\n      '[data-target=\"#main-navigation\"]'\n    )\n    this._setBehavior()\n  }\n\n  /**\n   * Define comportamentos do componente\n   * @private\n   */\n  _setBehavior() {\n    this._setLogoutBehavior()\n    this._setSearchBehaviors()\n    this._setKeyboardBehaviors()\n    this._setDropdownBehavior()\n    this._setSticky()\n  }\n\n  /**\n   * Define comportamentos de login\n   * @private\n   */\n  _setLoginBehavior() {\n    for (const login of this.component.querySelectorAll(\n      '[data-trigger=\"login\"]'\n    )) {\n      login.addEventListener('click', () => {\n        const loginParent = login.closest('.header-login')\n        loginParent.querySelector('.header-sign-in').classList.add('d-none')\n        loginParent.querySelector('.header-avatar').classList.remove('d-none')\n      })\n    }\n  }\n\n  /**\n   * Define comportamentos de logout\n   * @private\n   */\n  _setLogoutBehavior() {\n    for (const logout of this.component.querySelectorAll(\n      '[data-trigger=\"logout\"]'\n    )) {\n      logout.addEventListener('click', () => {\n        const logoutParent = logout.closest('.header-login')\n        logoutParent.querySelector('.avatar').classList.remove('show')\n        logoutParent\n          .querySelector('[data-toggle=\"dropdown\"]')\n          .classList.remove('active')\n        logoutParent.querySelector('.header-sign-in').classList.remove('d-none')\n        logoutParent.querySelector('.header-avatar').classList.add('d-none')\n      })\n    }\n  }\n\n  /**\n   * Define comportamentos de busca\n   * @private\n   */\n  _setSearchBehaviors() {\n    // Abrir busca\n    if (this.componentSearchTrigger) {\n      this.componentSearchTrigger.addEventListener('focus', () => {\n        this._cleanDropDownHeader()\n      })\n      this.componentSearchTrigger.addEventListener('click', () => {\n        this._openSearch()\n      })\n    }\n\n    // Fechar busca\n    if (this.componentSearchDismiss) {\n      this.componentSearchDismiss.addEventListener('click', () => {\n        this._closeSearch()\n      })\n    }\n  }\n\n  /**\n   * Define comportamentos do teclado\n   * @private\n   */\n  _setKeyboardBehaviors() {\n    if (this.componentSearchInput) {\n      this.componentSearchInput.addEventListener('keydown', (event) => {\n        switch (event.keyCode) {\n          // Tecla ESC\n          case 27:\n            this._closeSearch()\n            break\n          default:\n            break\n        }\n      })\n    }\n    for (const trigger of this.component.querySelectorAll(\n      '.dropdown [data-toggle=\"dropdown\"]'\n    )) {\n      trigger.addEventListener('keydown', (event) => {\n        switch (event.keyCode) {\n          // Tecla ESC\n          case 32:\n            if (event.target.parentNode.classList.contains('show')) {\n              event.target.parentNode.click()\n              event.target.parentNode.classList.remove('show')\n              event.target.classList.remove('active')\n              event.stopPropagation()\n            }\n            break\n          default:\n            break\n        }\n      })\n    }\n  }\n\n  /**\n   * Visualização da busca\n   * @private\n   */\n  _openSearch() {\n    if (this.componentSearch) {\n      this.componentSearch.classList.add('active')\n      this.componentSearch.querySelector('input').focus()\n    }\n  }\n\n  /**\n   * Esconde a busca\n   * @private\n   */\n  _closeSearch() {\n    if (this.componentSearch) {\n      this.componentSearch.classList.remove('active')\n      //this.componentSearchTrigger.focus()\n      this._nextFocusElement().focus()\n    }\n  }\n\n  /**\n   * Exibe notificação\n   * @param {event} event - referencia ao evento\n   */\n  handleEvent(event) {\n    const hasNotficiationElemeent = this.component\n      .querySelector('.br-notification')\n      .contains(event.target)\n    if (!hasNotficiationElemeent) {\n      if (this.activateTr !== event.target.parentNode) {\n        this._cleanDropDownHeaderRef(this.component)\n      }\n    }\n  }\n\n  /**\n   * Define comportamentos do dropdown\n   * @private\n   */\n  _setDropdownBehavior() {\n    // TODO: Trocar o código abaixo pelo utilitário dropdown\n    this.cleaned = false\n    let hideDrop\n    this.activateTr = 'teste'\n\n    for (const trigger of this.component.querySelectorAll(\n      '.dropdown [data-toggle=\"dropdown\"]'\n    )) {\n      // eslint-disable-next-line no-loop-func\n      trigger.addEventListener('click', (event) => {\n        this._headerTooltip()\n        clearTimeout(hideDrop)\n\n        this.activateTr = trigger\n        document.addEventListener('mousedown', this, false)\n        event.stopImmediatePropagation()\n        // Toggle de abrir / fechar\n        const hasShow = trigger.classList.contains('active')\n\n        if (hasShow) {\n          trigger.classList.remove('active')\n          trigger.closest('.dropdown').classList.remove('show')\n        } else {\n          this._cleanDropDownHeader()\n          trigger.classList.add('active')\n          trigger.closest('.dropdown').classList.add('show')\n\n          // Evita que o componente feche o drop ao navegar pelo teclado\n          const next = this._nextFocusElement()\n          next.addEventListener('focus', () => {\n            clearTimeout(hideDrop)\n          })\n        }\n        event.stopPropagation()\n        return ''\n      })\n\n      // Faz o drop fechar ao clicar fora\n      // eslint-disable-next-line no-loop-func\n    }\n    this.menuTrigger.addEventListener('focus', () => {\n      this._cleanDropDownHeader()\n    })\n  }\n\n  /**\n   * Define comportamentos do tooltip\n   * @private\n   */\n  _headerTooltip() {\n    if (this.TooltipExampleList) {\n      this.TooltipExampleList.forEach((tooltipElem) => {\n        tooltipElem.component.remove()\n        tooltipElem.popperInstance.destroy()\n      })\n    }\n    this.TooltipExampleList = []\n\n    this.component\n      .querySelectorAll('.notification-tooltip')\n      .forEach((TooltipExample) => {\n        const texttooltip = TooltipExample.getAttribute('data-tooltip-text')\n        const config = {\n          activator: TooltipExample,\n          placement: 'top',\n          textTooltip: texttooltip,\n        }\n        const x = new Tooltip(config)\n\n        this.TooltipExampleList.push(x)\n      })\n  }\n\n  /**\n   * Limpa referencias do dorpdown\n   * @private\n   * @param {object} ref - Referência ao componente header\n   */\n  _cleanDropDownHeaderRef(ref) {\n    if (this.cleaned === false) {\n      for (const trigger of ref.querySelectorAll('.dropdown.show')) {\n        trigger.classList.remove('show')\n        trigger.parentNode.classList.remove('show')\n        for (const button of ref.querySelectorAll('.br-button')) {\n          button.classList.remove('active')\n        }\n      }\n    }\n    this.cleaned = false\n  }\n\n  /**\n   * Limpa referencias do dorpdown\n   * @private\n   */\n  _cleanDropDownHeader() {\n    this._cleanDropDownHeaderRef(this.component)\n  }\n\n  /**\n   * Define modo sticky ao header\n   * @private\n   */\n  _setSticky() {\n    if (this.component.hasAttribute('data-sticky')) {\n      window.onscroll = () => {\n        if (window.pageYOffset > this.component.offsetHeight) {\n          this.component.classList.add('sticky', 'compact')\n        } else {\n          this.component.classList.remove('sticky', 'compact')\n        }\n      }\n    }\n  }\n\n  /**\n   * Foca no próximo elmento de ação\n   * @private\n   */\n  _nextFocusElement() {\n    //lista de elementos de ação\n    const focussableElements =\n      'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])'\n    if (document.activeElement) {\n      const focussable = Array.prototype.filter.call(\n        document.body.querySelectorAll(focussableElements),\n        (element) => {\n          //check for visibility while always include the current activeElement\n          return (\n            element.offsetWidth > 0 ||\n            element.offsetHeight > 0 ||\n            element === document.activeElement\n          )\n        }\n      )\n      const index = focussable.indexOf(document.activeElement)\n      if (index > -1) {\n        const nextElement = focussable[index + 1] || focussable[0]\n        //nextElement.focus();\n        return nextElement\n      }\n    }\n    return null\n  }\n}\n\nexport default BRHeader\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}