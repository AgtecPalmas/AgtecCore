{"version":3,"file":"components/wizard/wizard.min.js","mappings":"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","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/wizard/wizard.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Swipe from '../../partial/js/behavior/swipe'\n\n/** Classe para instanciar um objeto BRWizard*/\nclass BRWizard {\n  /**\n   * Instância do componente\n   * @param {string} name - nome do componente\n   * @param {object} component - referencia ao objeto do DOM\n   **/\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.DOMstrings = {\n      stepFormPanelClass: 'wizard-panel',\n      stepFormPanels: this.component.querySelectorAll('.wizard-panel'),\n      stepNextBtnClass: 'wizard-btn-next',\n      stepPrevBtnClass: 'wizard-btn-prev',\n      stepsBar: this.component.querySelector('.wizard-progress'),\n      stepsBarClass: 'wizard-progress',\n      stepsBtnClass: 'wizard-progress-btn',\n      stepsBtns: this.component.querySelectorAll('.wizard-progress-btn'),\n      stepsForm: this.component.querySelector('.wizard-form'),\n    }\n    /**\n     * Retira o atributo de uma lista de elementos\n     * @param {object[]} elementSet - Lista de objetos\n     * @param {string} attrName - Nome do atribbuto\n     */\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n\n    /**\n     * Retorna o elemento pai do objeto com a classe de referência\n     * @param {object} elem - Lista de objetos\n     * @param {string} parentClass - nome da classe de referência\n     * @returns {object}\n     */\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n\n    /**\n     * Retorna o índice do elemento botão de passo\n     * @param {object} elem - botão de passo\n     * @returns {number}\n     */\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n\n    /**\n     * Define o estado do botão ativo e limpa os demais estados dos botões\n     * @param {number} activeStepNum - número do botão ativo\n     */\n    this.setActiveStep = function (activeStepNum) {\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === activeStepNum) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n\n    /**\n     * Retorna o índice do painel ativo\n     * @returns {number}\n     */\n    this.getActivePanel = () => {\n      let activePanel\n      this.DOMstrings.stepFormPanels.forEach((elem) => {\n        if (elem.hasAttribute('active')) {\n          activePanel = elem\n        }\n      })\n      return activePanel\n    }\n\n    /**\n     * Abre o painel ativo e fecha paineis inativos\n     * @param {number} activePanelNum - numero do painel\n     */\n    this.setActivePanel = (activePanelNum) => {\n      // remove active class from all the panels\n      this.removeAttributes(this.DOMstrings.stepFormPanels, 'active')\n      // show active panel\n      this.DOMstrings.stepFormPanels.forEach((elem, index) => {\n        if (index === activePanelNum) {\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n\n    /**\n     * Define números dos passos\n     */\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        elem.setAttribute('step', index + 1)\n      })\n    }\n\n    /**\n     * Define passo e painel ativo\n     * @param {number} num - numero do passo\n     */\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n    }\n\n    /**\n     * Retrai painel de passos\n     */\n    this.collapseSteps = () => {\n      this.component.setAttribute('collapsed', '')\n    }\n\n    /**\n     * Expande painel de passos\n     */\n    this.expandSteps = () => {\n      this.component.removeAttribute('collapsed')\n    }\n\n    this._setBehavior()\n  }\n\n  /**\n   * Define os comportamentos do componente\n   * @private\n   */\n  _setBehavior() {\n    /**\n     * Mapeia clique na barra de passos\n     */\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      const activeStep = this.getActiveStep(eventTarget)\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n    })\n\n    /**\n     * Mapeia clique nos botões de navegação\n     */\n    this.DOMstrings.stepsForm.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (\n        !(\n          eventTarget.classList.contains(\n            `${this.DOMstrings.stepPrevBtnClass}`\n          ) ||\n          eventTarget.classList.contains(`${this.DOMstrings.stepNextBtnClass}`)\n        )\n      ) {\n        return\n      }\n      const activePanel = this.findParent(\n        eventTarget,\n        `${this.DOMstrings.stepFormPanelClass}`\n      )\n      let activePanelNum = Array.from(this.DOMstrings.stepFormPanels).indexOf(\n        activePanel\n      )\n      if (\n        eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`)\n      ) {\n        activePanelNum -= 1\n        activePanel.style.left = '1%'\n      } else {\n        activePanelNum += 1\n        activePanel.style.left = '-1%'\n      }\n      this.setActiveStep(activePanelNum)\n      this.setActivePanel(activePanelNum)\n    })\n\n    this.setStepsNum()\n\n    if (this.component.hasAttribute('step')) {\n      this.setStep(this.component.getAttribute('step'))\n    }\n\n    if (\n      this.component.hasAttribute('scroll') &&\n      !this.component.hasAttribute('vertical')\n    ) {\n      const stepsWidth =\n        Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n      this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n    }\n\n    /**\n     * Configura gestos (swipe)\n     */\n    const dispatcher = new Swipe(this.DOMstrings.stepsBar)\n    if (this.component.hasAttribute('vertical')) {\n      dispatcher.on('SWIPE_LEFT', () => {\n        this.collapseSteps()\n      })\n      dispatcher.on('SWIPE_RIGHT', () => {\n        this.expandSteps()\n      })\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    } else {\n      this.DOMstrings.stepsBar.ontouchstart = () => {\n        this.expandSteps()\n      }\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    }\n  }\n}\n\nexport default BRWizard\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","BRWizard","constructor","name","component","this","DOMstrings","stepFormPanelClass","stepFormPanels","querySelectorAll","stepNextBtnClass","stepPrevBtnClass","stepsBar","querySelector","stepsBarClass","stepsBtnClass","stepsBtns","stepsForm","removeAttributes","elemSet","attrName","forEach","elem","removeAttribute","findParent","parentClass","currentNode","classList","contains","parentNode","getActiveStep","Array","from","indexOf","setActiveStep","activeStepNum","index","setAttribute","getActivePanel","activePanel","hasAttribute","setActivePanel","activePanelNum","setStepsNum","setStep","num","activeStep","length","collapseSteps","expandSteps","_setBehavior","addEventListener","e","eventTarget","target","click","style","left","getAttribute","stepsWidth","Math","round","gridTemplateColumns","dispatcher","Swipe","on","ontouchstart"],"sourceRoot":""}