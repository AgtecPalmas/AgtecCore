{"version":3,"file":"components/wizard/wizard.min.js","mappings":"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","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/wizard/wizard.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Swipe from '../../partial/js/behavior/swipe'\n\n/** Classe para instanciar um objeto BRWizard*/\nclass BRWizard {\n  /**\n  * Instância do componente\n  * @param {string} name - nome do componente\n  * @param {object} component - referencia ao objeto do DOM\n  **/\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.DOMstrings = {\n      stepFormPanelClass: 'wizard-panel',\n      stepFormPanels: this.component.querySelectorAll('.wizard-panel'),\n      stepNextBtnClass: 'wizard-btn-next',\n      stepPrevBtnClass: 'wizard-btn-prev',\n      stepsBar: this.component.querySelector('.wizard-progress'),\n      stepsBarClass: 'wizard-progress',\n      stepsBtnClass: 'wizard-progress-btn',\n      stepsBtns: this.component.querySelectorAll('.wizard-progress-btn'),\n      stepsForm: this.component.querySelector('.wizard-form'),\n    }\n    /**\n    * Retira o atributo de uma lista de elementos\n    * @param {object[]} elementSet - Lista de objetos\n    * @param {string} attrName - Nome do atribbuto\n    */\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n    /**\n    * Adiciona o atributo de uma lista de elementos\n    * @param {object[]} elementSet - Lista de objetos\n    * @param {string} attrName - Nome do atribbuto\n    * @param {string} value - Valor do atribbuto\n    */\n    this.setAttributes = (elemSet, attrName,value) => {\n      elemSet.forEach((elem) => {\n        elem.setAttribute(attrName,value)\n      })\n    }\n\n    /**\n    * Retorna o elemento pai do objeto com a classe de referência\n    * @param {object} elem - Lista de objetos\n    * @param {string} parentClass - nome da classe de referência\n    * @returns {object}\n    */\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n\n    /**\n    * Retorna o índice do elemento botão de passo\n    * @param {object} elem - botão de passo\n    * @returns {number}\n    */\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n\n    /**\n    * Define o estado do botão ativo e limpa os demais estados dos botões\n    * @param {number} activeStepNum - número do botão ativo\n    */\n    this.setActiveStep = function (activeStepNum) {\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      this.setAttributes(this.DOMstrings.stepsBtns,'aria-selected', 'false')\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === activeStepNum) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n          elem.setAttribute('aria-selected','true')\n        }\n      })\n    }\n\n\n    /**\n    * Move o focus para o primeiro elemento na área de conteúdo do wizard que tenha o tabindex igual ou maior que 0\n    * @param {number} actualNumber - número do passo ativo\n    */    this.setFocusOnFirstElementPanel = (actualNumber)=>{\n      if(actualNumber){\n        const panelToFind = this.DOMstrings.stepFormPanels[actualNumber]\n        panelToFind.querySelectorAll(\".wizard-panel-content *\").forEach((item)=>{if(item.tabIndex>=0)item.focus()})\n      }\n    }\n\n\n\n    /**\n    * Retorna o índice do painel ativo\n    * @returns {number}\n    */\n    this.getActivePanel = () => {\n      let activePanel\n      this.DOMstrings.stepFormPanels.forEach((elem) => {\n        if (elem.hasAttribute('active')) {\n          activePanel = elem\n        }\n      })\n      return activePanel\n    }\n\n    /**\n    * Abre o painel ativo e fecha paineis inativos\n    * @param {number} activePanelNum - numero do painel\n    */\n    this.setActivePanel = (activePanelNum) => {\n      // remove active class from all the panels\n      this.removeAttributes(this.DOMstrings.stepFormPanels, 'active')\n      // show active panel\n      this.DOMstrings.stepFormPanels.forEach((elem, index) => {\n        if (index === activePanelNum) {\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n\n    /**\n    * Define números dos passos\n    */\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        elem.setAttribute('step', index + 1)\n      })\n    }\n\n    /**\n    * Define passo e painel ativo\n    * @param {number} num - numero do passo\n    */\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActivePanel(activeStep)\n      this.setFocusOnFirstElementPanel(activeStep)\n      this.setActiveStep(activeStep)\n    }\n\n    /**\n    * Retrai painel de passos\n    */\n    this.collapseSteps = () => {\n      this.component.setAttribute('collapsed', '')\n    }\n\n    /**\n    * Expande painel de passos\n    */\n    this.expandSteps = () => {\n      this.component.removeAttribute('collapsed')\n    }\n\n    this._setBehavior()\n  }\n\n  /**\n  * Define os comportamentos do componente\n  * @private\n  */\n  _setBehavior() {\n    /**\n    * Mapeia clique na barra de passos\n    */\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      const activeStep = this.getActiveStep(eventTarget)\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n      this.setFocusOnFirstElementPanel(activeStep)\n    })\n\n    /**\n    * Mapeia clique nos botões de navegação\n    */\n    this.DOMstrings.stepsForm.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (\n        !(\n          eventTarget.classList.contains(\n            `${this.DOMstrings.stepPrevBtnClass}`\n            ) ||\n            eventTarget.classList.contains(`${this.DOMstrings.stepNextBtnClass}`)\n            )\n            ) {\n              return\n            }\n            const activePanel = this.findParent(\n              eventTarget,\n              `${this.DOMstrings.stepFormPanelClass}`\n              )\n              let activePanelNum = Array.from(this.DOMstrings.stepFormPanels).indexOf(\n                activePanel\n                )\n                if (\n                  eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`)\n                  ) {\n                    activePanelNum -= 1\n                    activePanel.style.left = '1%'\n                  } else {\n                    activePanelNum += 1\n                    activePanel.style.left = '-1%'\n                  }\n                  this.setActiveStep(activePanelNum)\n                  this.setActivePanel(activePanelNum)\n                  this.setFocusOnFirstElementPanel(activePanelNum)\n                })\n\n                this.setStepsNum()\n\n                if (this.component.hasAttribute('step')) {\n                  this.setStep(this.component.getAttribute('step'))\n                }\n\n                if (\n                  this.component.hasAttribute('scroll') &&\n                  !this.component.hasAttribute('vertical')\n                  ) {\n                    const stepsWidth =\n                    Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n                    this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n                  }\n\n                  /**\n                  * Configura gestos (swipe)\n                  */\n                  const dispatcher = new Swipe(this.DOMstrings.stepsBar)\n                  if (this.component.hasAttribute('vertical')) {\n                    dispatcher.on('SWIPE_LEFT', () => {\n                      this.collapseSteps()\n                    })\n                    dispatcher.on('SWIPE_RIGHT', () => {\n                      this.expandSteps()\n                    })\n                    this.DOMstrings.stepsForm.ontouchstart = () => {\n                      this.collapseSteps()\n                    }\n                  } else {\n                    this.DOMstrings.stepsBar.ontouchstart = () => {\n                      this.expandSteps()\n                    }\n                    this.DOMstrings.stepsForm.ontouchstart = () => {\n                      this.collapseSteps()\n                    }\n                  }\n                }\n              }\n\n              export default BRWizard\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","BRWizard","constructor","name","component","this","DOMstrings","stepFormPanelClass","stepFormPanels","querySelectorAll","stepNextBtnClass","stepPrevBtnClass","stepsBar","querySelector","stepsBarClass","stepsBtnClass","stepsBtns","stepsForm","removeAttributes","elemSet","attrName","forEach","elem","removeAttribute","setAttributes","value","setAttribute","findParent","parentClass","currentNode","classList","contains","parentNode","getActiveStep","Array","from","indexOf","setActiveStep","activeStepNum","index","setFocusOnFirstElementPanel","actualNumber","panelToFind","item","tabIndex","focus","getActivePanel","activePanel","hasAttribute","setActivePanel","activePanelNum","setStepsNum","setStep","num","activeStep","length","collapseSteps","expandSteps","_setBehavior","addEventListener","e","eventTarget","target","click","style","left","getAttribute","stepsWidth","Math","round","gridTemplateColumns","dispatcher","Swipe","on","ontouchstart"],"sourceRoot":""}