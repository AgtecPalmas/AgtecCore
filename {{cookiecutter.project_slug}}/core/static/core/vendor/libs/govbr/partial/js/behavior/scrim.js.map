{"version":3,"file":"partial/js/behavior/scrim.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACe;AACf;AACA;AACA,YAAY,QAAQ;AACpB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA,gBAAgB,8DAA8D;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/webpack/bootstrap","webpack://core/webpack/runtime/define property getters","webpack://core/webpack/runtime/hasOwnProperty shorthand","webpack://core/webpack/runtime/make namespace object","webpack://core/./src/partial/js/behavior/scrim.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** Classe para o comportamento scrim */\nexport default class Scrim {\n  /**\n  * Instancia um comportamento scrim\n  * @param {object} - Objeto de configuração inicial para destructuring\n  * @property {object} trigger - Elemento DOM que representa o acionador do comportmento scrim\n  * @property {string} closeElement - Elemento Dom do trigger que fecha o scrim\n  * @property {boolean} escEnable - Habilita a tecla ESC do teclado para fechar o scrim\n  * @property {boolean} limitTabKey - Impede a navegação via tab fora da modal\n  */\n  constructor({ trigger, closeElement='', escEnable=false , limitTabKey=false}) {\n    this.trigger = trigger\n    this.escEnable = escEnable\n    this.limitTabKey = limitTabKey\n    this.closeElement = this.elementHideScrim(closeElement)\n    if (this.trigger) {\n      this.setBehavior()\n    }\n  }\n\n  /**\n  * Alterna o estado de visualização do comportamento scrim\n  * @private\n  */\n  showScrim(){\n    if (this.trigger) {\n      this.trigger.classList.add('active')\n      if(this.trigger.children.length>0){\n      const firstChild = this.trigger.children[0]\n        firstChild.setAttribute('aria-modal','true')\n        firstChild.setAttribute('role','dialog')\n        firstChild.setAttribute('data-visible', \"true\")\n      }\n      this._setFocusFirstElement()\n      if(this.limitTabKey){\n        this.limitTabNavigation()\n      }\n    }\n  }\n\n /**\n  * Ativa o foco para o primeiro elemento com zindex maior ou igual a zero\n  * @private\n  */\n_setFocusFirstElement(){\n  const  internalElments =this._getInternalElementsFocusable()\n  if(internalElments.length>0){\n    internalElments[0].focus()\n  }\n}\n\n  /**\n  * Limita a navegação via Tab\n  * @private\n  */\nlimitTabNavigation(){\n  document.addEventListener('focusin', function (e) {\n    let elementfocus = e.target\n    var isInternalElemnt = false\n    const  internalElments =this._getInternalElementsFocusable()\n    internalElments.forEach(function(element){\n      if(elementfocus==element){\n        isInternalElemnt = true\n      }\n    }\n    );\n    if(!isInternalElemnt){\n      e.preventDefault();\n      this._setFocusFirstElement()\n    }\n  }.bind(this))\n}\n\n  /**\n  * retorna os elementos internos que podem receber o estado de foco\n  * @private\n  */\n_getInternalElementsFocusable(){\n  return Array.from(this.trigger.querySelectorAll('*')).filter((element) => {\n    return element.tabIndex >= 0;\n  })\n}\n\n  /**\n  * Alterna o estado de escondido do comportamento scrim\n  * @private\n  */\n  hideScrim() {\n    this.trigger.classList.remove('active')\n    this.trigger.setAttribute('data-visible', false)\n  }\n\n  /**\n  * Seta o elemento Dom que vai fechar o scrim e adiciona o listener para fechar com ESC\n  * @public\n  */\n  elementHideScrim(element) {\n    this.hideElements(element);\n    this.addEscapeListener();\n  }\n\n    /**\n  * Seta o elemento Dom que vai fechar o scrim\n  * @public\n  */\n  hideElements(element) {\n    if(element){\n      this.trigger.querySelectorAll([element]).forEach((element) => {\n        this.closeElement = element;\n        this._setCloseClick();\n      });\n    }\n    this.trigger.querySelectorAll('[data-dismiss=true]').forEach((item) => {\n      this.closeElement = item;\n      this._setCloseClick();\n    });\n  }\n    /**\n  * Adiciona um listener para fechar o scrim com ESC quando o escEnable estiver como true\n  */\n  addEscapeListener() {\n    if (this.escEnable) {\n      document.addEventListener('keydown', (event) => {\n        if (event.key === 'Escape') {\n          this.hideScrim();\n        }\n      });\n    }\n  }\n\n  /**\n  * Adiciona listener de fechamento no elemento que fecha o scrim\n  * @private\n  */\n  _setCloseClick() {\n    this.closeElement.addEventListener('click', () => {\n      this.hideScrim()\n    })\n  }\n  /**\n  * Configura o comportamento scrim\n  * @public\n  */\n  setBehavior() {\n    this.trigger.addEventListener('click', (event) => {\n      if (event.target.getAttribute('data-scrim')) {\n        this.hideScrim()\n      }\n    })\n  }\n}\n"],"names":[],"sourceRoot":""}