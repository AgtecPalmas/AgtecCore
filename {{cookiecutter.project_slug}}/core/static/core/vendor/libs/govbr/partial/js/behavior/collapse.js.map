{"version":3,"file":"partial/js/behavior/collapse.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACe;AACf;AACA;AACA,aAAa,QAAQ;AACrB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yCAAyC;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yCAAyC;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/webpack/bootstrap","webpack://core/webpack/runtime/define property getters","webpack://core/webpack/runtime/hasOwnProperty shorthand","webpack://core/webpack/runtime/make namespace object","webpack://core/./src/partial/js/behavior/collapse.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** Classe para o comportamento Collapse */\nexport default class Collapse {\n  /**\n   * Instancia um comportamento collapse\n   * @param {object} - Objeto de configuração inicial para destructuring\n   * @property {object} trigger - Elemento DOM que representa o acionador do comportmento collapse\n   * @property {string} iconToShow - Classe que representa o ícone para mostrar o conteúdo (padrão: fa-chevron-down)\n   * @property {string} iconToHide - Classe que representa o ícone para esconder o conteúdo (padrão: fa-chevron-up)\n   * @property {boolean} useIcons - true: com ícone | false: sem ícone (padrão: true)\n   */\n  constructor({\n    trigger,\n    iconToShow = 'fa-chevron-down',\n    iconToHide = 'fa-chevron-up',\n    useIcons = true,\n  }) {\n    this.trigger = trigger\n    this.useIcons = useIcons\n    this.breakpoint = trigger.getAttribute('data-breakpoint')\n    this.setIconToShow(iconToShow)\n    this.setIconToHide(iconToHide)\n    this._setTarget()\n    this._setUp()\n  }\n\n  /**\n   * Determina qual elemento DOM é o alvo do comportamento collapse\n   * @private\n   */\n  _setTarget() {\n    this.target = document.querySelector(\n      `#${this.trigger.getAttribute('data-target')}`\n    )\n  }\n\n  // TODO: Melhorar a solução\n  _checkBreakpoint() {\n    if (this.breakpoint) {\n      if (window.matchMedia('(min-width: 977px)').matches) {\n        this.target.removeAttribute('hidden')\n      }\n    }\n  }\n\n  /**\n   * Trata a configuração inicial do comportamento collapse\n   * @private\n   */\n  _setUp() {\n    this._setVisibilityStatus()\n    if (this.useIcons) {\n      this._toggleIcon()\n    }\n    this.trigger.setAttribute(\n      'aria-controls',\n      `${this.trigger.getAttribute('data-target')}`\n    )\n    this._checkBreakpoint()\n  }\n\n  /**\n   * Configura o estado de visualização do comportamento collapse\n   * @private\n   */\n  _setVisibilityStatus() {\n    this._setTriggerVisibilityStatus()\n    this._setTargetVisibilityStatus()\n  }\n\n  /**\n   * Trata o estado de visualização do acionador\n   * @private\n   */\n  _setTriggerVisibilityStatus() {\n    if (this.target) {\n      if (this.target.hasAttribute('hidden')) {\n        this.trigger.setAttribute('data-visible', false)\n        this.trigger.setAttribute('aria-expanded', false)\n      } else {\n        this.trigger.setAttribute('data-visible', true)\n        this.trigger.setAttribute('aria-expanded', true)\n      }\n    }\n  }\n\n  /**\n   * Trata o estado de visualização do alvo\n   * @private\n   */\n  _setTargetVisibilityStatus() {\n    if (this.target) {\n      if (this.target.hasAttribute('hidden')) {\n        this.target.setAttribute('aria-hidden', true)\n      } else {\n        this.target.setAttribute('aria-hidden', false)\n      }\n    }\n  }\n\n  /**\n   * Handler para o evento de click no acionador do comportamento collapse\n   * Lança um evento 'change' a cada troca\n   * @private\n   */\n  _handleTriggerClickBehavior() {\n    if (this.breakpoint) {\n      if (window.matchMedia('(max-width: 977px)').matches) {\n        this._toggleVisibility()\n        if (this.useIcons) {\n          this._toggleIcon()\n        }\n        this.trigger.dispatchEvent(new Event('change'))\n      }\n    } else {\n      this._toggleVisibility()\n      if (this.useIcons) {\n        this._toggleIcon()\n      }\n      this.trigger.dispatchEvent(new Event('change'))\n    }\n  }\n\n  /**\n   * Alterna o estado de visualização do comportamento collapse\n   * @private\n   */\n  _toggleVisibility() {\n    if (this.target) {\n      this.target.hasAttribute('hidden')\n        ? this.target.removeAttribute('hidden')\n        : this.target.setAttribute('hidden', '')\n\n      this._setVisibilityStatus()\n    }\n  }\n\n  /**\n   * Troca o icone do acionador após uma mudança no estado de visualização do alvo\n   * Para o estado 'hidden' usa o iconToShow e para o estado 'shown' usa o iconToHide\n   * @public\n   */\n  _toggleIcon() {\n    this.trigger.querySelectorAll('i.fas').forEach((icon) => {\n      if (this.target) {\n        icon.classList.remove(\n          this.target.hasAttribute('hidden') ? this.iconToHide : this.iconToShow\n        )\n        icon.classList.add(\n          this.target.hasAttribute('hidden') ? this.iconToShow : this.iconToHide\n        )\n      }\n    })\n  }\n\n  /**\n   * Configura o comportamento collapse\n   * @public\n   */\n  setBehavior() {\n    this.trigger.addEventListener(\n      'click',\n      this._handleTriggerClickBehavior.bind(this)\n    )\n  }\n\n  /**\n   * Determina a classe do icone para mostrar o conteúdo\n   * @param {string} iconToShow - Classe que representa o ícone para mostrar o conteúdo\n   * @public\n   */\n  setIconToShow(iconToShow) {\n    this.iconToShow = iconToShow\n  }\n\n  /**\n   * Determina a classe do ícone para esconder o conteúdo\n   * @param {string} iconToHide - Classe que representa o ícone para esconder o conteúdo\n   * @public\n   */\n  setIconToHide(iconToHide) {\n    this.iconToHide = iconToHide\n  }\n}\n"],"names":[],"sourceRoot":""}